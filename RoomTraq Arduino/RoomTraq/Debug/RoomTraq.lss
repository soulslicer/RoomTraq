
RoomTraq.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002f2  00800100  00002750  000027e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002750  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001d1  008003f2  008003f2  00002ad6  2**0
                  ALLOC
  3 .stab         00000b40  00000000  00000000  00002ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ec4  00000000  00000000  00003618  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006d8  00000000  00000000  000044e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000608  00000000  00000000  00004bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009490  00000000  00000000  000051c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001e9f  00000000  00000000  0000e650  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003264  00000000  00000000  000104ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f58  00000000  00000000  00013754  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000025aa  00000000  00000000  000146ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000428a  00000000  00000000  00016c56  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000518  00000000  00000000  0001aee0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ac 00 	jmp	0x158	; 0x158 <__dtors_end>
       4:	0c 94 68 0c 	jmp	0x18d0	; 0x18d0 <__vector_1>
       8:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__vector_2>
       c:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__vector_3>
      10:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__vector_4>
      14:	0c 94 32 04 	jmp	0x864	; 0x864 <__vector_5>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__vector_16>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <__vector_18>
      4c:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <__vector_19>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>

00000068 <_ZL5table>:
      68:	00 c2 01 00 01 00 11 00 11 00 0c 00 00 e1 00 00     ................
      78:	0a 00 25 00 25 00 21 00 00 96 00 00 19 00 39 00     ..%.%.!.......9.
      88:	39 00 36 00 12 7a 00 00 1f 00 46 00 46 00 44 00     9.6..z....F.F.D.
      98:	80 70 00 00 22 00 4d 00 4d 00 4a 00 00 4b 00 00     .p..".M.M.J..K..
      a8:	36 00 75 00 75 00 72 00 40 38 00 00 4a 00 9c 00     6.u.u.r.@8..J...
      b8:	9c 00 99 00 80 25 00 00 72 00 ec 00 ec 00 e9 00     .....%..r.......
      c8:	c0 12 00 00 e9 00 da 01 da 01 d7 01 60 09 00 00     ............`...
      d8:	d7 01 b6 03 b6 03 b3 03 b0 04 00 00 b3 03 6e 07     ..............n.
      e8:	6e 07 6b 07 2c 01 00 00 dc 0e c1 1d c1 1d be 1d     n.k.,...........

000000f8 <port_to_mode_PGM>:
      f8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000102 <port_to_output_PGM>:
     102:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000010c <port_to_input_PGM>:
     10c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000116 <digital_pin_to_port_PGM>:
     116:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     126:	03 03 03 03                                         ....

0000012a <digital_pin_to_bit_mask_PGM>:
     12a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     13a:	04 08 10 20                                         ... 

0000013e <digital_pin_to_timer_PGM>:
     13e:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     14e:	00 00 00 00                                         ....

00000152 <__ctors_start>:
     152:	3b 0c       	add	r3, r11
     154:	ed 0f       	add	r30, r29

00000156 <__ctors_end>:
     156:	40 0c       	add	r4, r0

00000158 <__dtors_end>:
     158:	11 24       	eor	r1, r1
     15a:	1f be       	out	0x3f, r1	; 63
     15c:	cf ef       	ldi	r28, 0xFF	; 255
     15e:	d8 e0       	ldi	r29, 0x08	; 8
     160:	de bf       	out	0x3e, r29	; 62
     162:	cd bf       	out	0x3d, r28	; 61

00000164 <__do_copy_data>:
     164:	13 e0       	ldi	r17, 0x03	; 3
     166:	a0 e0       	ldi	r26, 0x00	; 0
     168:	b1 e0       	ldi	r27, 0x01	; 1
     16a:	e0 e5       	ldi	r30, 0x50	; 80
     16c:	f7 e2       	ldi	r31, 0x27	; 39
     16e:	02 c0       	rjmp	.+4      	; 0x174 <__do_copy_data+0x10>
     170:	05 90       	lpm	r0, Z+
     172:	0d 92       	st	X+, r0
     174:	a2 3f       	cpi	r26, 0xF2	; 242
     176:	b1 07       	cpc	r27, r17
     178:	d9 f7       	brne	.-10     	; 0x170 <__do_copy_data+0xc>

0000017a <__do_clear_bss>:
     17a:	15 e0       	ldi	r17, 0x05	; 5
     17c:	a2 ef       	ldi	r26, 0xF2	; 242
     17e:	b3 e0       	ldi	r27, 0x03	; 3
     180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
     182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
     184:	a3 3c       	cpi	r26, 0xC3	; 195
     186:	b1 07       	cpc	r27, r17
     188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>

0000018a <__do_global_ctors>:
     18a:	11 e0       	ldi	r17, 0x01	; 1
     18c:	c6 e5       	ldi	r28, 0x56	; 86
     18e:	d1 e0       	ldi	r29, 0x01	; 1
     190:	04 c0       	rjmp	.+8      	; 0x19a <__do_global_ctors+0x10>
     192:	22 97       	sbiw	r28, 0x02	; 2
     194:	fe 01       	movw	r30, r28
     196:	0e 94 12 12 	call	0x2424	; 0x2424 <__tablejump__>
     19a:	c2 35       	cpi	r28, 0x52	; 82
     19c:	d1 07       	cpc	r29, r17
     19e:	c9 f7       	brne	.-14     	; 0x192 <__do_global_ctors+0x8>
     1a0:	0e 94 3d 10 	call	0x207a	; 0x207a <main>
     1a4:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__do_global_dtors>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <_ZN14DistanceDriverC1Ehhhh>:
 *  Author: Raaj
 */ 

#include "DistanceDriver.h"

DistanceDriver::DistanceDriver(byte pinReceiveURM1, byte pinSendURM1,byte pinReceiveURM2, byte pinSendURM2){
     1ac:	8f 92       	push	r8
     1ae:	9f 92       	push	r9
     1b0:	af 92       	push	r10
     1b2:	bf 92       	push	r11
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	00 d0       	rcall	.+0      	; 0x1c6 <_ZN14DistanceDriverC1Ehhhh+0x1a>
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
     1ca:	6c 01       	movw	r12, r24
     1cc:	a2 2e       	mov	r10, r18
     1ce:	b0 2e       	mov	r11, r16
     1d0:	22 e0       	ldi	r18, 0x02	; 2
     1d2:	82 2e       	mov	r8, r18
     1d4:	91 2c       	mov	r9, r1
     1d6:	88 0e       	add	r8, r24
     1d8:	99 1e       	adc	r9, r25
     1da:	c4 01       	movw	r24, r8
     1dc:	4a 83       	std	Y+2, r20	; 0x02
     1de:	69 83       	std	Y+1, r22	; 0x01
     1e0:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN9URMSerialC1Ev>
     1e4:	32 e1       	ldi	r19, 0x12	; 18
     1e6:	e3 2e       	mov	r14, r19
     1e8:	f1 2c       	mov	r15, r1
     1ea:	ec 0c       	add	r14, r12
     1ec:	fd 1c       	adc	r15, r13
     1ee:	c7 01       	movw	r24, r14
     1f0:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN9URMSerialC1Ev>
	urm1.begin(pinReceiveURM1,pinSendURM1,9600); 
     1f4:	c4 01       	movw	r24, r8
     1f6:	69 81       	ldd	r22, Y+1	; 0x01
     1f8:	4a 81       	ldd	r20, Y+2	; 0x02
     1fa:	00 e8       	ldi	r16, 0x80	; 128
     1fc:	15 e2       	ldi	r17, 0x25	; 37
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	0e 94 13 07 	call	0xe26	; 0xe26 <_ZN9URMSerial5beginEhhl>
	urm1.end();
     206:	c4 01       	movw	r24, r8
     208:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN9URMSerial3endEv>
	urm2.begin(pinReceiveURM2,pinSendURM2,9600);
     20c:	c7 01       	movw	r24, r14
     20e:	6a 2d       	mov	r22, r10
     210:	4b 2d       	mov	r20, r11
     212:	00 e8       	ldi	r16, 0x80	; 128
     214:	15 e2       	ldi	r17, 0x25	; 37
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	0e 94 13 07 	call	0xe26	; 0xe26 <_ZN9URMSerial5beginEhhl>
	urm2.end();
     21e:	c7 01       	movw	r24, r14
     220:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN9URMSerial3endEv>
	baseValue=85;
     224:	85 e5       	ldi	r24, 0x55	; 85
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	f6 01       	movw	r30, r12
     22a:	93 a3       	lds	r25, 0x53
     22c:	82 a3       	lds	r24, 0x52
	entryCount=0;
     22e:	11 82       	std	Z+1, r1	; 0x01
     230:	10 82       	st	Z, r1
}
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	1f 91       	pop	r17
     23c:	0f 91       	pop	r16
     23e:	ff 90       	pop	r15
     240:	ef 90       	pop	r14
     242:	df 90       	pop	r13
     244:	cf 90       	pop	r12
     246:	bf 90       	pop	r11
     248:	af 90       	pop	r10
     24a:	9f 90       	pop	r9
     24c:	8f 90       	pop	r8
     24e:	08 95       	ret

00000250 <_ZN14DistanceDriver9pingCountEv>:

int delayP=3;
int detectDef=3;
int distanceThresh=8;

void DistanceDriver::pingCount(){
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	00 d0       	rcall	.+0      	; 0x25e <_ZN14DistanceDriver9pingCountEv+0xe>
     25e:	00 d0       	rcall	.+0      	; 0x260 <_ZN14DistanceDriver9pingCountEv+0x10>
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
     264:	7c 01       	movw	r14, r24
	
	//Getting Distance
	int urm1Val=0;
     266:	1c 82       	std	Y+4, r1	; 0x04
     268:	1b 82       	std	Y+3, r1	; 0x03
	urm1.beginBasic(9600);
     26a:	8c 01       	movw	r16, r24
     26c:	0e 5f       	subi	r16, 0xFE	; 254
     26e:	1f 4f       	sbci	r17, 0xFF	; 255
     270:	c8 01       	movw	r24, r16
     272:	40 e8       	ldi	r20, 0x80	; 128
     274:	55 e2       	ldi	r21, 0x25	; 37
     276:	60 e0       	ldi	r22, 0x00	; 0
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	0e 94 51 07 	call	0xea2	; 0xea2 <_ZN9URMSerial10beginBasicEl>

	if(urm1.requestMeasurementOrTimeout(DISTANCE, urm1Val)==DISTANCE){
     27e:	c8 01       	movw	r24, r16
     280:	61 e0       	ldi	r22, 0x01	; 1
     282:	ae 01       	movw	r20, r28
     284:	4d 5f       	subi	r20, 0xFD	; 253
     286:	5f 4f       	sbci	r21, 0xFF	; 255
     288:	0e 94 e5 06 	call	0xdca	; 0xdca <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi>
     28c:	f7 01       	movw	r30, r14
     28e:	22 a1       	lds	r18, 0x42
     290:	33 a1       	lds	r19, 0x43
     292:	81 30       	cpi	r24, 0x01	; 1
     294:	a9 f4       	brne	.+42     	; 0x2c0 <_ZN14DistanceDriver9pingCountEv+0x70>
		if(urm1Val>baseValue || urm1Val<0 || urm1Val==-257){
     296:	8b 81       	ldd	r24, Y+3	; 0x03
     298:	9c 81       	ldd	r25, Y+4	; 0x04
     29a:	28 17       	cp	r18, r24
     29c:	39 07       	cpc	r19, r25
     29e:	84 f0       	brlt	.+32     	; 0x2c0 <_ZN14DistanceDriver9pingCountEv+0x70>
     2a0:	97 fd       	sbrc	r25, 7
     2a2:	0e c0       	rjmp	.+28     	; 0x2c0 <_ZN14DistanceDriver9pingCountEv+0x70>
			urm1Val=baseValue;
			urm1.end();
		}else{
			urm1.end();
     2a4:	c8 01       	movw	r24, r16
     2a6:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN9URMSerial3endEv>
			delay(delayP);
     2aa:	60 91 76 01 	lds	r22, 0x0176
     2ae:	70 91 77 01 	lds	r23, 0x0177
     2b2:	88 27       	eor	r24, r24
     2b4:	77 fd       	sbrc	r23, 7
     2b6:	80 95       	com	r24
     2b8:	98 2f       	mov	r25, r24
     2ba:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
     2be:	05 c0       	rjmp	.+10     	; 0x2ca <_ZN14DistanceDriver9pingCountEv+0x7a>
		}
	}else{
		urm1Val=baseValue;
     2c0:	3c 83       	std	Y+4, r19	; 0x04
     2c2:	2b 83       	std	Y+3, r18	; 0x03
		urm1.end();
     2c4:	c8 01       	movw	r24, r16
     2c6:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN9URMSerial3endEv>
	}	
	
	
	int urm2val=0;
     2ca:	1a 82       	std	Y+2, r1	; 0x02
     2cc:	19 82       	std	Y+1, r1	; 0x01
	
	urm2.beginBasic(9600);
     2ce:	87 01       	movw	r16, r14
     2d0:	0e 5e       	subi	r16, 0xEE	; 238
     2d2:	1f 4f       	sbci	r17, 0xFF	; 255
     2d4:	c8 01       	movw	r24, r16
     2d6:	40 e8       	ldi	r20, 0x80	; 128
     2d8:	55 e2       	ldi	r21, 0x25	; 37
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	0e 94 51 07 	call	0xea2	; 0xea2 <_ZN9URMSerial10beginBasicEl>
	if(urm2.requestMeasurementOrTimeout(DISTANCE, urm2val)==DISTANCE){
     2e2:	c8 01       	movw	r24, r16
     2e4:	61 e0       	ldi	r22, 0x01	; 1
     2e6:	ae 01       	movw	r20, r28
     2e8:	4f 5f       	subi	r20, 0xFF	; 255
     2ea:	5f 4f       	sbci	r21, 0xFF	; 255
     2ec:	0e 94 e5 06 	call	0xdca	; 0xdca <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi>
     2f0:	f7 01       	movw	r30, r14
     2f2:	22 a1       	lds	r18, 0x42
     2f4:	33 a1       	lds	r19, 0x43
     2f6:	81 30       	cpi	r24, 0x01	; 1
     2f8:	d9 f4       	brne	.+54     	; 0x330 <_ZN14DistanceDriver9pingCountEv+0xe0>
		if(urm2val>baseValue || urm1Val<0 || urm2val==-257){
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	9a 81       	ldd	r25, Y+2	; 0x02
     2fe:	28 17       	cp	r18, r24
     300:	39 07       	cpc	r19, r25
     302:	b4 f0       	brlt	.+44     	; 0x330 <_ZN14DistanceDriver9pingCountEv+0xe0>
     304:	4b 81       	ldd	r20, Y+3	; 0x03
     306:	5c 81       	ldd	r21, Y+4	; 0x04
     308:	57 fd       	sbrc	r21, 7
     30a:	12 c0       	rjmp	.+36     	; 0x330 <_ZN14DistanceDriver9pingCountEv+0xe0>
     30c:	fe ef       	ldi	r31, 0xFE	; 254
     30e:	8f 3f       	cpi	r24, 0xFF	; 255
     310:	9f 07       	cpc	r25, r31
     312:	71 f0       	breq	.+28     	; 0x330 <_ZN14DistanceDriver9pingCountEv+0xe0>
			urm2val=baseValue;
			urm2.end();
		}else{

			urm2.end();
     314:	c8 01       	movw	r24, r16
     316:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN9URMSerial3endEv>
			delay(delayP);
     31a:	60 91 76 01 	lds	r22, 0x0176
     31e:	70 91 77 01 	lds	r23, 0x0177
     322:	88 27       	eor	r24, r24
     324:	77 fd       	sbrc	r23, 7
     326:	80 95       	com	r24
     328:	98 2f       	mov	r25, r24
     32a:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
     32e:	05 c0       	rjmp	.+10     	; 0x33a <_ZN14DistanceDriver9pingCountEv+0xea>
		}
	}else{
		urm2val=baseValue;
     330:	3a 83       	std	Y+2, r19	; 0x02
     332:	29 83       	std	Y+1, r18	; 0x01
		urm2.end();
     334:	c8 01       	movw	r24, r16
     336:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN9URMSerial3endEv>
	
	*/
	//return;
	
	//URM1
	if(lock2==false){
     33a:	80 91 f2 03 	lds	r24, 0x03F2
     33e:	88 23       	and	r24, r24
     340:	09 f0       	breq	.+2      	; 0x344 <_ZN14DistanceDriver9pingCountEv+0xf4>
     342:	61 c0       	rjmp	.+194    	; 0x406 <_ZN14DistanceDriver9pingCountEv+0x1b6>
		if(urm1First==true){
     344:	40 91 f7 03 	lds	r20, 0x03F7
     348:	2b 81       	ldd	r18, Y+3	; 0x03
     34a:	3c 81       	ldd	r19, Y+4	; 0x04
     34c:	80 91 72 01 	lds	r24, 0x0172
     350:	90 91 73 01 	lds	r25, 0x0173
     354:	44 23       	and	r20, r20
     356:	29 f1       	breq	.+74     	; 0x3a2 <_ZN14DistanceDriver9pingCountEv+0x152>
			if((urm1Val>distanceThresh) && (urm2val>distanceThresh)){ //user left
     358:	82 17       	cp	r24, r18
     35a:	93 07       	cpc	r25, r19
     35c:	0c f0       	brlt	.+2      	; 0x360 <_ZN14DistanceDriver9pingCountEv+0x110>
     35e:	cd c0       	rjmp	.+410    	; 0x4fa <_ZN14DistanceDriver9pingCountEv+0x2aa>
     360:	29 81       	ldd	r18, Y+1	; 0x01
     362:	3a 81       	ldd	r19, Y+2	; 0x02
     364:	82 17       	cp	r24, r18
     366:	93 07       	cpc	r25, r19
     368:	0c f0       	brlt	.+2      	; 0x36c <_ZN14DistanceDriver9pingCountEv+0x11c>
     36a:	c7 c0       	rjmp	.+398    	; 0x4fa <_ZN14DistanceDriver9pingCountEv+0x2aa>
				entryCount++;
     36c:	f7 01       	movw	r30, r14
     36e:	80 81       	ld	r24, Z
     370:	91 81       	ldd	r25, Z+1	; 0x01
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	91 83       	std	Z+1, r25	; 0x01
     376:	80 83       	st	Z, r24
				urm1First=false;
     378:	10 92 f7 03 	sts	0x03F7, r1
				lock1=false;
     37c:	10 92 f3 03 	sts	0x03F3, r1
			
				Serial.println("");
     380:	80 ea       	ldi	r24, 0xA0	; 160
     382:	95 e0       	ldi	r25, 0x05	; 5
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	71 e0       	ldi	r23, 0x01	; 1
     388:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
				Serial.println("");
     38c:	80 ea       	ldi	r24, 0xA0	; 160
     38e:	95 e0       	ldi	r25, 0x05	; 5
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	71 e0       	ldi	r23, 0x01	; 1
     394:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
				Serial.print("ENTRY: EntryCount: ");
     398:	80 ea       	ldi	r24, 0xA0	; 160
     39a:	95 e0       	ldi	r25, 0x05	; 5
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	71 e0       	ldi	r23, 0x01	; 1
     3a0:	65 c0       	rjmp	.+202    	; 0x46c <_ZN14DistanceDriver9pingCountEv+0x21c>
				return;
			}else{
				return;
			}
		}
		if(diffDetect1==true){
     3a2:	40 91 f9 03 	lds	r20, 0x03F9
     3a6:	44 23       	and	r20, r20
     3a8:	31 f1       	breq	.+76     	; 0x3f6 <_ZN14DistanceDriver9pingCountEv+0x1a6>
			if(urm1Val<distanceThresh){
     3aa:	28 17       	cp	r18, r24
     3ac:	39 07       	cpc	r19, r25
     3ae:	e4 f4       	brge	.+56     	; 0x3e8 <_ZN14DistanceDriver9pingCountEv+0x198>
				
				detectCount1++;
     3b0:	20 91 f8 03 	lds	r18, 0x03F8
     3b4:	2f 5f       	subi	r18, 0xFF	; 255
     3b6:	20 93 f8 03 	sts	0x03F8, r18
				if(detectCount1>=detectDef){
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	80 91 74 01 	lds	r24, 0x0174
     3c0:	90 91 75 01 	lds	r25, 0x0175
     3c4:	28 17       	cp	r18, r24
     3c6:	39 07       	cpc	r19, r25
     3c8:	0c f4       	brge	.+2      	; 0x3cc <_ZN14DistanceDriver9pingCountEv+0x17c>
     3ca:	97 c0       	rjmp	.+302    	; 0x4fa <_ZN14DistanceDriver9pingCountEv+0x2aa>
					urm1First=true;
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	80 93 f7 03 	sts	0x03F7, r24
					diffDetect1=false;
     3d2:	10 92 f9 03 	sts	0x03F9, r1
					detectCount1=0;
     3d6:	10 92 f8 03 	sts	0x03F8, r1
					Serial.println("***********Trigger urm1*************");
     3da:	80 ea       	ldi	r24, 0xA0	; 160
     3dc:	95 e0       	ldi	r25, 0x05	; 5
     3de:	65 e1       	ldi	r22, 0x15	; 21
     3e0:	71 e0       	ldi	r23, 0x01	; 1
     3e2:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
     3e6:	89 c0       	rjmp	.+274    	; 0x4fa <_ZN14DistanceDriver9pingCountEv+0x2aa>
				}
			
				return;
			}else{
				detectCount1=0;
     3e8:	10 92 f8 03 	sts	0x03F8, r1
				diffDetect1=false;
     3ec:	10 92 f9 03 	sts	0x03F9, r1
				lock1=false;
     3f0:	10 92 f3 03 	sts	0x03F3, r1
				return;
     3f4:	82 c0       	rjmp	.+260    	; 0x4fa <_ZN14DistanceDriver9pingCountEv+0x2aa>
			}
		}
		if(urm1Val<distanceThresh){
     3f6:	28 17       	cp	r18, r24
     3f8:	39 07       	cpc	r19, r25
     3fa:	2c f4       	brge	.+10     	; 0x406 <_ZN14DistanceDriver9pingCountEv+0x1b6>
			//Serial.println("lock1");
			 lock1=true;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	80 93 f3 03 	sts	0x03F3, r24
			 diffDetect1=true;
     402:	80 93 f9 03 	sts	0x03F9, r24
		}
	}		
	
	//URM2
	if(lock1==false){
     406:	80 91 f3 03 	lds	r24, 0x03F3
     40a:	88 23       	and	r24, r24
     40c:	09 f0       	breq	.+2      	; 0x410 <_ZN14DistanceDriver9pingCountEv+0x1c0>
     40e:	75 c0       	rjmp	.+234    	; 0x4fa <_ZN14DistanceDriver9pingCountEv+0x2aa>
		if(urm2First==true){
     410:	20 91 f4 03 	lds	r18, 0x03F4
     414:	80 91 72 01 	lds	r24, 0x0172
     418:	90 91 73 01 	lds	r25, 0x0173
     41c:	22 23       	and	r18, r18
     41e:	e1 f1       	breq	.+120    	; 0x498 <_ZN14DistanceDriver9pingCountEv+0x248>
			if((urm1Val>distanceThresh) && (urm2val>distanceThresh)){ //user left
     420:	2b 81       	ldd	r18, Y+3	; 0x03
     422:	3c 81       	ldd	r19, Y+4	; 0x04
     424:	82 17       	cp	r24, r18
     426:	93 07       	cpc	r25, r19
     428:	0c f0       	brlt	.+2      	; 0x42c <_ZN14DistanceDriver9pingCountEv+0x1dc>
     42a:	67 c0       	rjmp	.+206    	; 0x4fa <_ZN14DistanceDriver9pingCountEv+0x2aa>
     42c:	29 81       	ldd	r18, Y+1	; 0x01
     42e:	3a 81       	ldd	r19, Y+2	; 0x02
     430:	82 17       	cp	r24, r18
     432:	93 07       	cpc	r25, r19
     434:	0c f0       	brlt	.+2      	; 0x438 <_ZN14DistanceDriver9pingCountEv+0x1e8>
     436:	61 c0       	rjmp	.+194    	; 0x4fa <_ZN14DistanceDriver9pingCountEv+0x2aa>
				entryCount--;
     438:	f7 01       	movw	r30, r14
     43a:	80 81       	ld	r24, Z
     43c:	91 81       	ldd	r25, Z+1	; 0x01
     43e:	01 97       	sbiw	r24, 0x01	; 1
     440:	91 83       	std	Z+1, r25	; 0x01
     442:	80 83       	st	Z, r24
				urm2First=false;
     444:	10 92 f4 03 	sts	0x03F4, r1
				lock2=false;
     448:	10 92 f2 03 	sts	0x03F2, r1
			
				Serial.println("");
     44c:	80 ea       	ldi	r24, 0xA0	; 160
     44e:	95 e0       	ldi	r25, 0x05	; 5
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	71 e0       	ldi	r23, 0x01	; 1
     454:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
				Serial.println("");
     458:	80 ea       	ldi	r24, 0xA0	; 160
     45a:	95 e0       	ldi	r25, 0x05	; 5
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	71 e0       	ldi	r23, 0x01	; 1
     460:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
				Serial.print("EXIT: EntryCount: ");
     464:	80 ea       	ldi	r24, 0xA0	; 160
     466:	95 e0       	ldi	r25, 0x05	; 5
     468:	6a e3       	ldi	r22, 0x3A	; 58
     46a:	71 e0       	ldi	r23, 0x01	; 1
     46c:	0e 94 92 11 	call	0x2324	; 0x2324 <_ZN5Print5printEPKc>
				Serial.print(entryCount);
     470:	f7 01       	movw	r30, r14
     472:	60 81       	ld	r22, Z
     474:	71 81       	ldd	r23, Z+1	; 0x01
     476:	80 ea       	ldi	r24, 0xA0	; 160
     478:	95 e0       	ldi	r25, 0x05	; 5
     47a:	4a e0       	ldi	r20, 0x0A	; 10
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <_ZN5Print5printEii>
				Serial.println("");
     482:	80 ea       	ldi	r24, 0xA0	; 160
     484:	95 e0       	ldi	r25, 0x05	; 5
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	71 e0       	ldi	r23, 0x01	; 1
     48a:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
				Serial.println("");
     48e:	80 ea       	ldi	r24, 0xA0	; 160
     490:	95 e0       	ldi	r25, 0x05	; 5
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	71 e0       	ldi	r23, 0x01	; 1
     496:	a5 cf       	rjmp	.-182    	; 0x3e2 <_ZN14DistanceDriver9pingCountEv+0x192>
				return;
			}else{
				return;
			}
	}
	if(diffDetect2==true){
     498:	40 91 f6 03 	lds	r20, 0x03F6
     49c:	29 81       	ldd	r18, Y+1	; 0x01
     49e:	3a 81       	ldd	r19, Y+2	; 0x02
     4a0:	44 23       	and	r20, r20
     4a2:	19 f1       	breq	.+70     	; 0x4ea <_ZN14DistanceDriver9pingCountEv+0x29a>
		if(urm2val<distanceThresh){
     4a4:	28 17       	cp	r18, r24
     4a6:	39 07       	cpc	r19, r25
     4a8:	cc f4       	brge	.+50     	; 0x4dc <_ZN14DistanceDriver9pingCountEv+0x28c>
			
			detectCount2++;
     4aa:	20 91 f5 03 	lds	r18, 0x03F5
     4ae:	2f 5f       	subi	r18, 0xFF	; 255
     4b0:	20 93 f5 03 	sts	0x03F5, r18
			if(detectCount2>=detectDef){
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	80 91 74 01 	lds	r24, 0x0174
     4ba:	90 91 75 01 	lds	r25, 0x0175
     4be:	28 17       	cp	r18, r24
     4c0:	39 07       	cpc	r19, r25
     4c2:	dc f0       	brlt	.+54     	; 0x4fa <_ZN14DistanceDriver9pingCountEv+0x2aa>
				urm2First=true;
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	80 93 f4 03 	sts	0x03F4, r24
				diffDetect2=false;
     4ca:	10 92 f6 03 	sts	0x03F6, r1
				detectCount2=0;
     4ce:	10 92 f5 03 	sts	0x03F5, r1
				Serial.println("***********Trigger urm2*************");
     4d2:	80 ea       	ldi	r24, 0xA0	; 160
     4d4:	95 e0       	ldi	r25, 0x05	; 5
     4d6:	6d e4       	ldi	r22, 0x4D	; 77
     4d8:	71 e0       	ldi	r23, 0x01	; 1
     4da:	83 cf       	rjmp	.-250    	; 0x3e2 <_ZN14DistanceDriver9pingCountEv+0x192>
			}

			return;
		}else{
			detectCount2=0;
     4dc:	10 92 f5 03 	sts	0x03F5, r1
			diffDetect2=false;
     4e0:	10 92 f6 03 	sts	0x03F6, r1
			lock2=false;
     4e4:	10 92 f2 03 	sts	0x03F2, r1
			return;
     4e8:	08 c0       	rjmp	.+16     	; 0x4fa <_ZN14DistanceDriver9pingCountEv+0x2aa>
		}
	}
	if(urm2val<distanceThresh){
     4ea:	28 17       	cp	r18, r24
     4ec:	39 07       	cpc	r19, r25
     4ee:	2c f4       	brge	.+10     	; 0x4fa <_ZN14DistanceDriver9pingCountEv+0x2aa>
		//Serial.println("lock2");
		lock2=true;
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	80 93 f2 03 	sts	0x03F2, r24
		diffDetect2=true;
     4f6:	80 93 f6 03 	sts	0x03F6, r24
	}
}	
	
}
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	08 95       	ret

00000510 <_ZN14SoftwareSerial4readEv>:


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     510:	20 91 3c 04 	lds	r18, 0x043C
     514:	30 91 3d 04 	lds	r19, 0x043D
     518:	28 17       	cp	r18, r24
     51a:	39 07       	cpc	r19, r25
     51c:	b9 f4       	brne	.+46     	; 0x54c <_ZN14SoftwareSerial4readEv+0x3c>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     51e:	90 91 fa 03 	lds	r25, 0x03FA
     522:	80 91 fb 03 	lds	r24, 0x03FB
     526:	98 17       	cp	r25, r24
     528:	a1 f0       	breq	.+40     	; 0x552 <_ZN14SoftwareSerial4readEv+0x42>
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     52a:	e0 91 fa 03 	lds	r30, 0x03FA
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	e4 50       	subi	r30, 0x04	; 4
     532:	fc 4f       	sbci	r31, 0xFC	; 252
     534:	80 81       	ld	r24, Z
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     536:	20 91 fa 03 	lds	r18, 0x03FA
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	2f 5f       	subi	r18, 0xFF	; 255
     53e:	3f 4f       	sbci	r19, 0xFF	; 255
     540:	2f 73       	andi	r18, 0x3F	; 63
     542:	30 70       	andi	r19, 0x00	; 0
     544:	20 93 fa 03 	sts	0x03FA, r18
  return d;
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	08 95       	ret

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
     54c:	8f ef       	ldi	r24, 0xFF	; 255
     54e:	9f ef       	ldi	r25, 0xFF	; 255
     550:	08 95       	ret

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;
     552:	8f ef       	ldi	r24, 0xFF	; 255
     554:	9f ef       	ldi	r25, 0xFF	; 255

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     556:	08 95       	ret

00000558 <_ZN14SoftwareSerial4peekEv>:
  SREG = oldSREG;
}

int SoftwareSerial::peek()
{
  if (!isListening())
     558:	20 91 3c 04 	lds	r18, 0x043C
     55c:	30 91 3d 04 	lds	r19, 0x043D
     560:	28 17       	cp	r18, r24
     562:	39 07       	cpc	r19, r25
     564:	71 f4       	brne	.+28     	; 0x582 <_ZN14SoftwareSerial4peekEv+0x2a>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     566:	90 91 fa 03 	lds	r25, 0x03FA
     56a:	80 91 fb 03 	lds	r24, 0x03FB
     56e:	98 17       	cp	r25, r24
     570:	59 f0       	breq	.+22     	; 0x588 <_ZN14SoftwareSerial4peekEv+0x30>
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     572:	e0 91 fa 03 	lds	r30, 0x03FA
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	e4 50       	subi	r30, 0x04	; 4
     57a:	fc 4f       	sbci	r31, 0xFC	; 252
     57c:	80 81       	ld	r24, Z
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	08 95       	ret
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
     582:	8f ef       	ldi	r24, 0xFF	; 255
     584:	9f ef       	ldi	r25, 0xFF	; 255
     586:	08 95       	ret

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;
     588:	8f ef       	ldi	r24, 0xFF	; 255
     58a:	9f ef       	ldi	r25, 0xFF	; 255

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     58c:	08 95       	ret

0000058e <_ZN14SoftwareSerial5flushEv>:
  return 1;
}

void SoftwareSerial::flush()
{
  if (!isListening())
     58e:	20 91 3c 04 	lds	r18, 0x043C
     592:	30 91 3d 04 	lds	r19, 0x043D
     596:	28 17       	cp	r18, r24
     598:	39 07       	cpc	r19, r25
     59a:	39 f4       	brne	.+14     	; 0x5aa <_ZN14SoftwareSerial5flushEv+0x1c>
    return;

  uint8_t oldSREG = SREG;
     59c:	8f b7       	in	r24, 0x3f	; 63
  cli();
     59e:	f8 94       	cli
  _receive_buffer_head = _receive_buffer_tail = 0;
     5a0:	10 92 fb 03 	sts	0x03FB, r1
     5a4:	10 92 fa 03 	sts	0x03FA, r1
  SREG = oldSREG;
     5a8:	8f bf       	out	0x3f, r24	; 63
     5aa:	08 95       	ret

000005ac <_ZN14SoftwareSerial9availableEv>:
  return d;
}

int SoftwareSerial::available()
{
  if (!isListening())
     5ac:	20 91 3c 04 	lds	r18, 0x043C
     5b0:	30 91 3d 04 	lds	r19, 0x043D
     5b4:	28 17       	cp	r18, r24
     5b6:	39 07       	cpc	r19, r25
     5b8:	71 f4       	brne	.+28     	; 0x5d6 <_ZN14SoftwareSerial9availableEv+0x2a>
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     5ba:	80 91 fb 03 	lds	r24, 0x03FB
     5be:	20 91 fa 03 	lds	r18, 0x03FA
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	80 5c       	subi	r24, 0xC0	; 192
     5c6:	9f 4f       	sbci	r25, 0xFF	; 255
     5c8:	82 1b       	sub	r24, r18
     5ca:	91 09       	sbc	r25, r1
     5cc:	60 e4       	ldi	r22, 0x40	; 64
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	0e 94 c7 11 	call	0x238e	; 0x238e <__divmodhi4>
     5d4:	08 95       	ret
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
     5da:	08 95       	ret

000005dc <_ZN14SoftwareSerial10tunedDelayEj>:
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	2f ef       	ldi	r18, 0xFF	; 255
     5e2:	8f 3f       	cpi	r24, 0xFF	; 255
     5e4:	92 07       	cpc	r25, r18
     5e6:	d9 f7       	brne	.-10     	; 0x5de <_ZN14SoftwareSerial10tunedDelayEj+0x2>
}
     5e8:	08 95       	ret

000005ea <_ZN14SoftwareSerial6listenEv>:

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
     5ea:	fc 01       	movw	r30, r24
  if (active_object != this)
     5ec:	80 91 3c 04 	lds	r24, 0x043C
     5f0:	90 91 3d 04 	lds	r25, 0x043D
     5f4:	8e 17       	cp	r24, r30
     5f6:	9f 07       	cpc	r25, r31
     5f8:	81 f0       	breq	.+32     	; 0x61a <_ZN14SoftwareSerial6listenEv+0x30>
  {
    _buffer_overflow = false;
     5fa:	83 8d       	ldd	r24, Z+27	; 0x1b
     5fc:	8e 7f       	andi	r24, 0xFE	; 254
     5fe:	83 8f       	std	Z+27, r24	; 0x1b
    uint8_t oldSREG = SREG;
     600:	8f b7       	in	r24, 0x3f	; 63
    cli();
     602:	f8 94       	cli
    _receive_buffer_head = _receive_buffer_tail = 0;
     604:	10 92 fb 03 	sts	0x03FB, r1
     608:	10 92 fa 03 	sts	0x03FA, r1
    active_object = this;
     60c:	f0 93 3d 04 	sts	0x043D, r31
     610:	e0 93 3c 04 	sts	0x043C, r30
    SREG = oldSREG;
     614:	8f bf       	out	0x3f, r24	; 63
    return true;
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	08 95       	ret
  }

  return false;
     61a:	80 e0       	ldi	r24, 0x00	; 0
}
     61c:	08 95       	ret

0000061e <_ZN14SoftwareSerial4recvEv>:

//
// The receive routine called by the interrupt handler
//
void SoftwareSerial::recv()
{
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	ec 01       	movw	r28, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     62c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     62e:	ee 85       	ldd	r30, Y+14	; 0x0e
     630:	ff 85       	ldd	r31, Y+15	; 0x0f
     632:	9d 85       	ldd	r25, Y+13	; 0x0d
     634:	81 ff       	sbrs	r24, 1
     636:	04 c0       	rjmp	.+8      	; 0x640 <_ZN14SoftwareSerial4recvEv+0x22>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     638:	80 81       	ld	r24, Z
     63a:	89 23       	and	r24, r25

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     63c:	29 f4       	brne	.+10     	; 0x648 <_ZN14SoftwareSerial4recvEv+0x2a>
     63e:	48 c0       	rjmp	.+144    	; 0x6d0 <_ZN14SoftwareSerial4recvEv+0xb2>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     640:	80 81       	ld	r24, Z
     642:	89 23       	and	r24, r25

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     644:	09 f0       	breq	.+2      	; 0x648 <_ZN14SoftwareSerial4recvEv+0x2a>
     646:	44 c0       	rjmp	.+136    	; 0x6d0 <_ZN14SoftwareSerial4recvEv+0xb2>
  {
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     648:	8b 89       	ldd	r24, Y+19	; 0x13
     64a:	9c 89       	ldd	r25, Y+20	; 0x14
     64c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN14SoftwareSerial10tunedDelayEj>
     650:	28 e0       	ldi	r18, 0x08	; 8
     652:	e2 2e       	mov	r14, r18
     654:	f1 2c       	mov	r15, r1
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
     656:	01 e0       	ldi	r16, 0x01	; 1
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     658:	10 e0       	ldi	r17, 0x00	; 0
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
     65a:	8d 89       	ldd	r24, Y+21	; 0x15
     65c:	9e 89       	ldd	r25, Y+22	; 0x16
     65e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN14SoftwareSerial10tunedDelayEj>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     662:	ee 85       	ldd	r30, Y+14	; 0x0e
     664:	ff 85       	ldd	r31, Y+15	; 0x0f
     666:	80 81       	ld	r24, Z
     668:	9d 85       	ldd	r25, Y+13	; 0x0d
     66a:	89 23       	and	r24, r25
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
      if (rx_pin_read())
     66c:	11 f0       	breq	.+4      	; 0x672 <_ZN14SoftwareSerial4recvEv+0x54>
        d |= i;
     66e:	10 2b       	or	r17, r16
     670:	03 c0       	rjmp	.+6      	; 0x678 <_ZN14SoftwareSerial4recvEv+0x5a>
    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
     672:	80 2f       	mov	r24, r16
     674:	80 95       	com	r24
      if (rx_pin_read())
        d |= i;
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
     676:	18 23       	and	r17, r24
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
     678:	00 0f       	add	r16, r16
     67a:	08 94       	sec
     67c:	e1 08       	sbc	r14, r1
     67e:	f1 08       	sbc	r15, r1
     680:	e1 14       	cp	r14, r1
     682:	f1 04       	cpc	r15, r1
     684:	51 f7       	brne	.-44     	; 0x65a <_ZN14SoftwareSerial4recvEv+0x3c>
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     686:	8f 89       	ldd	r24, Y+23	; 0x17
     688:	98 8d       	ldd	r25, Y+24	; 0x18
     68a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN2, 1);

    if (_inverse_logic)
     68e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     690:	81 fd       	sbrc	r24, 1
      d = ~d;
     692:	10 95       	com	r17

    // if buffer full, set the overflow flag and return
    if ((_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF != _receive_buffer_head) 
     694:	80 91 fb 03 	lds	r24, 0x03FB
     698:	20 91 fa 03 	lds	r18, 0x03FA
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	8f 73       	andi	r24, 0x3F	; 63
     6a2:	90 70       	andi	r25, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	82 17       	cp	r24, r18
     6a8:	93 07       	cpc	r25, r19
     6aa:	79 f0       	breq	.+30     	; 0x6ca <_ZN14SoftwareSerial4recvEv+0xac>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     6ac:	e0 91 fb 03 	lds	r30, 0x03FB
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	e4 50       	subi	r30, 0x04	; 4
     6b4:	fc 4f       	sbci	r31, 0xFC	; 252
     6b6:	10 83       	st	Z, r17
      _receive_buffer_tail = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     6b8:	80 91 fb 03 	lds	r24, 0x03FB
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	8f 73       	andi	r24, 0x3F	; 63
     6c2:	90 70       	andi	r25, 0x00	; 0
     6c4:	80 93 fb 03 	sts	0x03FB, r24
     6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <_ZN14SoftwareSerial4recvEv+0xb2>
    else 
    {
#if _DEBUG // for scope: pulse pin as overflow indictator
      DebugPulse(_DEBUG_PIN1, 1);
#endif
      _buffer_overflow = true;
     6ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6cc:	81 60       	ori	r24, 0x01	; 1
     6ce:	8b 8f       	std	Y+27, r24	; 0x1b
    "pop r20 \n\t"
    "pop r19 \n\t"
    "pop r18 \n\t"
    ::);
#endif
}
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	ff 90       	pop	r15
     6da:	ef 90       	pop	r14
     6dc:	08 95       	ret

000006de <_ZN14SoftwareSerial12tx_pin_writeEh>:

void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
     6de:	fc 01       	movw	r30, r24
     6e0:	a1 89       	ldd	r26, Z+17	; 0x11
     6e2:	b2 89       	ldd	r27, Z+18	; 0x12
     6e4:	90 89       	ldd	r25, Z+16	; 0x10
  if (pin_state == LOW)
     6e6:	66 23       	and	r22, r22
     6e8:	29 f4       	brne	.+10     	; 0x6f4 <_ZN14SoftwareSerial12tx_pin_writeEh+0x16>
    *_transmitPortRegister &= ~_transmitBitMask;
     6ea:	2c 91       	ld	r18, X
     6ec:	89 2f       	mov	r24, r25
     6ee:	80 95       	com	r24
     6f0:	82 23       	and	r24, r18
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <_ZN14SoftwareSerial12tx_pin_writeEh+0x1a>
  else
    *_transmitPortRegister |= _transmitBitMask;
     6f4:	8c 91       	ld	r24, X
     6f6:	89 2b       	or	r24, r25
     6f8:	8c 93       	st	X, r24
     6fa:	08 95       	ret

000006fc <_ZN14SoftwareSerial5writeEh>:

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
     6fc:	df 92       	push	r13
     6fe:	ef 92       	push	r14
     700:	ff 92       	push	r15
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	ec 01       	movw	r28, r24
     70c:	f6 2e       	mov	r15, r22
  if (_tx_delay == 0) {
     70e:	89 8d       	ldd	r24, Y+25	; 0x19
     710:	9a 8d       	ldd	r25, Y+26	; 0x1a
     712:	00 97       	sbiw	r24, 0x00	; 0
     714:	39 f4       	brne	.+14     	; 0x724 <_ZN14SoftwareSerial5writeEh+0x28>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	9b 83       	std	Y+3, r25	; 0x03
     71c:	8a 83       	std	Y+2, r24	; 0x02
    setWriteError();
    return 0;
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	47 c0       	rjmp	.+142    	; 0x7b2 <_ZN14SoftwareSerial5writeEh+0xb6>
  }

  uint8_t oldSREG = SREG;
     724:	ef b6       	in	r14, 0x3f	; 63
  cli();  // turn off interrupts for a clean txmit
     726:	f8 94       	cli

  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
     728:	8b 8d       	ldd	r24, Y+27	; 0x1b
     72a:	61 e0       	ldi	r22, 0x01	; 1
     72c:	81 ff       	sbrs	r24, 1
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	ce 01       	movw	r24, r28
     732:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN14SoftwareSerial12tx_pin_writeEh>
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);
     736:	89 8d       	ldd	r24, Y+25	; 0x19
     738:	9a 8d       	ldd	r25, Y+26	; 0x1a
     73a:	05 96       	adiw	r24, 0x05	; 5
     73c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN14SoftwareSerial10tunedDelayEj>

  // Write each of the 8 bits
  if (_inverse_logic)
     740:	8b 8d       	ldd	r24, Y+27	; 0x1b
     742:	08 e0       	ldi	r16, 0x08	; 8
     744:	10 e0       	ldi	r17, 0x00	; 0
     746:	dd 24       	eor	r13, r13
     748:	d3 94       	inc	r13
     74a:	81 ff       	sbrs	r24, 1
     74c:	15 c0       	rjmp	.+42     	; 0x778 <_ZN14SoftwareSerial5writeEh+0x7c>
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     74e:	8d 2d       	mov	r24, r13
     750:	8f 21       	and	r24, r15
     752:	19 f0       	breq	.+6      	; 0x75a <_ZN14SoftwareSerial5writeEh+0x5e>
        tx_pin_write(LOW); // send 1
     754:	ce 01       	movw	r24, r28
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	02 c0       	rjmp	.+4      	; 0x75e <_ZN14SoftwareSerial5writeEh+0x62>
      else
        tx_pin_write(HIGH); // send 0
     75a:	ce 01       	movw	r24, r28
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN14SoftwareSerial12tx_pin_writeEh>
    
      tunedDelay(_tx_delay);
     762:	89 8d       	ldd	r24, Y+25	; 0x19
     764:	9a 8d       	ldd	r25, Y+26	; 0x1a
     766:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN14SoftwareSerial10tunedDelayEj>
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);

  // Write each of the 8 bits
  if (_inverse_logic)
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     76a:	dd 0c       	add	r13, r13
     76c:	01 50       	subi	r16, 0x01	; 1
     76e:	10 40       	sbci	r17, 0x00	; 0
     770:	71 f7       	brne	.-36     	; 0x74e <_ZN14SoftwareSerial5writeEh+0x52>
        tx_pin_write(HIGH); // send 0
    
      tunedDelay(_tx_delay);
    }

    tx_pin_write(LOW); // restore pin to natural state
     772:	ce 01       	movw	r24, r28
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	14 c0       	rjmp	.+40     	; 0x7a0 <_ZN14SoftwareSerial5writeEh+0xa4>
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     778:	8d 2d       	mov	r24, r13
     77a:	8f 21       	and	r24, r15
     77c:	19 f0       	breq	.+6      	; 0x784 <_ZN14SoftwareSerial5writeEh+0x88>
        tx_pin_write(HIGH); // send 1
     77e:	ce 01       	movw	r24, r28
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	02 c0       	rjmp	.+4      	; 0x788 <_ZN14SoftwareSerial5writeEh+0x8c>
      else
        tx_pin_write(LOW); // send 0
     784:	ce 01       	movw	r24, r28
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN14SoftwareSerial12tx_pin_writeEh>
    
      tunedDelay(_tx_delay);
     78c:	89 8d       	ldd	r24, Y+25	; 0x19
     78e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     790:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN14SoftwareSerial10tunedDelayEj>

    tx_pin_write(LOW); // restore pin to natural state
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     794:	dd 0c       	add	r13, r13
     796:	01 50       	subi	r16, 0x01	; 1
     798:	10 40       	sbci	r17, 0x00	; 0
     79a:	71 f7       	brne	.-36     	; 0x778 <_ZN14SoftwareSerial5writeEh+0x7c>
        tx_pin_write(LOW); // send 0
    
      tunedDelay(_tx_delay);
    }

    tx_pin_write(HIGH); // restore pin to natural state
     79c:	ce 01       	movw	r24, r28
     79e:	61 e0       	ldi	r22, 0x01	; 1
     7a0:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN14SoftwareSerial12tx_pin_writeEh>
  }

  SREG = oldSREG; // turn interrupts back on
     7a4:	ef be       	out	0x3f, r14	; 63
  tunedDelay(_tx_delay);
     7a6:	89 8d       	ldd	r24, Y+25	; 0x19
     7a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7aa:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN14SoftwareSerial10tunedDelayEj>
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	90 e0       	ldi	r25, 0x00	; 0
  
  return 1;
}
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	08 95       	ret

000007c2 <_ZN14SoftwareSerial16handle_interruptEv>:
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     7c2:	80 91 3c 04 	lds	r24, 0x043C
     7c6:	90 91 3d 04 	lds	r25, 0x043D
     7ca:	00 97       	sbiw	r24, 0x00	; 0
     7cc:	11 f0       	breq	.+4      	; 0x7d2 <_ZN14SoftwareSerial16handle_interruptEv+0x10>
  {
    active_object->recv();
     7ce:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN14SoftwareSerial4recvEv>
     7d2:	08 95       	ret

000007d4 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     7d4:	1f 92       	push	r1
     7d6:	0f 92       	push	r0
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	0f 92       	push	r0
     7dc:	11 24       	eor	r1, r1
     7de:	2f 93       	push	r18
     7e0:	3f 93       	push	r19
     7e2:	4f 93       	push	r20
     7e4:	5f 93       	push	r21
     7e6:	6f 93       	push	r22
     7e8:	7f 93       	push	r23
     7ea:	8f 93       	push	r24
     7ec:	9f 93       	push	r25
     7ee:	af 93       	push	r26
     7f0:	bf 93       	push	r27
     7f2:	ef 93       	push	r30
     7f4:	ff 93       	push	r31
  SoftwareSerial::handle_interrupt();
     7f6:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZN14SoftwareSerial16handle_interruptEv>
}
     7fa:	ff 91       	pop	r31
     7fc:	ef 91       	pop	r30
     7fe:	bf 91       	pop	r27
     800:	af 91       	pop	r26
     802:	9f 91       	pop	r25
     804:	8f 91       	pop	r24
     806:	7f 91       	pop	r23
     808:	6f 91       	pop	r22
     80a:	5f 91       	pop	r21
     80c:	4f 91       	pop	r20
     80e:	3f 91       	pop	r19
     810:	2f 91       	pop	r18
     812:	0f 90       	pop	r0
     814:	0f be       	out	0x3f, r0	; 63
     816:	0f 90       	pop	r0
     818:	1f 90       	pop	r1
     81a:	18 95       	reti

0000081c <__vector_4>:
#endif

#if defined(PCINT1_vect)
ISR(PCINT1_vect)
{
     81c:	1f 92       	push	r1
     81e:	0f 92       	push	r0
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	0f 92       	push	r0
     824:	11 24       	eor	r1, r1
     826:	2f 93       	push	r18
     828:	3f 93       	push	r19
     82a:	4f 93       	push	r20
     82c:	5f 93       	push	r21
     82e:	6f 93       	push	r22
     830:	7f 93       	push	r23
     832:	8f 93       	push	r24
     834:	9f 93       	push	r25
     836:	af 93       	push	r26
     838:	bf 93       	push	r27
     83a:	ef 93       	push	r30
     83c:	ff 93       	push	r31
  SoftwareSerial::handle_interrupt();
     83e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZN14SoftwareSerial16handle_interruptEv>
}
     842:	ff 91       	pop	r31
     844:	ef 91       	pop	r30
     846:	bf 91       	pop	r27
     848:	af 91       	pop	r26
     84a:	9f 91       	pop	r25
     84c:	8f 91       	pop	r24
     84e:	7f 91       	pop	r23
     850:	6f 91       	pop	r22
     852:	5f 91       	pop	r21
     854:	4f 91       	pop	r20
     856:	3f 91       	pop	r19
     858:	2f 91       	pop	r18
     85a:	0f 90       	pop	r0
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	0f 90       	pop	r0
     860:	1f 90       	pop	r1
     862:	18 95       	reti

00000864 <__vector_5>:
#endif

#if defined(PCINT2_vect)
ISR(PCINT2_vect)
{
     864:	1f 92       	push	r1
     866:	0f 92       	push	r0
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	0f 92       	push	r0
     86c:	11 24       	eor	r1, r1
     86e:	2f 93       	push	r18
     870:	3f 93       	push	r19
     872:	4f 93       	push	r20
     874:	5f 93       	push	r21
     876:	6f 93       	push	r22
     878:	7f 93       	push	r23
     87a:	8f 93       	push	r24
     87c:	9f 93       	push	r25
     87e:	af 93       	push	r26
     880:	bf 93       	push	r27
     882:	ef 93       	push	r30
     884:	ff 93       	push	r31
  SoftwareSerial::handle_interrupt();
     886:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZN14SoftwareSerial16handle_interruptEv>
}
     88a:	ff 91       	pop	r31
     88c:	ef 91       	pop	r30
     88e:	bf 91       	pop	r27
     890:	af 91       	pop	r26
     892:	9f 91       	pop	r25
     894:	8f 91       	pop	r24
     896:	7f 91       	pop	r23
     898:	6f 91       	pop	r22
     89a:	5f 91       	pop	r21
     89c:	4f 91       	pop	r20
     89e:	3f 91       	pop	r19
     8a0:	2f 91       	pop	r18
     8a2:	0f 90       	pop	r0
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	0f 90       	pop	r0
     8a8:	1f 90       	pop	r1
     8aa:	18 95       	reti

000008ac <_ZN14SoftwareSerial5setTXEh>:
{
  end();
}

void SoftwareSerial::setTX(uint8_t tx)
{
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	ec 01       	movw	r28, r24
     8b4:	16 2f       	mov	r17, r22
  pinMode(tx, OUTPUT);
     8b6:	86 2f       	mov	r24, r22
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <pinMode>
  digitalWrite(tx, HIGH);
     8be:	81 2f       	mov	r24, r17
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <digitalWrite>
  _transmitBitMask = digitalPinToBitMask(tx);
     8c6:	81 2f       	mov	r24, r17
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	fc 01       	movw	r30, r24
     8cc:	e6 5d       	subi	r30, 0xD6	; 214
     8ce:	fe 4f       	sbci	r31, 0xFE	; 254
     8d0:	e4 91       	lpm	r30, Z
     8d2:	e8 8b       	std	Y+16, r30	; 0x10
  uint8_t port = digitalPinToPort(tx);
     8d4:	fc 01       	movw	r30, r24
     8d6:	ea 5e       	subi	r30, 0xEA	; 234
     8d8:	fe 4f       	sbci	r31, 0xFE	; 254
     8da:	e4 91       	lpm	r30, Z
  _transmitPortRegister = portOutputRegister(port);
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	ee 5f       	subi	r30, 0xFE	; 254
     8e4:	fe 4f       	sbci	r31, 0xFE	; 254
     8e6:	85 91       	lpm	r24, Z+
     8e8:	94 91       	lpm	r25, Z
     8ea:	89 8b       	std	Y+17, r24	; 0x11
     8ec:	9a 8b       	std	Y+18, r25	; 0x12
}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	08 95       	ret

000008f6 <_ZN14SoftwareSerial5setRXEh>:

void SoftwareSerial::setRX(uint8_t rx)
{
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	ec 01       	movw	r28, r24
     8fe:	16 2f       	mov	r17, r22
  pinMode(rx, INPUT);
     900:	86 2f       	mov	r24, r22
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <pinMode>
  if (!_inverse_logic)
     908:	8b 8d       	ldd	r24, Y+27	; 0x1b
     90a:	81 fd       	sbrc	r24, 1
     90c:	04 c0       	rjmp	.+8      	; 0x916 <__stack+0x17>
    digitalWrite(rx, HIGH);  // pullup for normal logic!
     90e:	81 2f       	mov	r24, r17
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <digitalWrite>
  _receivePin = rx;
     916:	1c 87       	std	Y+12, r17	; 0x0c
  _receiveBitMask = digitalPinToBitMask(rx);
     918:	81 2f       	mov	r24, r17
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	fc 01       	movw	r30, r24
     91e:	e6 5d       	subi	r30, 0xD6	; 214
     920:	fe 4f       	sbci	r31, 0xFE	; 254
     922:	e4 91       	lpm	r30, Z
     924:	ed 87       	std	Y+13, r30	; 0x0d
  uint8_t port = digitalPinToPort(rx);
     926:	fc 01       	movw	r30, r24
     928:	ea 5e       	subi	r30, 0xEA	; 234
     92a:	fe 4f       	sbci	r31, 0xFE	; 254
     92c:	e4 91       	lpm	r30, Z
  _receivePortRegister = portInputRegister(port);
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	ee 0f       	add	r30, r30
     932:	ff 1f       	adc	r31, r31
     934:	e4 5f       	subi	r30, 0xF4	; 244
     936:	fe 4f       	sbci	r31, 0xFE	; 254
     938:	85 91       	lpm	r24, Z+
     93a:	94 91       	lpm	r25, Z
     93c:	8e 87       	std	Y+14, r24	; 0x0e
     93e:	9f 87       	std	Y+15, r25	; 0x0f
}
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	08 95       	ret

00000948 <_ZN14SoftwareSerialC1Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	ec 01       	movw	r28, r24
     950:	16 2f       	mov	r17, r22
  public:
    Print() : write_error(0) {}
     952:	1b 82       	std	Y+3, r1	; 0x03
     954:	1a 82       	std	Y+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     956:	88 ee       	ldi	r24, 0xE8	; 232
     958:	93 e0       	ldi	r25, 0x03	; 3
     95a:	a0 e0       	ldi	r26, 0x00	; 0
     95c:	b0 e0       	ldi	r27, 0x00	; 0
     95e:	8c 83       	std	Y+4, r24	; 0x04
     960:	9d 83       	std	Y+5, r25	; 0x05
     962:	ae 83       	std	Y+6, r26	; 0x06
     964:	bf 83       	std	Y+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
     966:	8c e7       	ldi	r24, 0x7C	; 124
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	99 83       	std	Y+1, r25	; 0x01
     96c:	88 83       	st	Y, r24
     96e:	1c 8a       	std	Y+20, r1	; 0x14
     970:	1b 8a       	std	Y+19, r1	; 0x13
     972:	1e 8a       	std	Y+22, r1	; 0x16
     974:	1d 8a       	std	Y+21, r1	; 0x15
     976:	18 8e       	std	Y+24, r1	; 0x18
     978:	1f 8a       	std	Y+23, r1	; 0x17
     97a:	1a 8e       	std	Y+26, r1	; 0x1a
     97c:	19 8e       	std	Y+25, r1	; 0x19
     97e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     980:	21 70       	andi	r18, 0x01	; 1
     982:	22 0f       	add	r18, r18
     984:	8c 7f       	andi	r24, 0xFC	; 252
     986:	82 2b       	or	r24, r18
     988:	8b 8f       	std	Y+27, r24	; 0x1b
{
  setTX(transmitPin);
     98a:	ce 01       	movw	r24, r28
     98c:	64 2f       	mov	r22, r20
     98e:	0e 94 56 04 	call	0x8ac	; 0x8ac <_ZN14SoftwareSerial5setTXEh>
  setRX(receivePin);
     992:	ce 01       	movw	r24, r28
     994:	61 2f       	mov	r22, r17
     996:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN14SoftwareSerial5setRXEh>
}
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	1f 91       	pop	r17
     9a0:	08 95       	ret

000009a2 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
     9a2:	cf 92       	push	r12
     9a4:	df 92       	push	r13
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	ec 01       	movw	r28, r24
     9b0:	6a 01       	movw	r12, r20
     9b2:	7b 01       	movw	r14, r22
	
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     9b4:	1a 8e       	std	Y+26, r1	; 0x1a
     9b6:	19 8e       	std	Y+25, r1	; 0x19
     9b8:	18 8e       	std	Y+24, r1	; 0x18
     9ba:	1f 8a       	std	Y+23, r1	; 0x17
     9bc:	1e 8a       	std	Y+22, r1	; 0x16
     9be:	1d 8a       	std	Y+21, r1	; 0x15
     9c0:	1c 8a       	std	Y+20, r1	; 0x14
     9c2:	1b 8a       	std	Y+19, r1	; 0x13
  //_rx_delay_stopbit=1;

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
  {
    long baud = pgm_read_dword(&table[i].baud);
     9c8:	a9 01       	movw	r20, r18
     9ca:	44 0f       	add	r20, r20
     9cc:	55 1f       	adc	r21, r21
     9ce:	42 0f       	add	r20, r18
     9d0:	53 1f       	adc	r21, r19
     9d2:	44 0f       	add	r20, r20
     9d4:	55 1f       	adc	r21, r21
     9d6:	44 0f       	add	r20, r20
     9d8:	55 1f       	adc	r21, r21
     9da:	fa 01       	movw	r30, r20
     9dc:	e8 59       	subi	r30, 0x98	; 152
     9de:	ff 4f       	sbci	r31, 0xFF	; 255
     9e0:	85 91       	lpm	r24, Z+
     9e2:	95 91       	lpm	r25, Z+
     9e4:	a5 91       	lpm	r26, Z+
     9e6:	b4 91       	lpm	r27, Z
    if (baud == speed)
     9e8:	8c 15       	cp	r24, r12
     9ea:	9d 05       	cpc	r25, r13
     9ec:	ae 05       	cpc	r26, r14
     9ee:	bf 05       	cpc	r27, r15
     9f0:	e9 f4       	brne	.+58     	; 0xa2c <_ZN14SoftwareSerial5beginEl+0x8a>
    {
      _rx_delay_centering = pgm_read_word(&table[i].rx_delay_centering);
     9f2:	fa 01       	movw	r30, r20
     9f4:	e4 59       	subi	r30, 0x94	; 148
     9f6:	ff 4f       	sbci	r31, 0xFF	; 255
     9f8:	85 91       	lpm	r24, Z+
     9fa:	94 91       	lpm	r25, Z
     9fc:	8b 8b       	std	Y+19, r24	; 0x13
     9fe:	9c 8b       	std	Y+20, r25	; 0x14
      _rx_delay_intrabit = pgm_read_word(&table[i].rx_delay_intrabit);
     a00:	fa 01       	movw	r30, r20
     a02:	e2 59       	subi	r30, 0x92	; 146
     a04:	ff 4f       	sbci	r31, 0xFF	; 255
     a06:	85 91       	lpm	r24, Z+
     a08:	94 91       	lpm	r25, Z
     a0a:	8d 8b       	std	Y+21, r24	; 0x15
     a0c:	9e 8b       	std	Y+22, r25	; 0x16
      _rx_delay_stopbit = pgm_read_word(&table[i].rx_delay_stopbit);
     a0e:	fa 01       	movw	r30, r20
     a10:	e0 59       	subi	r30, 0x90	; 144
     a12:	ff 4f       	sbci	r31, 0xFF	; 255
     a14:	85 91       	lpm	r24, Z+
     a16:	94 91       	lpm	r25, Z
     a18:	8f 8b       	std	Y+23, r24	; 0x17
     a1a:	98 8f       	std	Y+24, r25	; 0x18
      _tx_delay = pgm_read_word(&table[i].tx_delay);
     a1c:	4e 58       	subi	r20, 0x8E	; 142
     a1e:	5f 4f       	sbci	r21, 0xFF	; 255
     a20:	fa 01       	movw	r30, r20
     a22:	85 91       	lpm	r24, Z+
     a24:	94 91       	lpm	r25, Z
     a26:	89 8f       	std	Y+25, r24	; 0x19
     a28:	9a 8f       	std	Y+26, r25	; 0x1a
      break;
     a2a:	06 c0       	rjmp	.+12     	; 0xa38 <_ZN14SoftwareSerial5beginEl+0x96>
{
	
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
  //_rx_delay_stopbit=1;

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
     a2c:	2f 5f       	subi	r18, 0xFF	; 255
     a2e:	3f 4f       	sbci	r19, 0xFF	; 255
     a30:	2c 30       	cpi	r18, 0x0C	; 12
     a32:	31 05       	cpc	r19, r1
     a34:	09 f0       	breq	.+2      	; 0xa38 <_ZN14SoftwareSerial5beginEl+0x96>
     a36:	c8 cf       	rjmp	.-112    	; 0x9c8 <_ZN14SoftwareSerial5beginEl+0x26>
      break;
    }
  }

  // Set up RX interrupts, but only if we have a valid RX baud rate
  if (_rx_delay_stopbit)
     a38:	8f 89       	ldd	r24, Y+23	; 0x17
     a3a:	98 8d       	ldd	r25, Y+24	; 0x18
     a3c:	00 97       	sbiw	r24, 0x00	; 0
     a3e:	09 f4       	brne	.+2      	; 0xa42 <_ZN14SoftwareSerial5beginEl+0xa0>
     a40:	48 c0       	rjmp	.+144    	; 0xad2 <_ZN14SoftwareSerial5beginEl+0x130>
  {
    if (digitalPinToPCICR(_receivePin))
     a42:	9c 85       	ldd	r25, Y+12	; 0x0c
     a44:	96 31       	cpi	r25, 0x16	; 22
     a46:	08 f0       	brcs	.+2      	; 0xa4a <_ZN14SoftwareSerial5beginEl+0xa8>
     a48:	40 c0       	rjmp	.+128    	; 0xaca <_ZN14SoftwareSerial5beginEl+0x128>
    {
      *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     a4a:	20 91 68 00 	lds	r18, 0x0068
     a4e:	98 30       	cpi	r25, 0x08	; 8
     a50:	20 f0       	brcs	.+8      	; 0xa5a <_ZN14SoftwareSerial5beginEl+0xb8>
     a52:	9e 30       	cpi	r25, 0x0E	; 14
     a54:	20 f0       	brcs	.+8      	; 0xa5e <_ZN14SoftwareSerial5beginEl+0xbc>
     a56:	82 e0       	ldi	r24, 0x02	; 2
     a58:	03 c0       	rjmp	.+6      	; 0xa60 <_ZN14SoftwareSerial5beginEl+0xbe>
     a5a:	84 e0       	ldi	r24, 0x04	; 4
     a5c:	01 c0       	rjmp	.+2      	; 0xa60 <_ZN14SoftwareSerial5beginEl+0xbe>
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	82 2b       	or	r24, r18
     a62:	80 93 68 00 	sts	0x0068, r24
      *digitalPinToPCMSK(_receivePin) |= _BV(digitalPinToPCMSKbit(_receivePin));
     a66:	5c 85       	ldd	r21, Y+12	; 0x0c
     a68:	58 30       	cpi	r21, 0x08	; 8
     a6a:	48 f0       	brcs	.+18     	; 0xa7e <_ZN14SoftwareSerial5beginEl+0xdc>
     a6c:	5e 30       	cpi	r21, 0x0E	; 14
     a6e:	60 f0       	brcs	.+24     	; 0xa88 <_ZN14SoftwareSerial5beginEl+0xe6>
     a70:	56 31       	cpi	r21, 0x16	; 22
     a72:	c8 f1       	brcs	.+114    	; 0xae6 <_ZN14SoftwareSerial5beginEl+0x144>
     a74:	e0 e0       	ldi	r30, 0x00	; 0
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	09 c0       	rjmp	.+18     	; 0xa90 <_ZN14SoftwareSerial5beginEl+0xee>
     a7e:	ed e6       	ldi	r30, 0x6D	; 109
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	ad e6       	ldi	r26, 0x6D	; 109
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <_ZN14SoftwareSerial5beginEl+0xee>
     a88:	eb e6       	ldi	r30, 0x6B	; 107
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	ab e6       	ldi	r26, 0x6B	; 107
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	4c 91       	ld	r20, X
     a92:	58 30       	cpi	r21, 0x08	; 8
     a94:	40 f4       	brcc	.+16     	; 0xaa6 <_ZN14SoftwareSerial5beginEl+0x104>
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <_ZN14SoftwareSerial5beginEl+0xfe>
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	5a 95       	dec	r21
     aa2:	e2 f7       	brpl	.-8      	; 0xa9c <_ZN14SoftwareSerial5beginEl+0xfa>
     aa4:	10 c0       	rjmp	.+32     	; 0xac6 <_ZN14SoftwareSerial5beginEl+0x124>
     aa6:	25 2f       	mov	r18, r21
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	5e 30       	cpi	r21, 0x0E	; 14
     aac:	18 f4       	brcc	.+6      	; 0xab4 <_ZN14SoftwareSerial5beginEl+0x112>
     aae:	28 50       	subi	r18, 0x08	; 8
     ab0:	30 40       	sbci	r19, 0x00	; 0
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <_ZN14SoftwareSerial5beginEl+0x116>
     ab4:	2e 50       	subi	r18, 0x0E	; 14
     ab6:	30 40       	sbci	r19, 0x00	; 0
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <_ZN14SoftwareSerial5beginEl+0x120>
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	2a 95       	dec	r18
     ac4:	e2 f7       	brpl	.-8      	; 0xabe <_ZN14SoftwareSerial5beginEl+0x11c>
     ac6:	84 2b       	or	r24, r20
     ac8:	80 83       	st	Z, r24
    }
    tunedDelay(_tx_delay); // if we were low this establishes the end
     aca:	89 8d       	ldd	r24, Y+25	; 0x19
     acc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ace:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN14SoftwareSerial10tunedDelayEj>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     ad2:	ce 01       	movw	r24, r28
     ad4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN14SoftwareSerial6listenEv>
}
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	df 90       	pop	r13
     ae2:	cf 90       	pop	r12
     ae4:	08 95       	ret
  if (_rx_delay_stopbit)
  {
    if (digitalPinToPCICR(_receivePin))
    {
      *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
      *digitalPinToPCMSK(_receivePin) |= _BV(digitalPinToPCMSKbit(_receivePin));
     ae6:	ec e6       	ldi	r30, 0x6C	; 108
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	ac e6       	ldi	r26, 0x6C	; 108
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	d0 cf       	rjmp	.-96     	; 0xa90 <_ZN14SoftwareSerial5beginEl+0xee>

00000af0 <_ZN14SoftwareSerial3endEv>:
  listen();
}

void SoftwareSerial::end()
{
  if (digitalPinToPCMSK(_receivePin))
     af0:	fc 01       	movw	r30, r24
     af2:	44 85       	ldd	r20, Z+12	; 0x0c
     af4:	46 31       	cpi	r20, 0x16	; 22
     af6:	50 f5       	brcc	.+84     	; 0xb4c <_ZN14SoftwareSerial3endEv+0x5c>
    *digitalPinToPCMSK(_receivePin) &= ~_BV(digitalPinToPCMSKbit(_receivePin));
     af8:	48 30       	cpi	r20, 0x08	; 8
     afa:	28 f0       	brcs	.+10     	; 0xb06 <_ZN14SoftwareSerial3endEv+0x16>
     afc:	4e 30       	cpi	r20, 0x0E	; 14
     afe:	30 f0       	brcs	.+12     	; 0xb0c <_ZN14SoftwareSerial3endEv+0x1c>
     b00:	ec e6       	ldi	r30, 0x6C	; 108
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	05 c0       	rjmp	.+10     	; 0xb10 <_ZN14SoftwareSerial3endEv+0x20>
     b06:	ed e6       	ldi	r30, 0x6D	; 109
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <_ZN14SoftwareSerial3endEv+0x20>
     b0c:	eb e6       	ldi	r30, 0x6B	; 107
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	50 81       	ld	r21, Z
     b12:	48 30       	cpi	r20, 0x08	; 8
     b14:	40 f4       	brcc	.+16     	; 0xb26 <_ZN14SoftwareSerial3endEv+0x36>
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	02 c0       	rjmp	.+4      	; 0xb20 <_ZN14SoftwareSerial3endEv+0x30>
     b1c:	88 0f       	add	r24, r24
     b1e:	99 1f       	adc	r25, r25
     b20:	4a 95       	dec	r20
     b22:	e2 f7       	brpl	.-8      	; 0xb1c <_ZN14SoftwareSerial3endEv+0x2c>
     b24:	10 c0       	rjmp	.+32     	; 0xb46 <_ZN14SoftwareSerial3endEv+0x56>
     b26:	24 2f       	mov	r18, r20
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	4e 30       	cpi	r20, 0x0E	; 14
     b2c:	18 f4       	brcc	.+6      	; 0xb34 <_ZN14SoftwareSerial3endEv+0x44>
     b2e:	28 50       	subi	r18, 0x08	; 8
     b30:	30 40       	sbci	r19, 0x00	; 0
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <_ZN14SoftwareSerial3endEv+0x48>
     b34:	2e 50       	subi	r18, 0x0E	; 14
     b36:	30 40       	sbci	r19, 0x00	; 0
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	02 c0       	rjmp	.+4      	; 0xb42 <_ZN14SoftwareSerial3endEv+0x52>
     b3e:	88 0f       	add	r24, r24
     b40:	99 1f       	adc	r25, r25
     b42:	2a 95       	dec	r18
     b44:	e2 f7       	brpl	.-8      	; 0xb3e <_ZN14SoftwareSerial3endEv+0x4e>
     b46:	80 95       	com	r24
     b48:	85 23       	and	r24, r21
     b4a:	80 83       	st	Z, r24
     b4c:	08 95       	ret

00000b4e <_ZN14SoftwareSerialD1Ev>:
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
     b4e:	2c e7       	ldi	r18, 0x7C	; 124
     b50:	31 e0       	ldi	r19, 0x01	; 1
     b52:	fc 01       	movw	r30, r24
     b54:	31 83       	std	Z+1, r19	; 0x01
     b56:	20 83       	st	Z, r18
{
  end();
     b58:	0e 94 78 05 	call	0xaf0	; 0xaf0 <_ZN14SoftwareSerial3endEv>
}
     b5c:	08 95       	ret

00000b5e <_ZN9URMSerialC1Ev>:
#include "URMSerial.h"
#include <HardwareSerial.h>

URMSerial::URMSerial(void)
{
	servoAngle=0;
     b5e:	fc 01       	movw	r30, r24
     b60:	16 82       	std	Z+6, r1	; 0x06
}
     b62:	08 95       	ret

00000b64 <_ZN9URMSerial10hasReadingEv>:
// See whether the serial port has sufficient data for a 'reading'
bool URMSerial::hasReading(void)
{
	// We require at least 3 bytes before it can be considered a valid reading

	return (serial->available()>3);
     b64:	dc 01       	movw	r26, r24
     b66:	14 96       	adiw	r26, 0x04	; 4
     b68:	8d 91       	ld	r24, X+
     b6a:	9c 91       	ld	r25, X
     b6c:	15 97       	sbiw	r26, 0x05	; 5
     b6e:	dc 01       	movw	r26, r24
     b70:	ed 91       	ld	r30, X+
     b72:	fc 91       	ld	r31, X
     b74:	04 80       	ldd	r0, Z+4	; 0x04
     b76:	f5 81       	ldd	r31, Z+5	; 0x05
     b78:	e0 2d       	mov	r30, r0
     b7a:	09 95       	icall
     b7c:	21 e0       	ldi	r18, 0x01	; 1
     b7e:	84 30       	cpi	r24, 0x04	; 4
     b80:	91 05       	cpc	r25, r1
     b82:	0c f4       	brge	.+2      	; 0xb86 <_ZN9URMSerial10hasReadingEv+0x22>
     b84:	20 e0       	ldi	r18, 0x00	; 0
}
     b86:	82 2f       	mov	r24, r18
     b88:	08 95       	ret

00000b8a <_ZN9URMSerial3endEv>:

void URMSerial::end(void){
	serial->end();
     b8a:	fc 01       	movw	r30, r24
     b8c:	84 81       	ldd	r24, Z+4	; 0x04
     b8e:	95 81       	ldd	r25, Z+5	; 0x05
     b90:	0e 94 78 05 	call	0xaf0	; 0xaf0 <_ZN14SoftwareSerial3endEv>
}
     b94:	08 95       	ret

00000b96 <_ZN9URMSerial10readSerialEv>:

// Read in serial data (max four bytes)
void URMSerial::readSerial(void)
{
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	8c 01       	movw	r16, r24
    for(int i=0;i<4;i++) serialData[i] = serial->read();
     ba0:	c0 e0       	ldi	r28, 0x00	; 0
     ba2:	d0 e0       	ldi	r29, 0x00	; 0
     ba4:	d8 01       	movw	r26, r16
     ba6:	14 96       	adiw	r26, 0x04	; 4
     ba8:	8d 91       	ld	r24, X+
     baa:	9c 91       	ld	r25, X
     bac:	15 97       	sbiw	r26, 0x05	; 5
     bae:	dc 01       	movw	r26, r24
     bb0:	ed 91       	ld	r30, X+
     bb2:	fc 91       	ld	r31, X
     bb4:	06 80       	ldd	r0, Z+6	; 0x06
     bb6:	f7 81       	ldd	r31, Z+7	; 0x07
     bb8:	e0 2d       	mov	r30, r0
     bba:	09 95       	icall
void URMSerial::end(void){
	serial->end();
}

// Read in serial data (max four bytes)
void URMSerial::readSerial(void)
     bbc:	f8 01       	movw	r30, r16
     bbe:	ec 0f       	add	r30, r28
     bc0:	fd 1f       	adc	r31, r29
{
    for(int i=0;i<4;i++) serialData[i] = serial->read();
     bc2:	83 87       	std	Z+11, r24	; 0x0b
     bc4:	21 96       	adiw	r28, 0x01	; 1
     bc6:	c4 30       	cpi	r28, 0x04	; 4
     bc8:	d1 05       	cpc	r29, r1
     bca:	61 f7       	brne	.-40     	; 0xba4 <_ZN9URMSerial10readSerialEv+0xe>
}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	08 95       	ret

00000bd6 <_ZN9URMSerial15processDistanceERi>:
{
    return((serialData[HighByte] & serialData[LowByte])==255); // If the High and Low byte are both 255: error
}

byte URMSerial::processDistance(int& value)
{
     bd6:	fc 01       	movw	r30, r24
    distanceRequested = false;
     bd8:	11 86       	std	Z+9, r1	; 0x09


// Process the 4 byte serial data and see whether the device reported an error (happens occationally)
bool URMSerial::hasError()
{
    return((serialData[HighByte] & serialData[LowByte])==255); // If the High and Low byte are both 255: error
     bda:	84 85       	ldd	r24, Z+12	; 0x0c
     bdc:	25 85       	ldd	r18, Z+13	; 0x0d
     bde:	92 2f       	mov	r25, r18
     be0:	98 23       	and	r25, r24
byte URMSerial::processDistance(int& value)
{
    distanceRequested = false;

	// If the serial data returned an error, quit
	if(hasError()) return ERROR;
     be2:	9f 3f       	cpi	r25, 0xFF	; 255
     be4:	59 f0       	breq	.+22     	; 0xbfc <_ZN9URMSerial15processDistanceERi+0x26>

    // 1x16bit value wrapped over two bytes
    // HighByte must be multiplied by 255 to represent the correct byte
    // Both are added together to calculate the value in Centimeters (I believe)
    value = serialData[HighByte]*255+serialData[LowByte];
     be6:	9f ef       	ldi	r25, 0xFF	; 255
     be8:	89 9f       	mul	r24, r25
     bea:	c0 01       	movw	r24, r0
     bec:	11 24       	eor	r1, r1
     bee:	82 0f       	add	r24, r18
     bf0:	91 1d       	adc	r25, r1
     bf2:	fb 01       	movw	r30, r22
     bf4:	91 83       	std	Z+1, r25	; 0x01
     bf6:	80 83       	st	Z, r24

	return DISTANCE;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	08 95       	ret
byte URMSerial::processDistance(int& value)
{
    distanceRequested = false;

	// If the serial data returned an error, quit
	if(hasError()) return ERROR;
     bfc:	83 e0       	ldi	r24, 0x03	; 3
    // HighByte must be multiplied by 255 to represent the correct byte
    // Both are added together to calculate the value in Centimeters (I believe)
    value = serialData[HighByte]*255+serialData[LowByte];

	return DISTANCE;
}
     bfe:	08 95       	ret

00000c00 <_ZN9URMSerial18processTemperatureERi>:

byte URMSerial::processTemperature(int& value)
{
     c00:	fc 01       	movw	r30, r24
     c02:	db 01       	movw	r26, r22
    temperatureRequested = false;
     c04:	12 86       	std	Z+10, r1	; 0x0a


// Process the 4 byte serial data and see whether the device reported an error (happens occationally)
bool URMSerial::hasError()
{
    return((serialData[HighByte] & serialData[LowByte])==255); // If the High and Low byte are both 255: error
     c06:	85 85       	ldd	r24, Z+13	; 0x0d
     c08:	94 85       	ldd	r25, Z+12	; 0x0c
     c0a:	98 23       	and	r25, r24
byte URMSerial::processTemperature(int& value)
{
    temperatureRequested = false;

	// If the serial data returned an error, quit
	if(hasError()) return ERROR;
     c0c:	9f 3f       	cpi	r25, 0xFF	; 255
     c0e:	61 f0       	breq	.+24     	; 0xc28 <_ZN9URMSerial18processTemperatureERi+0x28>

    // If 0, the value is the same regardless
    if(serialData[LowByte]==0)
     c10:	88 23       	and	r24, r24
     c12:	21 f4       	brne	.+8      	; 0xc1c <_ZN9URMSerial18processTemperatureERi+0x1c>
    {
        value = 0;
     c14:	11 96       	adiw	r26, 0x01	; 1
     c16:	1c 92       	st	X, r1
     c18:	1e 92       	st	-X, r1
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <_ZN9URMSerial18processTemperatureERi+0x24>
		// Below 0
		if(serialData[HighByte]==0x255)
		{
			value = -serialData[LowByte];
		}else{ // above zero
			value = serialData[LowByte]; // Consider below zero 1111
     c1c:	8c 93       	st	X, r24
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 92       	st	X, r1
     c22:	11 97       	sbiw	r26, 0x01	; 1
		}
	}

	return TEMPERATURE;
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	08 95       	ret
byte URMSerial::processTemperature(int& value)
{
    temperatureRequested = false;

	// If the serial data returned an error, quit
	if(hasError()) return ERROR;
     c28:	83 e0       	ldi	r24, 0x03	; 3
		}
	}

	return TEMPERATURE;
    //value = value >> 1; // Note: Bad practise, decimal value truncated
}
     c2a:	08 95       	ret

00000c2c <_ZN9URMSerial10reqTimeoutEv>:

// Has the current request timed out?
bool URMSerial::reqTimeout()
{
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	ec 01       	movw	r28, r24
    if(temperatureRequested || distanceRequested)
     c32:	8a 85       	ldd	r24, Y+10	; 0x0a
     c34:	88 23       	and	r24, r24
     c36:	19 f4       	brne	.+6      	; 0xc3e <_ZN9URMSerial10reqTimeoutEv+0x12>
     c38:	89 85       	ldd	r24, Y+9	; 0x09
     c3a:	88 23       	and	r24, r24
     c3c:	91 f0       	breq	.+36     	; 0xc62 <_ZN9URMSerial10reqTimeoutEv+0x36>
    {
        int tDelta = millis() - timeRequested;
     c3e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <millis>
     c42:	ab 01       	movw	r20, r22
     c44:	bc 01       	movw	r22, r24
     c46:	88 81       	ld	r24, Y
     c48:	99 81       	ldd	r25, Y+1	; 0x01
     c4a:	48 1b       	sub	r20, r24
     c4c:	59 0b       	sbc	r21, r25
        // If we've waited to long
        if(tDelta>timeout || tDelta < 0) // If the delta is greater than our timeout or if it has wrapped around
     c4e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	84 17       	cp	r24, r20
     c54:	95 07       	cpc	r25, r21
     c56:	2c f0       	brlt	.+10     	; 0xc62 <_ZN9URMSerial10reqTimeoutEv+0x36>
	return TEMPERATURE;
    //value = value >> 1; // Note: Bad practise, decimal value truncated
}

// Has the current request timed out?
bool URMSerial::reqTimeout()
     c58:	85 2f       	mov	r24, r21
     c5a:	88 1f       	adc	r24, r24
     c5c:	88 27       	eor	r24, r24
     c5e:	88 1f       	adc	r24, r24
     c60:	01 c0       	rjmp	.+2      	; 0xc64 <_ZN9URMSerial10reqTimeoutEv+0x38>
        int tDelta = millis() - timeRequested;
        // If we've waited to long
        if(tDelta>timeout || tDelta < 0) // If the delta is greater than our timeout or if it has wrapped around
        {
			
            return true;
     c62:	81 e0       	ldi	r24, 0x01	; 1
    }else{
	
        // No pending requests
        return true; // Return true anyway
    }
}
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	08 95       	ret

00000c6a <_ZN9URMSerial14getMeasurementERi>:
    for(int i=0;i<4;i++) serialData[i] = serial->read();
}

// Recieve distance from URM device
byte URMSerial::getMeasurement(int& value)
{
     c6a:	0f 93       	push	r16
     c6c:	1f 93       	push	r17
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	ec 01       	movw	r28, r24
     c74:	8b 01       	movw	r16, r22
  if(!hasReading()) return NOTREADY;
     c76:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZN9URMSerial10hasReadingEv>
     c7a:	88 23       	and	r24, r24
     c7c:	f1 f0       	breq	.+60     	; 0xcba <_ZN9URMSerial14getMeasurementERi+0x50>
  
  if(reqTimeout()) return TIMEOUT;
     c7e:	ce 01       	movw	r24, r28
     c80:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN9URMSerial10reqTimeoutEv>
     c84:	88 23       	and	r24, r24
     c86:	d9 f4       	brne	.+54     	; 0xcbe <_ZN9URMSerial14getMeasurementERi+0x54>
  
	// Read in data
	readSerial();
     c88:	ce 01       	movw	r24, r28
     c8a:	0e 94 cb 05 	call	0xb96	; 0xb96 <_ZN9URMSerial10readSerialEv>

    // Validate the reading type
    switch(serialData[Header]) // Three types of command responses. 0x11 is a temperature, 0x22 Distance, 0x33 EEPROM
     c8e:	8b 85       	ldd	r24, Y+11	; 0x0b
     c90:	81 31       	cpi	r24, 0x11	; 17
     c92:	39 f0       	breq	.+14     	; 0xca2 <_ZN9URMSerial14getMeasurementERi+0x38>
     c94:	82 32       	cpi	r24, 0x22	; 34
     c96:	51 f4       	brne	.+20     	; 0xcac <_ZN9URMSerial14getMeasurementERi+0x42>
    {
     case COMMAND_DISTANCE:
        return processDistance(value);
     c98:	ce 01       	movw	r24, r28
     c9a:	b8 01       	movw	r22, r16
     c9c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_ZN9URMSerial15processDistanceERi>
     ca0:	0f c0       	rjmp	.+30     	; 0xcc0 <_ZN9URMSerial14getMeasurementERi+0x56>

     break;
     case COMMAND_TEMP:
        return processTemperature(value);
     ca2:	ce 01       	movw	r24, r28
     ca4:	b8 01       	movw	r22, r16
     ca6:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZN9URMSerial18processTemperatureERi>
     caa:	0a c0       	rjmp	.+20     	; 0xcc0 <_ZN9URMSerial14getMeasurementERi+0x56>
     break;
    }

    // Strange return result!
	distanceRequested = temperatureRequested = false; // This is a bug fix. If an error was returned (conrrupt byte array), reset distance measurements so we can re-request
     cac:	1a 86       	std	Y+10, r1	; 0x0a
     cae:	19 86       	std	Y+9, r1	; 0x09
    value = 0;
     cb0:	f8 01       	movw	r30, r16
     cb2:	11 82       	std	Z+1, r1	; 0x01
     cb4:	10 82       	st	Z, r1
    return ERROR;
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	03 c0       	rjmp	.+6      	; 0xcc0 <_ZN9URMSerial14getMeasurementERi+0x56>
}

// Recieve distance from URM device
byte URMSerial::getMeasurement(int& value)
{
  if(!hasReading()) return NOTREADY;
     cba:	84 e0       	ldi	r24, 0x04	; 4
     cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <_ZN9URMSerial14getMeasurementERi+0x56>
  
  if(reqTimeout()) return TIMEOUT;
     cbe:	85 e0       	ldi	r24, 0x05	; 5

    // Strange return result!
	distanceRequested = temperatureRequested = false; // This is a bug fix. If an error was returned (conrrupt byte array), reset distance measurements so we can re-request
    value = 0;
    return ERROR;
}
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	08 95       	ret

00000cca <_ZN9URMSerial11sendCommandEPh>:
    return getMeasurement(value);

}

void URMSerial::sendCommand(byte* pCommand)
{
     cca:	af 92       	push	r10
     ccc:	bf 92       	push	r11
     cce:	cf 92       	push	r12
     cd0:	df 92       	push	r13
     cd2:	ef 92       	push	r14
     cd4:	ff 92       	push	r15
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	6c 01       	movw	r12, r24
	byte sum = 0;
     cde:	8b 01       	movw	r16, r22
    // Send command
    for(int i=0;i<3;i++)
     ce0:	ee 24       	eor	r14, r14
     ce2:	ff 24       	eor	r15, r15

}

void URMSerial::sendCommand(byte* pCommand)
{
	byte sum = 0;
     ce4:	c0 e0       	ldi	r28, 0x00	; 0
    // Send command
    for(int i=0;i<3;i++)
	{
		serial->write(pCommand[i]);
     ce6:	d6 01       	movw	r26, r12
     ce8:	14 96       	adiw	r26, 0x04	; 4
     cea:	8d 91       	ld	r24, X+
     cec:	9c 91       	ld	r25, X
     cee:	15 97       	sbiw	r26, 0x05	; 5
    // Pass control to getMeasurement which will return the requested measurement
    return getMeasurement(value);

}

void URMSerial::sendCommand(byte* pCommand)
     cf0:	58 01       	movw	r10, r16
{
	byte sum = 0;
    // Send command
    for(int i=0;i<3;i++)
	{
		serial->write(pCommand[i]);
     cf2:	dc 01       	movw	r26, r24
     cf4:	ed 91       	ld	r30, X+
     cf6:	fc 91       	ld	r31, X
     cf8:	01 90       	ld	r0, Z+
     cfa:	f0 81       	ld	r31, Z
     cfc:	e0 2d       	mov	r30, r0
     cfe:	d8 01       	movw	r26, r16
     d00:	6d 91       	ld	r22, X+
     d02:	8d 01       	movw	r16, r26
     d04:	09 95       	icall
		sum += pCommand[i];
     d06:	f5 01       	movw	r30, r10
     d08:	80 81       	ld	r24, Z
     d0a:	c8 0f       	add	r28, r24

void URMSerial::sendCommand(byte* pCommand)
{
	byte sum = 0;
    // Send command
    for(int i=0;i<3;i++)
     d0c:	08 94       	sec
     d0e:	e1 1c       	adc	r14, r1
     d10:	f1 1c       	adc	r15, r1
     d12:	f3 e0       	ldi	r31, 0x03	; 3
     d14:	ef 16       	cp	r14, r31
     d16:	f1 04       	cpc	r15, r1
     d18:	31 f7       	brne	.-52     	; 0xce6 <_ZN9URMSerial11sendCommandEPh+0x1c>
	{
		serial->write(pCommand[i]);
		sum += pCommand[i];
	}
	serial->write(sum);
     d1a:	d6 01       	movw	r26, r12
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	8d 91       	ld	r24, X+
     d20:	9c 91       	ld	r25, X
     d22:	15 97       	sbiw	r26, 0x05	; 5
     d24:	dc 01       	movw	r26, r24
     d26:	ed 91       	ld	r30, X+
     d28:	fc 91       	ld	r31, X
     d2a:	01 90       	ld	r0, Z+
     d2c:	f0 81       	ld	r31, Z
     d2e:	e0 2d       	mov	r30, r0
     d30:	6c 2f       	mov	r22, r28
     d32:	09 95       	icall
	
}
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	cf 90       	pop	r12
     d42:	bf 90       	pop	r11
     d44:	af 90       	pop	r10
     d46:	08 95       	ret

00000d48 <_ZN9URMSerial18requestMeasurementEh>:
    }
}

// send the temperature request to the serial port [*note, no delay]
bool URMSerial::requestMeasurement(byte mType)
{
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	00 d0       	rcall	.+0      	; 0xd54 <_ZN9URMSerial18requestMeasurementEh+0xc>
     d54:	0f 92       	push	r0
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	8c 01       	movw	r16, r24
     d5c:	f6 2e       	mov	r15, r22
    //if(!reqTimeout()) return false;

    timeRequested = millis(); // store request time
     d5e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <millis>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	f8 01       	movw	r30, r16
     d68:	80 83       	st	Z, r24
     d6a:	91 83       	std	Z+1, r25	; 0x01
     d6c:	a2 83       	std	Z+2, r26	; 0x02
     d6e:	b3 83       	std	Z+3, r27	; 0x03

	byte ttlCOMMAND[3] = {0,0,0};
     d70:	1a 82       	std	Y+2, r1	; 0x02
     d72:	1b 82       	std	Y+3, r1	; 0x03
    // Select appropriate memory addresses
    switch(mType)
     d74:	f1 e0       	ldi	r31, 0x01	; 1
     d76:	ff 16       	cp	r15, r31
     d78:	79 f0       	breq	.+30     	; 0xd98 <_ZN9URMSerial18requestMeasurementEh+0x50>
     d7a:	82 e0       	ldi	r24, 0x02	; 2
     d7c:	f8 16       	cp	r15, r24
     d7e:	d9 f4       	brne	.+54     	; 0xdb6 <_ZN9URMSerial18requestMeasurementEh+0x6e>
    {
         case TEMPERATURE:
			ttlCOMMAND[Header] = COMMAND_TEMP;
     d80:	81 e1       	ldi	r24, 0x11	; 17
     d82:	89 83       	std	Y+1, r24	; 0x01
            sendCommand(ttlCOMMAND);
     d84:	c8 01       	movw	r24, r16
     d86:	be 01       	movw	r22, r28
     d88:	6f 5f       	subi	r22, 0xFF	; 255
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
     d8c:	0e 94 65 06 	call	0xcca	; 0xcca <_ZN9URMSerial11sendCommandEPh>
            temperatureRequested = true;
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	f8 01       	movw	r30, r16
     d94:	82 87       	std	Z+10, r24	; 0x0a
            return true;
     d96:	10 c0       	rjmp	.+32     	; 0xdb8 <_ZN9URMSerial18requestMeasurementEh+0x70>
         break;
         case DISTANCE:
			ttlCOMMAND[Header] = COMMAND_DISTANCE;
     d98:	82 e2       	ldi	r24, 0x22	; 34
     d9a:	89 83       	std	Y+1, r24	; 0x01
			ttlCOMMAND[HighByte] = servoAngle;
     d9c:	f8 01       	movw	r30, r16
     d9e:	86 81       	ldd	r24, Z+6	; 0x06
     da0:	8a 83       	std	Y+2, r24	; 0x02
			
            sendCommand(ttlCOMMAND);
     da2:	c8 01       	movw	r24, r16
     da4:	be 01       	movw	r22, r28
     da6:	6f 5f       	subi	r22, 0xFF	; 255
     da8:	7f 4f       	sbci	r23, 0xFF	; 255
     daa:	0e 94 65 06 	call	0xcca	; 0xcca <_ZN9URMSerial11sendCommandEPh>
            distanceRequested = true;
     dae:	f8 01       	movw	r30, r16
     db0:	f1 86       	std	Z+9, r15	; 0x09
            return true;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	01 c0       	rjmp	.+2      	; 0xdb8 <_ZN9URMSerial18requestMeasurementEh+0x70>
         break;
         default:
         // Do nothing
            return false;
     db6:	80 e0       	ldi	r24, 0x00	; 0
         break;
    }
}
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	08 95       	ret

00000dca <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi>:

byte URMSerial::requestMeasurementOrTimeout(byte mType, int& value)
{
     dca:	0f 93       	push	r16
     dcc:	1f 93       	push	r17
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	ec 01       	movw	r28, r24
     dd4:	8a 01       	movw	r16, r20
    // Request measurement or fail
    if(!requestMeasurement(mType))
     dd6:	0e 94 a4 06 	call	0xd48	; 0xd48 <_ZN9URMSerial18requestMeasurementEh>
     dda:	88 23       	and	r24, r24
     ddc:	b1 f0       	breq	.+44     	; 0xe0a <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x40>
    {
        return NOTREADY;
    }

    // Wait until we either timeout or we have a reading
    while(!reqTimeout() && !hasReading())
     dde:	ce 01       	movw	r24, r28
     de0:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN9URMSerial10reqTimeoutEv>
     de4:	88 23       	and	r24, r24
     de6:	c9 f4       	brne	.+50     	; 0xe1a <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x50>
     de8:	ce 01       	movw	r24, r28
     dea:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZN9URMSerial10hasReadingEv>
     dee:	88 23       	and	r24, r24
     df0:	a1 f4       	brne	.+40     	; 0xe1a <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x50>
    {
        delay(10); // Wait a bit
     df2:	6a e0       	ldi	r22, 0x0A	; 10
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
     dfe:	ef cf       	rjmp	.-34     	; 0xdde <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x14>

    // Request has timed out, FAIL
    if(reqTimeout()) return TIMEOUT;

    // Pass control to getMeasurement which will return the requested measurement
    return getMeasurement(value);
     e00:	ce 01       	movw	r24, r28
     e02:	b8 01       	movw	r22, r16
     e04:	0e 94 35 06 	call	0xc6a	; 0xc6a <_ZN9URMSerial14getMeasurementERi>
     e08:	03 c0       	rjmp	.+6      	; 0xe10 <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x46>
byte URMSerial::requestMeasurementOrTimeout(byte mType, int& value)
{
    // Request measurement or fail
    if(!requestMeasurement(mType))
    {
        return NOTREADY;
     e0a:	84 e0       	ldi	r24, 0x04	; 4
     e0c:	01 c0       	rjmp	.+2      	; 0xe10 <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x46>
    {
        delay(10); // Wait a bit
    }

    // Request has timed out, FAIL
    if(reqTimeout()) return TIMEOUT;
     e0e:	85 e0       	ldi	r24, 0x05	; 5

    // Pass control to getMeasurement which will return the requested measurement
    return getMeasurement(value);

}
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	08 95       	ret
    {
        delay(10); // Wait a bit
    }

    // Request has timed out, FAIL
    if(reqTimeout()) return TIMEOUT;
     e1a:	ce 01       	movw	r24, r28
     e1c:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN9URMSerial10reqTimeoutEv>
     e20:	88 23       	and	r24, r24
     e22:	a9 f7       	brne	.-22     	; 0xe0e <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x44>
     e24:	ed cf       	rjmp	.-38     	; 0xe00 <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x36>

00000e26 <_ZN9URMSerial5beginEhhl>:
}


// Setup our serial-> connection
void URMSerial::begin(uint8_t rxPin, uint8_t txPin, long baud)
{
     e26:	af 92       	push	r10
     e28:	bf 92       	push	r11
     e2a:	cf 92       	push	r12
     e2c:	df 92       	push	r13
     e2e:	ef 92       	push	r14
     e30:	ff 92       	push	r15
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <_ZN9URMSerial5beginEhhl+0x16>
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	5c 01       	movw	r10, r24
     e42:	68 01       	movw	r12, r16
     e44:	79 01       	movw	r14, r18
    // Initalise measurements
	distanceRequested = false;
     e46:	fc 01       	movw	r30, r24
     e48:	11 86       	std	Z+9, r1	; 0x09
	temperatureRequested = false;
     e4a:	12 86       	std	Z+10, r1	; 0x0a
	
	servoAngle = 0; // 90*
     e4c:	16 82       	std	Z+6, r1	; 0x06
	servoMin = 0;
     e4e:	10 86       	std	Z+8, r1	; 0x08
	servoMax = 90;
     e50:	8a e5       	ldi	r24, 0x5A	; 90
     e52:	87 83       	std	Z+7, r24	; 0x07
	
	timeout = 200;
     e54:	88 ec       	ldi	r24, 0xC8	; 200
     e56:	87 87       	std	Z+15, r24	; 0x0f

    // Initalise serial data
    for(int i=0; i<4;i++) serialData[i]=0;
     e58:	13 86       	std	Z+11, r1	; 0x0b
     e5a:	14 86       	std	Z+12, r1	; 0x0c
     e5c:	15 86       	std	Z+13, r1	; 0x0d
     e5e:	16 86       	std	Z+14, r1	; 0x0e

    // Initalise the software serial to handle our serial communication
    // Please note: using software serial over hardware-serial has some potential issues.
	serial = new SoftwareSerial(rxPin, txPin);
     e60:	8c e1       	ldi	r24, 0x1C	; 28
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	4a 83       	std	Y+2, r20	; 0x02
     e66:	69 83       	std	Y+1, r22	; 0x01
     e68:	0e 94 4d 10 	call	0x209a	; 0x209a <_Znwj>
     e6c:	8c 01       	movw	r16, r24
     e6e:	69 81       	ldd	r22, Y+1	; 0x01
     e70:	4a 81       	ldd	r20, Y+2	; 0x02
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	0e 94 a4 04 	call	0x948	; 0x948 <_ZN14SoftwareSerialC1Ehhb>
     e78:	f5 01       	movw	r30, r10
     e7a:	15 83       	std	Z+5, r17	; 0x05
     e7c:	04 83       	std	Z+4, r16	; 0x04
	serial->begin(baud);
     e7e:	c8 01       	movw	r24, r16
     e80:	b7 01       	movw	r22, r14
     e82:	a6 01       	movw	r20, r12
     e84:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN14SoftwareSerial5beginEl>
}
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	ff 90       	pop	r15
     e96:	ef 90       	pop	r14
     e98:	df 90       	pop	r13
     e9a:	cf 90       	pop	r12
     e9c:	bf 90       	pop	r11
     e9e:	af 90       	pop	r10
     ea0:	08 95       	ret

00000ea2 <_ZN9URMSerial10beginBasicEl>:

void URMSerial::beginBasic(long baud){
	serial->begin(baud);
     ea2:	fc 01       	movw	r30, r24
     ea4:	84 81       	ldd	r24, Z+4	; 0x04
     ea6:	95 81       	ldd	r25, Z+5	; 0x05
     ea8:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN14SoftwareSerial5beginEl>
}
     eac:	08 95       	ret

00000eae <_ZN9WiFlyRNXVC1Ehh>:

#include "WiFlyRNXV.h"


//Constructor-Start listen on uart
WiFlyRNXV::WiFlyRNXV(byte pinReceive, byte pinSend) : uart (pinReceive, pinSend){
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	ec 01       	movw	r28, r24
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	0e 94 a4 04 	call	0x948	; 0x948 <_ZN14SoftwareSerialC1Ehhb>
	inCommandMode=false;
     eba:	1c 8e       	std	Y+28, r1	; 0x1c
	wifiStatus=false;
     ebc:	1d 8e       	std	Y+29, r1	; 0x1d
}
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	08 95       	ret

00000ec4 <_ZN9WiFlyRNXV5startEv>:

void WiFlyRNXV::start(){
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	d8 2f       	mov	r29, r24
     eca:	c9 2f       	mov	r28, r25
	uart.begin(WIFLY_DEFAULT_BAUD_RATE);
     ecc:	40 e8       	ldi	r20, 0x80	; 128
     ece:	55 e2       	ldi	r21, 0x25	; 37
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN14SoftwareSerial5beginEl>
	uart.listen();
     ed8:	8d 2f       	mov	r24, r29
     eda:	9c 2f       	mov	r25, r28
     edc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN14SoftwareSerial6listenEv>
	uart.flush();
     ee0:	8d 2f       	mov	r24, r29
     ee2:	9c 2f       	mov	r25, r28
     ee4:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
}
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	08 95       	ret

00000eee <_ZN9WiFlyRNXV3endEv>:

void WiFlyRNXV::end(){
	uart.end();
     eee:	0e 94 78 05 	call	0xaf0	; 0xaf0 <_ZN14SoftwareSerial3endEv>
}
     ef2:	08 95       	ret

00000ef4 <_Z14checkForStringPcS_>:

//Check if two strings/char* are the same
boolean checkForString(char* responseBuffer,char* compare){
	char * pch=NULL;
	pch = strstr (responseBuffer,compare);
     ef4:	0e 94 50 13 	call	0x26a0	; 0x26a0 <strstr>
	if(pch==NULL)
	return false;
     ef8:	21 e0       	ldi	r18, 0x01	; 1
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	09 f4       	brne	.+2      	; 0xf00 <_Z14checkForStringPcS_+0xc>
     efe:	20 e0       	ldi	r18, 0x00	; 0
	else
	return true;
}
     f00:	82 2f       	mov	r24, r18
     f02:	08 95       	ret

00000f04 <_ZN9WiFlyRNXV19checkBufferResponseEPci>:
	Serial.println("");
	return responseBuffer;
}

//Check buffer with a particular 
boolean WiFlyRNXV::checkBufferResponse(char* compareValue,int timeout){
     f04:	2f 92       	push	r2
     f06:	3f 92       	push	r3
     f08:	4f 92       	push	r4
     f0a:	5f 92       	push	r5
     f0c:	6f 92       	push	r6
     f0e:	7f 92       	push	r7
     f10:	8f 92       	push	r8
     f12:	9f 92       	push	r9
     f14:	af 92       	push	r10
     f16:	bf 92       	push	r11
     f18:	cf 92       	push	r12
     f1a:	df 92       	push	r13
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	f8 2e       	mov	r15, r24
     f2a:	e9 2e       	mov	r14, r25
     f2c:	1b 01       	movw	r2, r22
     f2e:	6a 01       	movw	r12, r20
	char chResponse = 'A';										//Initial character response
	int  bufsize = RESPONSE_BUFFER_SIZE -1;						//terminating null for bufsize
	boolean compareSuccess=false;								//Compare Success

	//Reset the buffer
	responseBuffer = (char*) malloc(RESPONSE_BUFFER_SIZE);
     f30:	80 e5       	ldi	r24, 0x50	; 80
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 16 12 	call	0x242c	; 0x242c <malloc>
     f38:	8c 01       	movw	r16, r24
	memset (responseBuffer, '\0', bufsize);
     f3a:	8f e4       	ldi	r24, 0x4F	; 79
     f3c:	f8 01       	movw	r30, r16
     f3e:	11 92       	st	Z+, r1
     f40:	8a 95       	dec	r24
     f42:	e9 f7       	brne	.-6      	; 0xf3e <_ZN9WiFlyRNXV19checkBufferResponseEPci+0x3a>

	//Fill the buffer
	unsigned long startTime = millis();
     f44:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <millis>
     f48:	2b 01       	movw	r4, r22
     f4a:	3c 01       	movw	r6, r24
boolean WiFlyRNXV::checkBufferResponse(char* compareValue,int timeout){
	
	//Variables
	char* responseBuffer;										//Buffer for response
	boolean bufRead = true;										//Finish Reading
	int  bufpos = 0;											//Buffer position
     f4c:	c0 e0       	ldi	r28, 0x00	; 0
     f4e:	d0 e0       	ldi	r29, 0x00	; 0

		//Check for existence of the comparison string, or if timeout stop
		if(checkForString(responseBuffer,compareValue)){
			compareSuccess=true;
			bufRead=false;
		}else if((millis()-startTime)>timeout){
     f50:	46 01       	movw	r8, r12
     f52:	aa 24       	eor	r10, r10
     f54:	97 fc       	sbrc	r9, 7
     f56:	a0 94       	com	r10
     f58:	ba 2c       	mov	r11, r10
	//Fill the buffer
	unsigned long startTime = millis();
	while(bufRead){
		
		//Start getting values
		if(uart.available()){
     f5a:	8f 2d       	mov	r24, r15
     f5c:	9e 2d       	mov	r25, r14
     f5e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_ZN14SoftwareSerial9availableEv>
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	a9 f0       	breq	.+42     	; 0xf90 <_ZN9WiFlyRNXV19checkBufferResponseEPci+0x8c>
			chResponse = uart.read();
     f66:	8f 2d       	mov	r24, r15
     f68:	9e 2d       	mov	r25, r14
     f6a:	0e 94 88 02 	call	0x510	; 0x510 <_ZN14SoftwareSerial4readEv>
			
			//Check this, buffer overflow
			if(bufpos<bufsize){
     f6e:	cf 34       	cpi	r28, 0x4F	; 79
     f70:	d1 05       	cpc	r29, r1
     f72:	34 f4       	brge	.+12     	; 0xf80 <_ZN9WiFlyRNXV19checkBufferResponseEPci+0x7c>
				responseBuffer[bufpos]=chResponse;
     f74:	f8 01       	movw	r30, r16
     f76:	ec 0f       	add	r30, r28
     f78:	fd 1f       	adc	r31, r29
	unsigned long startTime = millis();
	while(bufRead){
		
		//Start getting values
		if(uart.available()){
			chResponse = uart.read();
     f7a:	80 83       	st	Z, r24
			
			//Check this, buffer overflow
			if(bufpos<bufsize){
				responseBuffer[bufpos]=chResponse;
				bufpos++;
     f7c:	21 96       	adiw	r28, 0x01	; 1
     f7e:	08 c0       	rjmp	.+16     	; 0xf90 <_ZN9WiFlyRNXV19checkBufferResponseEPci+0x8c>
			}else{
				Serial.println("Buffer overflow");
     f80:	80 ea       	ldi	r24, 0xA0	; 160
     f82:	95 e0       	ldi	r25, 0x05	; 5
     f84:	69 ea       	ldi	r22, 0xA9	; 169
     f86:	71 e0       	ldi	r23, 0x01	; 1
     f88:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
				bufpos=0;
     f8c:	c0 e0       	ldi	r28, 0x00	; 0
     f8e:	d0 e0       	ldi	r29, 0x00	; 0
			}
		}

		//Check for existence of the comparison string, or if timeout stop
		if(checkForString(responseBuffer,compareValue)){
     f90:	c8 01       	movw	r24, r16
     f92:	b1 01       	movw	r22, r2
     f94:	0e 94 7a 07 	call	0xef4	; 0xef4 <_Z14checkForStringPcS_>
     f98:	88 23       	and	r24, r24
     f9a:	79 f4       	brne	.+30     	; 0xfba <_ZN9WiFlyRNXV19checkBufferResponseEPci+0xb6>
			compareSuccess=true;
			bufRead=false;
		}else if((millis()-startTime)>timeout){
     f9c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <millis>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	84 19       	sub	r24, r4
     fa6:	95 09       	sbc	r25, r5
     fa8:	a6 09       	sbc	r26, r6
     faa:	b7 09       	sbc	r27, r7
     fac:	88 16       	cp	r8, r24
     fae:	99 06       	cpc	r9, r25
     fb0:	aa 06       	cpc	r10, r26
     fb2:	bb 06       	cpc	r11, r27
     fb4:	90 f6       	brcc	.-92     	; 0xf5a <_ZN9WiFlyRNXV19checkBufferResponseEPci+0x56>
			compareSuccess=false;
     fb6:	c0 e0       	ldi	r28, 0x00	; 0
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <_ZN9WiFlyRNXV19checkBufferResponseEPci+0xb8>
			}
		}

		//Check for existence of the comparison string, or if timeout stop
		if(checkForString(responseBuffer,compareValue)){
			compareSuccess=true;
     fba:	c1 e0       	ldi	r28, 0x01	; 1
			compareSuccess=false;
			bufRead=false;
		}
	}
	
	Serial.println(responseBuffer);
     fbc:	80 ea       	ldi	r24, 0xA0	; 160
     fbe:	95 e0       	ldi	r25, 0x05	; 5
     fc0:	b8 01       	movw	r22, r16
     fc2:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
	uart.flush();
     fc6:	8f 2d       	mov	r24, r15
     fc8:	9e 2d       	mov	r25, r14
     fca:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	return compareSuccess;
}	
     fce:	8c 2f       	mov	r24, r28
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	ff 90       	pop	r15
     fda:	ef 90       	pop	r14
     fdc:	df 90       	pop	r13
     fde:	cf 90       	pop	r12
     fe0:	bf 90       	pop	r11
     fe2:	af 90       	pop	r10
     fe4:	9f 90       	pop	r9
     fe6:	8f 90       	pop	r8
     fe8:	7f 90       	pop	r7
     fea:	6f 90       	pop	r6
     fec:	5f 90       	pop	r5
     fee:	4f 90       	pop	r4
     ff0:	3f 90       	pop	r3
     ff2:	2f 90       	pop	r2
     ff4:	08 95       	ret

00000ff6 <_ZN9WiFlyRNXV17checkCharResponseEci>:

//Check buffer with a particular
boolean WiFlyRNXV::checkCharResponse(char compareValue,int timeout){
     ff6:	8f 92       	push	r8
     ff8:	9f 92       	push	r9
     ffa:	af 92       	push	r10
     ffc:	bf 92       	push	r11
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	d8 2f       	mov	r29, r24
    100e:	c9 2f       	mov	r28, r25
    1010:	16 2f       	mov	r17, r22
    1012:	6a 01       	movw	r12, r20
	boolean compareSuccess=false;								//Compare Success



	//Fill the buffer
	unsigned long startTime = millis();
    1014:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <millis>
    1018:	4b 01       	movw	r8, r22
    101a:	5c 01       	movw	r10, r24
			chResponse = uart.read();
			if(chResponse=compareValue){
				bufRead=false;
				compareSuccess=true;
			}
		}else if((millis()-startTime)>timeout){
    101c:	ee 24       	eor	r14, r14
    101e:	d7 fc       	sbrc	r13, 7
    1020:	e0 94       	com	r14
    1022:	fe 2c       	mov	r15, r14
	//Fill the buffer
	unsigned long startTime = millis();
	while(bufRead){
		
		//Start getting values
		if(uart.available()){
    1024:	8d 2f       	mov	r24, r29
    1026:	9c 2f       	mov	r25, r28
    1028:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_ZN14SoftwareSerial9availableEv>
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	39 f0       	breq	.+14     	; 0x103e <_ZN9WiFlyRNXV17checkCharResponseEci+0x48>
			chResponse = uart.read();
    1030:	8d 2f       	mov	r24, r29
    1032:	9c 2f       	mov	r25, r28
    1034:	0e 94 88 02 	call	0x510	; 0x510 <_ZN14SoftwareSerial4readEv>
			if(chResponse=compareValue){
    1038:	11 23       	and	r17, r17
    103a:	81 f4       	brne	.+32     	; 0x105c <_ZN9WiFlyRNXV17checkCharResponseEci+0x66>
    103c:	f3 cf       	rjmp	.-26     	; 0x1024 <_ZN9WiFlyRNXV17checkCharResponseEci+0x2e>
				bufRead=false;
				compareSuccess=true;
			}
		}else if((millis()-startTime)>timeout){
    103e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <millis>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	88 19       	sub	r24, r8
    1048:	99 09       	sbc	r25, r9
    104a:	aa 09       	sbc	r26, r10
    104c:	bb 09       	sbc	r27, r11
    104e:	c8 16       	cp	r12, r24
    1050:	d9 06       	cpc	r13, r25
    1052:	ea 06       	cpc	r14, r26
    1054:	fb 06       	cpc	r15, r27
    1056:	30 f7       	brcc	.-52     	; 0x1024 <_ZN9WiFlyRNXV17checkCharResponseEci+0x2e>
			compareSuccess=false;
    1058:	10 e0       	ldi	r17, 0x00	; 0
    105a:	01 c0       	rjmp	.+2      	; 0x105e <_ZN9WiFlyRNXV17checkCharResponseEci+0x68>
		//Start getting values
		if(uart.available()){
			chResponse = uart.read();
			if(chResponse=compareValue){
				bufRead=false;
				compareSuccess=true;
    105c:	11 e0       	ldi	r17, 0x01	; 1
			bufRead=false;
		}
	}
	
	//Serial.println(responseBuffer);
	uart.flush();
    105e:	8d 2f       	mov	r24, r29
    1060:	9c 2f       	mov	r25, r28
    1062:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	return compareSuccess;
}
    1066:	81 2f       	mov	r24, r17
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	bf 90       	pop	r11
    1078:	af 90       	pop	r10
    107a:	9f 90       	pop	r9
    107c:	8f 90       	pop	r8
    107e:	08 95       	ret

00001080 <_ZN9WiFlyRNXV16EnterCommandModeEv>:
	uart.flush();
	return compareCase;
}

//Enter Command Mode
boolean WiFlyRNXV::EnterCommandMode(){
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	ec 01       	movw	r28, r24
	uart.flush();
    1086:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	uart.print(COMMAND_MODE);
    108a:	ce 01       	movw	r24, r28
    108c:	69 eb       	ldi	r22, 0xB9	; 185
    108e:	71 e0       	ldi	r23, 0x01	; 1
    1090:	0e 94 92 11 	call	0x2324	; 0x2324 <_ZN5Print5printEPKc>
	delay(COMMAND_MODE_GUARD_TIME);
    1094:	6c e2       	ldi	r22, 0x2C	; 44
    1096:	71 e0       	ldi	r23, 0x01	; 1
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	if(checkBufferResponse("CMD",TIMEOUT_TIME))
    10a0:	ce 01       	movw	r24, r28
    10a2:	6d eb       	ldi	r22, 0xBD	; 189
    10a4:	71 e0       	ldi	r23, 0x01	; 1
    10a6:	48 eb       	ldi	r20, 0xB8	; 184
    10a8:	5b e0       	ldi	r21, 0x0B	; 11
    10aa:	0e 94 82 07 	call	0xf04	; 0xf04 <_ZN9WiFlyRNXV19checkBufferResponseEPci>
    10ae:	88 23       	and	r24, r24
    10b0:	19 f0       	breq	.+6      	; 0x10b8 <_ZN9WiFlyRNXV16EnterCommandModeEv+0x38>
		inCommandMode=true;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	8c 8f       	std	Y+28, r24	; 0x1c
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <_ZN9WiFlyRNXV16EnterCommandModeEv+0x3a>
	else
		inCommandMode=false;	
    10b8:	1c 8e       	std	Y+28, r1	; 0x1c
		
	return inCommandMode;
}
    10ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	08 95       	ret

000010c2 <_ZN9WiFlyRNXV15ExitCommandModeEv>:

//Exit Command Mode
boolean WiFlyRNXV::ExitCommandMode(){
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	ec 01       	movw	r28, r24
	uart.println("exit");
    10c8:	61 ec       	ldi	r22, 0xC1	; 193
    10ca:	71 e0       	ldi	r23, 0x01	; 1
    10cc:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
	delay(COMMAND_MODE_GUARD_TIME);
    10d0:	6c e2       	ldi	r22, 0x2C	; 44
    10d2:	71 e0       	ldi	r23, 0x01	; 1
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	inCommandMode=false;
    10dc:	1c 8e       	std	Y+28, r1	; 0x1c
	
	return inCommandMode;
}
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	08 95       	ret

000010e6 <_ZN9WiFlyRNXV11RebootWiFlyEv>:

//Exit Command Mode
void WiFlyRNXV::RebootWiFly(){
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	ec 01       	movw	r28, r24
	if(!inCommandMode)	EnterCommandMode();
    10ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10ee:	88 23       	and	r24, r24
    10f0:	19 f4       	brne	.+6      	; 0x10f8 <_ZN9WiFlyRNXV11RebootWiFlyEv+0x12>
    10f2:	ce 01       	movw	r24, r28
    10f4:	0e 94 40 08 	call	0x1080	; 0x1080 <_ZN9WiFlyRNXV16EnterCommandModeEv>
	delay(100);
    10f8:	64 e6       	ldi	r22, 0x64	; 100
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	uart.print("reboot\r");
    1104:	ce 01       	movw	r24, r28
    1106:	66 ec       	ldi	r22, 0xC6	; 198
    1108:	71 e0       	ldi	r23, 0x01	; 1
    110a:	0e 94 92 11 	call	0x2324	; 0x2324 <_ZN5Print5printEPKc>
	inCommandMode=false;
    110e:	1c 8e       	std	Y+28, r1	; 0x1c
}
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	08 95       	ret

00001116 <_ZN9WiFlyRNXV15CheckWiFiStatusEv>:

//Check WiFi Status
boolean WiFlyRNXV::CheckWiFiStatus(){
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	ec 01       	movw	r28, r24
	
	if(inCommandMode){
    111c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    111e:	88 23       	and	r24, r24
    1120:	49 f0       	breq	.+18     	; 0x1134 <_ZN9WiFlyRNXV15CheckWiFiStatusEv+0x1e>
		ExitCommandMode();
    1122:	ce 01       	movw	r24, r28
    1124:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN9WiFlyRNXV15ExitCommandModeEv>
		delay(1000);
    1128:	68 ee       	ldi	r22, 0xE8	; 232
    112a:	73 e0       	ldi	r23, 0x03	; 3
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
			break;
	}
	*/
	
	
	if(checkBufferResponse("OK",TIMEOUT_TIME))
    1134:	ce 01       	movw	r24, r28
    1136:	6e ec       	ldi	r22, 0xCE	; 206
    1138:	71 e0       	ldi	r23, 0x01	; 1
    113a:	48 eb       	ldi	r20, 0xB8	; 184
    113c:	5b e0       	ldi	r21, 0x0B	; 11
    113e:	0e 94 82 07 	call	0xf04	; 0xf04 <_ZN9WiFlyRNXV19checkBufferResponseEPci>
    1142:	88 23       	and	r24, r24
    1144:	19 f0       	breq	.+6      	; 0x114c <_ZN9WiFlyRNXV15CheckWiFiStatusEv+0x36>
		wifiStatus=true;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	8d 8f       	std	Y+29, r24	; 0x1d
    114a:	01 c0       	rjmp	.+2      	; 0x114e <_ZN9WiFlyRNXV15CheckWiFiStatusEv+0x38>
	else
		wifiStatus=false;
    114c:	1d 8e       	std	Y+29, r1	; 0x1d
	
		
	return wifiStatus;

}
    114e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	08 95       	ret

00001156 <_ZN9WiFlyRNXV10EnterAdHocEv>:
	delay(2000);
	Serial.println("Factory RESET done");
	inCommandMode=false;
}

void WiFlyRNXV::EnterAdHoc(){
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	ec 01       	movw	r28, r24
	
	int delayW=500;
	
	if(!inCommandMode)	EnterCommandMode();
    115c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    115e:	88 23       	and	r24, r24
    1160:	19 f4       	brne	.+6      	; 0x1168 <_ZN9WiFlyRNXV10EnterAdHocEv+0x12>
    1162:	ce 01       	movw	r24, r28
    1164:	0e 94 40 08 	call	0x1080	; 0x1080 <_ZN9WiFlyRNXV16EnterCommandModeEv>
	Serial.println("Attempting cmd mode");
    1168:	80 ea       	ldi	r24, 0xA0	; 160
    116a:	95 e0       	ldi	r25, 0x05	; 5
    116c:	69 ef       	ldi	r22, 0xF9	; 249
    116e:	71 e0       	ldi	r23, 0x01	; 1
    1170:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
	
	delay(delayW);
    1174:	64 ef       	ldi	r22, 0xF4	; 244
    1176:	71 e0       	ldi	r23, 0x01	; 1
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	// Setup adhoc network
	Serial.println("set ip address 169.254.1.1"); uart.flush();
    1180:	80 ea       	ldi	r24, 0xA0	; 160
    1182:	95 e0       	ldi	r25, 0x05	; 5
    1184:	6d e0       	ldi	r22, 0x0D	; 13
    1186:	72 e0       	ldi	r23, 0x02	; 2
    1188:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    118c:	ce 01       	movw	r24, r28
    118e:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	uart.println("set ip address 169.254.1.1"); delay(delayW); //getBufferResponse();
    1192:	ce 01       	movw	r24, r28
    1194:	6d e0       	ldi	r22, 0x0D	; 13
    1196:	72 e0       	ldi	r23, 0x02	; 2
    1198:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    119c:	64 ef       	ldi	r22, 0xF4	; 244
    119e:	71 e0       	ldi	r23, 0x01	; 1
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	Serial.println("set ip netmask 255.255.0.0"); uart.flush();
    11a8:	80 ea       	ldi	r24, 0xA0	; 160
    11aa:	95 e0       	ldi	r25, 0x05	; 5
    11ac:	68 e2       	ldi	r22, 0x28	; 40
    11ae:	72 e0       	ldi	r23, 0x02	; 2
    11b0:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    11b4:	ce 01       	movw	r24, r28
    11b6:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	uart.println("set ip netmask 255.255.0.0"); delay(delayW); //getBufferResponse();
    11ba:	ce 01       	movw	r24, r28
    11bc:	68 e2       	ldi	r22, 0x28	; 40
    11be:	72 e0       	ldi	r23, 0x02	; 2
    11c0:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    11c4:	64 ef       	ldi	r22, 0xF4	; 244
    11c6:	71 e0       	ldi	r23, 0x01	; 1
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	Serial.println("set ip dhcp 0"); uart.flush();
    11d0:	80 ea       	ldi	r24, 0xA0	; 160
    11d2:	95 e0       	ldi	r25, 0x05	; 5
    11d4:	63 e4       	ldi	r22, 0x43	; 67
    11d6:	72 e0       	ldi	r23, 0x02	; 2
    11d8:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    11dc:	ce 01       	movw	r24, r28
    11de:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	uart.println("set ip dhcp 0"); delay(delayW); //getBufferResponse();
    11e2:	ce 01       	movw	r24, r28
    11e4:	63 e4       	ldi	r22, 0x43	; 67
    11e6:	72 e0       	ldi	r23, 0x02	; 2
    11e8:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    11ec:	64 ef       	ldi	r22, 0xF4	; 244
    11ee:	71 e0       	ldi	r23, 0x01	; 1
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	Serial.println("set wlan ssid WiFly-GSX-XX"); uart.flush();
    11f8:	80 ea       	ldi	r24, 0xA0	; 160
    11fa:	95 e0       	ldi	r25, 0x05	; 5
    11fc:	61 e5       	ldi	r22, 0x51	; 81
    11fe:	72 e0       	ldi	r23, 0x02	; 2
    1200:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    1204:	ce 01       	movw	r24, r28
    1206:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	uart.println("set wlan ssid WiFly-GSX-XX"); delay(delayW); //getBufferResponse();
    120a:	ce 01       	movw	r24, r28
    120c:	61 e5       	ldi	r22, 0x51	; 81
    120e:	72 e0       	ldi	r23, 0x02	; 2
    1210:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    1214:	64 ef       	ldi	r22, 0xF4	; 244
    1216:	71 e0       	ldi	r23, 0x01	; 1
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	Serial.println("set wlan channel 1"); uart.flush();
    1220:	80 ea       	ldi	r24, 0xA0	; 160
    1222:	95 e0       	ldi	r25, 0x05	; 5
    1224:	6c e6       	ldi	r22, 0x6C	; 108
    1226:	72 e0       	ldi	r23, 0x02	; 2
    1228:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    122c:	ce 01       	movw	r24, r28
    122e:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	uart.println("set wlan channel 1"); delay(delayW); //getBufferResponse();
    1232:	ce 01       	movw	r24, r28
    1234:	6c e6       	ldi	r22, 0x6C	; 108
    1236:	72 e0       	ldi	r23, 0x02	; 2
    1238:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    123c:	64 ef       	ldi	r22, 0xF4	; 244
    123e:	71 e0       	ldi	r23, 0x01	; 1
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
		//
	//// Create adhoc network
	Serial.println("set wlan join 4"); uart.flush();
    1248:	80 ea       	ldi	r24, 0xA0	; 160
    124a:	95 e0       	ldi	r25, 0x05	; 5
    124c:	6f e7       	ldi	r22, 0x7F	; 127
    124e:	72 e0       	ldi	r23, 0x02	; 2
    1250:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    1254:	ce 01       	movw	r24, r28
    1256:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	uart.println("set wlan join 4"); delay(delayW); //getBufferResponse();
    125a:	ce 01       	movw	r24, r28
    125c:	6f e7       	ldi	r22, 0x7F	; 127
    125e:	72 e0       	ldi	r23, 0x02	; 2
    1260:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    1264:	64 ef       	ldi	r22, 0xF4	; 244
    1266:	71 e0       	ldi	r23, 0x01	; 1
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	Serial.println("save"); uart.flush();
    1270:	80 ea       	ldi	r24, 0xA0	; 160
    1272:	95 e0       	ldi	r25, 0x05	; 5
    1274:	6f e8       	ldi	r22, 0x8F	; 143
    1276:	72 e0       	ldi	r23, 0x02	; 2
    1278:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    127c:	ce 01       	movw	r24, r28
    127e:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	uart.println("save"); delay(delayW); //getBufferResponse();
    1282:	ce 01       	movw	r24, r28
    1284:	6f e8       	ldi	r22, 0x8F	; 143
    1286:	72 e0       	ldi	r23, 0x02	; 2
    1288:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    128c:	64 ef       	ldi	r22, 0xF4	; 244
    128e:	71 e0       	ldi	r23, 0x01	; 1
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	Serial.println("reboot"); uart.flush();
    1298:	80 ea       	ldi	r24, 0xA0	; 160
    129a:	95 e0       	ldi	r25, 0x05	; 5
    129c:	6f ed       	ldi	r22, 0xDF	; 223
    129e:	71 e0       	ldi	r23, 0x01	; 1
    12a0:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    12a4:	ce 01       	movw	r24, r28
    12a6:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	uart.println("reboot"); delay(delayW); //getBufferResponse();
    12aa:	ce 01       	movw	r24, r28
    12ac:	6f ed       	ldi	r22, 0xDF	; 223
    12ae:	71 e0       	ldi	r23, 0x01	; 1
    12b0:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    12b4:	64 ef       	ldi	r22, 0xF4	; 244
    12b6:	71 e0       	ldi	r23, 0x01	; 1
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	delay(2000);
    12c0:	60 ed       	ldi	r22, 0xD0	; 208
    12c2:	77 e0       	ldi	r23, 0x07	; 7
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	
	inCommandMode=false;
    12cc:	1c 8e       	std	Y+28, r1	; 0x1c
	
	//digitalWrite(11,HIGH);
	uart.flush();
    12ce:	ce 01       	movw	r24, r28
    12d0:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	Serial.println("Done AdHoc");
    12d4:	80 ea       	ldi	r24, 0xA0	; 160
    12d6:	95 e0       	ldi	r25, 0x05	; 5
    12d8:	64 e9       	ldi	r22, 0x94	; 148
    12da:	72 e0       	ldi	r23, 0x02	; 2
    12dc:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
}
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	08 95       	ret

000012e6 <_ZN9WiFlyRNXV14AdHocConnectedEv>:

boolean WiFlyRNXV::AdHocConnected(){
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	ec 01       	movw	r28, r24
	boolean check=false;
	if(uart.available()) check=checkBufferResponse("Connected",TIMEOUT_TIME);
    12ec:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_ZN14SoftwareSerial9availableEv>
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	89 f0       	breq	.+34     	; 0x1316 <_ZN9WiFlyRNXV14AdHocConnectedEv+0x30>
    12f4:	ce 01       	movw	r24, r28
    12f6:	6f e9       	ldi	r22, 0x9F	; 159
    12f8:	72 e0       	ldi	r23, 0x02	; 2
    12fa:	48 eb       	ldi	r20, 0xB8	; 184
    12fc:	5b e0       	ldi	r21, 0x0B	; 11
    12fe:	0e 94 82 07 	call	0xf04	; 0xf04 <_ZN9WiFlyRNXV19checkBufferResponseEPci>
	if(check){
    1302:	88 23       	and	r24, r24
    1304:	41 f0       	breq	.+16     	; 0x1316 <_ZN9WiFlyRNXV14AdHocConnectedEv+0x30>
		Serial.println("Connected!!!");
    1306:	80 ea       	ldi	r24, 0xA0	; 160
    1308:	95 e0       	ldi	r25, 0x05	; 5
    130a:	69 ea       	ldi	r22, 0xA9	; 169
    130c:	72 e0       	ldi	r23, 0x02	; 2
    130e:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
		return true;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <_ZN9WiFlyRNXV14AdHocConnectedEv+0x32>
	}else{
		return false;
    1316:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	08 95       	ret

0000131e <_ZN9WiFlyRNXV10AdHocEndedEv>:

boolean WiFlyRNXV::AdHocEnded(){
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	d8 2f       	mov	r29, r24
    1324:	c9 2f       	mov	r28, r25
	boolean check=false;
	if(uart.available()){	
    1326:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_ZN14SoftwareSerial9availableEv>
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	c1 f0       	breq	.+48     	; 0x135e <_ZN9WiFlyRNXV10AdHocEndedEv+0x40>
		 check=true;
		 Serial.println("datarec");
    132e:	80 ea       	ldi	r24, 0xA0	; 160
    1330:	95 e0       	ldi	r25, 0x05	; 5
    1332:	66 eb       	ldi	r22, 0xB6	; 182
    1334:	72 e0       	ldi	r23, 0x02	; 2
    1336:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
		 delay(4000);
    133a:	60 ea       	ldi	r22, 0xA0	; 160
    133c:	7f e0       	ldi	r23, 0x0F	; 15
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
		 uart.flush();
    1346:	8d 2f       	mov	r24, r29
    1348:	9c 2f       	mov	r25, r28
    134a:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	}		 
	if(check){
		Serial.println("READY!");
    134e:	80 ea       	ldi	r24, 0xA0	; 160
    1350:	95 e0       	ldi	r25, 0x05	; 5
    1352:	6e eb       	ldi	r22, 0xBE	; 190
    1354:	72 e0       	ldi	r23, 0x02	; 2
    1356:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
		return true;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	01 c0       	rjmp	.+2      	; 0x1360 <_ZN9WiFlyRNXV10AdHocEndedEv+0x42>
	}else{
		return false;
    135e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	08 95       	ret

00001366 <_ZN9WiFlyRNXV7SetHTTPEv>:

void WiFlyRNXV::SetHTTP(){
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	ec 01       	movw	r28, r24
	int delayW=500;
	
	if(!inCommandMode)	EnterCommandMode();
    136c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    136e:	88 23       	and	r24, r24
    1370:	19 f4       	brne	.+6      	; 0x1378 <_ZN9WiFlyRNXV7SetHTTPEv+0x12>
    1372:	ce 01       	movw	r24, r28
    1374:	0e 94 40 08 	call	0x1080	; 0x1080 <_ZN9WiFlyRNXV16EnterCommandModeEv>
	Serial.println("Attempting cmd mode");
    1378:	80 ea       	ldi	r24, 0xA0	; 160
    137a:	95 e0       	ldi	r25, 0x05	; 5
    137c:	69 ef       	ldi	r22, 0xF9	; 249
    137e:	71 e0       	ldi	r23, 0x01	; 1
    1380:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
	
	delay(delayW);
    1384:	64 ef       	ldi	r22, 0xF4	; 244
    1386:	71 e0       	ldi	r23, 0x01	; 1
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	// Setup adhoc network
	Serial.println("set ip proto 18"); uart.flush();
    1390:	80 ea       	ldi	r24, 0xA0	; 160
    1392:	95 e0       	ldi	r25, 0x05	; 5
    1394:	65 ec       	ldi	r22, 0xC5	; 197
    1396:	72 e0       	ldi	r23, 0x02	; 2
    1398:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    139c:	ce 01       	movw	r24, r28
    139e:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	uart.println("set ip proto 18"); delay(delayW); //getBufferResponse();
    13a2:	ce 01       	movw	r24, r28
    13a4:	65 ec       	ldi	r22, 0xC5	; 197
    13a6:	72 e0       	ldi	r23, 0x02	; 2
    13a8:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    13ac:	64 ef       	ldi	r22, 0xF4	; 244
    13ae:	71 e0       	ldi	r23, 0x01	; 1
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	Serial.println("set dns name www.raaj.homeip.net"); uart.flush();
    13b8:	80 ea       	ldi	r24, 0xA0	; 160
    13ba:	95 e0       	ldi	r25, 0x05	; 5
    13bc:	65 ed       	ldi	r22, 0xD5	; 213
    13be:	72 e0       	ldi	r23, 0x02	; 2
    13c0:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    13c4:	ce 01       	movw	r24, r28
    13c6:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	uart.println("set dns name www.raaj.homeip.net"); delay(delayW); //getBufferResponse();
    13ca:	ce 01       	movw	r24, r28
    13cc:	65 ed       	ldi	r22, 0xD5	; 213
    13ce:	72 e0       	ldi	r23, 0x02	; 2
    13d0:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    13d4:	64 ef       	ldi	r22, 0xF4	; 244
    13d6:	71 e0       	ldi	r23, 0x01	; 1
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	Serial.println("set ip address 0"); uart.flush();
    13e0:	80 ea       	ldi	r24, 0xA0	; 160
    13e2:	95 e0       	ldi	r25, 0x05	; 5
    13e4:	66 ef       	ldi	r22, 0xF6	; 246
    13e6:	72 e0       	ldi	r23, 0x02	; 2
    13e8:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    13ec:	ce 01       	movw	r24, r28
    13ee:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	uart.println("set ip address 0"); delay(delayW); //getBufferResponse();
    13f2:	ce 01       	movw	r24, r28
    13f4:	66 ef       	ldi	r22, 0xF6	; 246
    13f6:	72 e0       	ldi	r23, 0x02	; 2
    13f8:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    13fc:	64 ef       	ldi	r22, 0xF4	; 244
    13fe:	71 e0       	ldi	r23, 0x01	; 1
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	Serial.println("set com remote 0"); uart.flush();
    1408:	80 ea       	ldi	r24, 0xA0	; 160
    140a:	95 e0       	ldi	r25, 0x05	; 5
    140c:	67 e0       	ldi	r22, 0x07	; 7
    140e:	73 e0       	ldi	r23, 0x03	; 3
    1410:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    1414:	ce 01       	movw	r24, r28
    1416:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	uart.println("set com remote 0"); delay(delayW); //getBufferResponse();
    141a:	ce 01       	movw	r24, r28
    141c:	67 e0       	ldi	r22, 0x07	; 7
    141e:	73 e0       	ldi	r23, 0x03	; 3
    1420:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    1424:	64 ef       	ldi	r22, 0xF4	; 244
    1426:	71 e0       	ldi	r23, 0x01	; 1
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>

	Serial.println("save"); uart.flush();
    1430:	80 ea       	ldi	r24, 0xA0	; 160
    1432:	95 e0       	ldi	r25, 0x05	; 5
    1434:	6f e8       	ldi	r22, 0x8F	; 143
    1436:	72 e0       	ldi	r23, 0x02	; 2
    1438:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    143c:	ce 01       	movw	r24, r28
    143e:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	uart.println("save"); delay(delayW); //getBufferResponse();
    1442:	ce 01       	movw	r24, r28
    1444:	6f e8       	ldi	r22, 0x8F	; 143
    1446:	72 e0       	ldi	r23, 0x02	; 2
    1448:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    144c:	64 ef       	ldi	r22, 0xF4	; 244
    144e:	71 e0       	ldi	r23, 0x01	; 1
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	Serial.println("exit"); uart.flush();
    1458:	80 ea       	ldi	r24, 0xA0	; 160
    145a:	95 e0       	ldi	r25, 0x05	; 5
    145c:	61 ec       	ldi	r22, 0xC1	; 193
    145e:	71 e0       	ldi	r23, 0x01	; 1
    1460:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    1464:	ce 01       	movw	r24, r28
    1466:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	uart.println("exit"); delay(delayW); //getBufferResponse();
    146a:	ce 01       	movw	r24, r28
    146c:	61 ec       	ldi	r22, 0xC1	; 193
    146e:	71 e0       	ldi	r23, 0x01	; 1
    1470:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    1474:	64 ef       	ldi	r22, 0xF4	; 244
    1476:	71 e0       	ldi	r23, 0x01	; 1
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	delay(2000);
    1480:	60 ed       	ldi	r22, 0xD0	; 208
    1482:	77 e0       	ldi	r23, 0x07	; 7
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	
	inCommandMode=false;
    148c:	1c 8e       	std	Y+28, r1	; 0x1c
	Serial.println("Done SetHTTP");
    148e:	80 ea       	ldi	r24, 0xA0	; 160
    1490:	95 e0       	ldi	r25, 0x05	; 5
    1492:	68 e1       	ldi	r22, 0x18	; 24
    1494:	73 e0       	ldi	r23, 0x03	; 3
    1496:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
	//digitalWrite(11,HIGH);
	uart.flush();	
    149a:	ce 01       	movw	r24, r28
    149c:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
}
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <_ZN9WiFlyRNXV12SendResponseEPc>:


char responseArr[128];
void WiFlyRNXV::SendResponse(char* value){
    14a6:	ef 92       	push	r14
    14a8:	ff 92       	push	r15
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	ec 01       	movw	r28, r24
    14b4:	8b 01       	movw	r16, r22
	int delayW=500;
	Serial.println("sendreponse");
    14b6:	80 ea       	ldi	r24, 0xA0	; 160
    14b8:	95 e0       	ldi	r25, 0x05	; 5
    14ba:	65 e2       	ldi	r22, 0x25	; 37
    14bc:	73 e0       	ldi	r23, 0x03	; 3
    14be:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
	uart.print("$$$");
    14c2:	7e 01       	movw	r14, r28
    14c4:	ce 01       	movw	r24, r28
    14c6:	69 eb       	ldi	r22, 0xB9	; 185
    14c8:	71 e0       	ldi	r23, 0x01	; 1
    14ca:	0e 94 92 11 	call	0x2324	; 0x2324 <_ZN5Print5printEPKc>
	
	delay(delayW);
    14ce:	64 ef       	ldi	r22, 0xF4	; 244
    14d0:	71 e0       	ldi	r23, 0x01	; 1
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	Serial.println("open www.raaj.homeip.net 80"); uart.flush();
    14da:	80 ea       	ldi	r24, 0xA0	; 160
    14dc:	95 e0       	ldi	r25, 0x05	; 5
    14de:	61 e3       	ldi	r22, 0x31	; 49
    14e0:	73 e0       	ldi	r23, 0x03	; 3
    14e2:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
    14e6:	ce 01       	movw	r24, r28
    14e8:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	uart.println("open www.raaj.homeip.net 80"); //delay(delayW); //getBufferResponse();
    14ec:	ce 01       	movw	r24, r28
    14ee:	61 e3       	ldi	r22, 0x31	; 49
    14f0:	73 e0       	ldi	r23, 0x03	; 3
    14f2:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
	//uart.flush();
	
	//wait for open
	boolean xx=checkBufferResponse("*OPEN*",6000);
    14f6:	ce 01       	movw	r24, r28
    14f8:	6d e4       	ldi	r22, 0x4D	; 77
    14fa:	73 e0       	ldi	r23, 0x03	; 3
    14fc:	40 e7       	ldi	r20, 0x70	; 112
    14fe:	57 e1       	ldi	r21, 0x17	; 23
    1500:	0e 94 82 07 	call	0xf04	; 0xf04 <_ZN9WiFlyRNXV19checkBufferResponseEPci>

		/////////////CODE/////////////////
		Serial.println("port open");
    1504:	80 ea       	ldi	r24, 0xA0	; 160
    1506:	95 e0       	ldi	r25, 0x05	; 5
    1508:	64 e5       	ldi	r22, 0x54	; 84
    150a:	73 e0       	ldi	r23, 0x03	; 3
    150c:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
		delay(2000);
    1510:	60 ed       	ldi	r22, 0xD0	; 208
    1512:	77 e0       	ldi	r23, 0x07	; 7
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
		
		char* response="GET /addtoDB.php?count=";
		responseArr[0] = '\0';
    151c:	10 92 3e 04 	sts	0x043E, r1
		strcat(responseArr, response);
    1520:	8e e3       	ldi	r24, 0x3E	; 62
    1522:	94 e0       	ldi	r25, 0x04	; 4
    1524:	6e e5       	ldi	r22, 0x5E	; 94
    1526:	73 e0       	ldi	r23, 0x03	; 3
    1528:	0e 94 45 13 	call	0x268a	; 0x268a <strcat>
		strcat(responseArr,value);
    152c:	8e e3       	ldi	r24, 0x3E	; 62
    152e:	94 e0       	ldi	r25, 0x04	; 4
    1530:	b8 01       	movw	r22, r16
    1532:	0e 94 45 13 	call	0x268a	; 0x268a <strcat>
		//strcat(response,val);
		//strcat(response," \n\n");

		uart.print(responseArr);
    1536:	ce 01       	movw	r24, r28
    1538:	6e e3       	ldi	r22, 0x3E	; 62
    153a:	74 e0       	ldi	r23, 0x04	; 4
    153c:	0e 94 92 11 	call	0x2324	; 0x2324 <_ZN5Print5printEPKc>

		boolean pp=checkCharResponse('(',8000);
    1540:	ce 01       	movw	r24, r28
    1542:	68 e2       	ldi	r22, 0x28	; 40
    1544:	40 e4       	ldi	r20, 0x40	; 64
    1546:	5f e1       	ldi	r21, 0x1F	; 31
    1548:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN9WiFlyRNXV17checkCharResponseEci>
		if(pp)
    154c:	88 23       	and	r24, r24
    154e:	31 f0       	breq	.+12     	; 0x155c <_ZN9WiFlyRNXV12SendResponseEPc+0xb6>
			Serial.println("success");
    1550:	80 ea       	ldi	r24, 0xA0	; 160
    1552:	95 e0       	ldi	r25, 0x05	; 5
    1554:	66 e7       	ldi	r22, 0x76	; 118
    1556:	73 e0       	ldi	r23, 0x03	; 3
    1558:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
		/////////////CODE/////////////////

	
	
	uart.println("exit");
    155c:	c7 01       	movw	r24, r14
    155e:	61 ec       	ldi	r22, 0xC1	; 193
    1560:	71 e0       	ldi	r23, 0x01	; 1
    1562:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
	inCommandMode=false;
    1566:	1c 8e       	std	Y+28, r1	; 0x1c
}
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	ff 90       	pop	r15
    1572:	ef 90       	pop	r14
    1574:	08 95       	ret

00001576 <_Z14InterruptAdHocv>:
}

//Interrupt to set up in ad-hoc mode
bool buttonPress=false;
bool enterADHOCnow=false;
void InterruptAdHoc(){
    1576:	cf 92       	push	r12
    1578:	df 92       	push	r13
    157a:	ef 92       	push	r14
    157c:	ff 92       	push	r15
	static unsigned long last_interrupt_time = 0;
	unsigned long interrupt_time = millis();
    157e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <millis>
    1582:	6b 01       	movw	r12, r22
    1584:	7c 01       	movw	r14, r24
	// If interrupts come faster than 200ms, assume it's a bounce and ignore
	if (interrupt_time - last_interrupt_time > 200)
    1586:	80 91 07 05 	lds	r24, 0x0507
    158a:	90 91 08 05 	lds	r25, 0x0508
    158e:	a0 91 09 05 	lds	r26, 0x0509
    1592:	b0 91 0a 05 	lds	r27, 0x050A
    1596:	a7 01       	movw	r20, r14
    1598:	96 01       	movw	r18, r12
    159a:	28 1b       	sub	r18, r24
    159c:	39 0b       	sbc	r19, r25
    159e:	4a 0b       	sbc	r20, r26
    15a0:	5b 0b       	sbc	r21, r27
    15a2:	29 3c       	cpi	r18, 0xC9	; 201
    15a4:	31 05       	cpc	r19, r1
    15a6:	41 05       	cpc	r20, r1
    15a8:	51 05       	cpc	r21, r1
    15aa:	48 f0       	brcs	.+18     	; 0x15be <_Z14InterruptAdHocv+0x48>
	{
		Serial.println("INTERRUPT");
    15ac:	80 ea       	ldi	r24, 0xA0	; 160
    15ae:	95 e0       	ldi	r25, 0x05	; 5
    15b0:	6e e7       	ldi	r22, 0x7E	; 126
    15b2:	73 e0       	ldi	r23, 0x03	; 3
    15b4:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
		
		enterADHOCnow=true;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	80 93 c3 04 	sts	0x04C3, r24
	}
	last_interrupt_time = interrupt_time;
    15be:	c0 92 07 05 	sts	0x0507, r12
    15c2:	d0 92 08 05 	sts	0x0508, r13
    15c6:	e0 92 09 05 	sts	0x0509, r14
    15ca:	f0 92 0a 05 	sts	0x050A, r15
}
    15ce:	ff 90       	pop	r15
    15d0:	ef 90       	pop	r14
    15d2:	df 90       	pop	r13
    15d4:	cf 90       	pop	r12
    15d6:	08 95       	ret

000015d8 <_Z41__static_initialization_and_destruction_0ii.constprop.2>:
			
		default:
			break;
	}
	
    15d8:	0f 93       	push	r16
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	91 05       	cpc	r25, r1
    15de:	79 f4       	brne	.+30     	; 0x15fe <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x26>

#define WIFLYRX 4


//Main Objects
WiFlyRNXV wiFly(4,5);
    15e0:	89 ee       	ldi	r24, 0xE9	; 233
    15e2:	94 e0       	ldi	r25, 0x04	; 4
    15e4:	64 e0       	ldi	r22, 0x04	; 4
    15e6:	45 e0       	ldi	r20, 0x05	; 5
    15e8:	0e 94 57 07 	call	0xeae	; 0xeae <_ZN9WiFlyRNXVC1Ehh>
DistanceDriver distanceDriver(6,7,10,11);
    15ec:	85 ec       	ldi	r24, 0xC5	; 197
    15ee:	94 e0       	ldi	r25, 0x04	; 4
    15f0:	66 e0       	ldi	r22, 0x06	; 6
    15f2:	47 e0       	ldi	r20, 0x07	; 7
    15f4:	2a e0       	ldi	r18, 0x0A	; 10
    15f6:	0b e0       	ldi	r16, 0x0B	; 11
    15f8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN14DistanceDriverC1Ehhhh>
    15fc:	06 c0       	rjmp	.+12     	; 0x160a <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x32>
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	21 f4       	brne	.+8      	; 0x160a <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x32>
const char* const COMMAND_MODE="$$$";
const char* const COMMAND_EXIT="exit";

using namespace std;

class WiFlyRNXV{
    1602:	89 ee       	ldi	r24, 0xE9	; 233
    1604:	94 e0       	ldi	r25, 0x04	; 4
    1606:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN14SoftwareSerialD1Ev>
			
		default:
			break;
	}
	
    160a:	0f 91       	pop	r16
    160c:	08 95       	ret

0000160e <_Z10updateWiFiv>:
	UNKNOWN			//Unknown state, currently no handle
};
State state=UNKNOWN;

//Check WiFi Status
void updateWiFi(){
    160e:	cf 93       	push	r28
	boolean wiFiStatus=wiFly.CheckWiFiStatus();
    1610:	89 ee       	ldi	r24, 0xE9	; 233
    1612:	94 e0       	ldi	r25, 0x04	; 4
    1614:	0e 94 8b 08 	call	0x1116	; 0x1116 <_ZN9WiFlyRNXV15CheckWiFiStatusEv>
    1618:	c8 2f       	mov	r28, r24
	if(wiFiStatus)
    161a:	88 23       	and	r24, r24
    161c:	19 f0       	breq	.+6      	; 0x1624 <_Z10updateWiFiv+0x16>
		state=CONNECTED1;
    161e:	10 92 db 03 	sts	0x03DB, r1
    1622:	03 c0       	rjmp	.+6      	; 0x162a <_Z10updateWiFiv+0x1c>
	else
		state=DISCONNECTED;
    1624:	82 e0       	ldi	r24, 0x02	; 2
    1626:	80 93 db 03 	sts	0x03DB, r24
		
	Serial.print("WiFi: ");
    162a:	80 ea       	ldi	r24, 0xA0	; 160
    162c:	95 e0       	ldi	r25, 0x05	; 5
    162e:	68 e8       	ldi	r22, 0x88	; 136
    1630:	73 e0       	ldi	r23, 0x03	; 3
    1632:	0e 94 92 11 	call	0x2324	; 0x2324 <_ZN5Print5printEPKc>
	Serial.println(wiFiStatus);
    1636:	80 ea       	ldi	r24, 0xA0	; 160
    1638:	95 e0       	ldi	r25, 0x05	; 5
    163a:	6c 2f       	mov	r22, r28
    163c:	4a e0       	ldi	r20, 0x0A	; 10
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	0e 94 21 11 	call	0x2242	; 0x2242 <_ZN5Print7printlnEhi>
}
    1644:	cf 91       	pop	r28
    1646:	08 95       	ret

00001648 <setup>:
	}
	last_interrupt_time = interrupt_time;
}

//Setup
void setup() {
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
	pinMode(13, OUTPUT);
    1650:	8d e0       	ldi	r24, 0x0D	; 13
    1652:	61 e0       	ldi	r22, 0x01	; 1
    1654:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <pinMode>
	Serial.begin(9600);
    1658:	00 ea       	ldi	r16, 0xA0	; 160
    165a:	15 e0       	ldi	r17, 0x05	; 5
    165c:	c8 01       	movw	r24, r16
    165e:	40 e8       	ldi	r20, 0x80	; 128
    1660:	55 e2       	ldi	r21, 0x25	; 37
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <_ZN14HardwareSerial5beginEm>
	Serial.println("ready");
    166a:	c8 01       	movw	r24, r16
    166c:	6f e8       	ldi	r22, 0x8F	; 143
    166e:	73 e0       	ldi	r23, 0x03	; 3
    1670:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
	
	wiFly.start();
    1674:	c9 ee       	ldi	r28, 0xE9	; 233
    1676:	d4 e0       	ldi	r29, 0x04	; 4
    1678:	ce 01       	movw	r24, r28
    167a:	0e 94 62 07 	call	0xec4	; 0xec4 <_ZN9WiFlyRNXV5startEv>
	wiFly.uart.println("exit");
    167e:	ce 01       	movw	r24, r28
    1680:	65 e9       	ldi	r22, 0x95	; 149
    1682:	73 e0       	ldi	r23, 0x03	; 3
    1684:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
	delay(2000);
    1688:	60 ed       	ldi	r22, 0xD0	; 208
    168a:	77 e0       	ldi	r23, 0x07	; 7
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
	Serial.println("run");
    1694:	c8 01       	movw	r24, r16
    1696:	6a e9       	ldi	r22, 0x9A	; 154
    1698:	73 e0       	ldi	r23, 0x03	; 3
    169a:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
	wiFly.RebootWiFly();
    169e:	ce 01       	movw	r24, r28
    16a0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <_ZN9WiFlyRNXV11RebootWiFlyEv>
	updateWiFi();
    16a4:	0e 94 07 0b 	call	0x160e	; 0x160e <_Z10updateWiFiv>
	
	attachInterrupt(0, InterruptAdHoc, RISING);
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	6b eb       	ldi	r22, 0xBB	; 187
    16ac:	7a e0       	ldi	r23, 0x0A	; 10
    16ae:	43 e0       	ldi	r20, 0x03	; 3
    16b0:	50 e0       	ldi	r21, 0x00	; 0
    16b2:	0e 94 45 0c 	call	0x188a	; 0x188a <attachInterrupt>
}
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	1f 91       	pop	r17
    16bc:	0f 91       	pop	r16
    16be:	08 95       	ret

000016c0 <_Z8sendModev>:

//Every 30s, pauses the sensors and updates the count via WiFly
boolean runOnce=false;
unsigned long prevTime=0;
void sendMode(){
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
	if(runOnce==false){
    16c4:	80 91 c2 04 	lds	r24, 0x04C2
    16c8:	88 23       	and	r24, r24
    16ca:	79 f4       	brne	.+30     	; 0x16ea <_Z8sendModev+0x2a>
		prevTime=millis();
    16cc:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <millis>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	80 93 be 04 	sts	0x04BE, r24
    16d8:	90 93 bf 04 	sts	0x04BF, r25
    16dc:	a0 93 c0 04 	sts	0x04C0, r26
    16e0:	b0 93 c1 04 	sts	0x04C1, r27
		runOnce=true;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	80 93 c2 04 	sts	0x04C2, r24
	}
	
	unsigned long currTime = millis();
    16ea:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <millis>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
	if (currTime - prevTime > 30000)
    16f2:	40 91 be 04 	lds	r20, 0x04BE
    16f6:	50 91 bf 04 	lds	r21, 0x04BF
    16fa:	60 91 c0 04 	lds	r22, 0x04C0
    16fe:	70 91 c1 04 	lds	r23, 0x04C1
    1702:	84 1b       	sub	r24, r20
    1704:	95 0b       	sbc	r25, r21
    1706:	a6 0b       	sbc	r26, r22
    1708:	b7 0b       	sbc	r27, r23
    170a:	81 33       	cpi	r24, 0x31	; 49
    170c:	25 e7       	ldi	r18, 0x75	; 117
    170e:	92 07       	cpc	r25, r18
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	a2 07       	cpc	r26, r18
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	b2 07       	cpc	r27, r18
    1718:	d0 f1       	brcs	.+116    	; 0x178e <_Z8sendModev+0xce>
	{
		Serial.println("Pulse paused");
    171a:	80 ea       	ldi	r24, 0xA0	; 160
    171c:	95 e0       	ldi	r25, 0x05	; 5
    171e:	6e e9       	ldi	r22, 0x9E	; 158
    1720:	73 e0       	ldi	r23, 0x03	; 3
    1722:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
		wiFly.start();
    1726:	89 ee       	ldi	r24, 0xE9	; 233
    1728:	94 e0       	ldi	r25, 0x04	; 4
    172a:	0e 94 62 07 	call	0xec4	; 0xec4 <_ZN9WiFlyRNXV5startEv>

		int x=distanceDriver.entryCount;
		char* str="aa";
		str=itoa(x, str, 10);
    172e:	80 91 c5 04 	lds	r24, 0x04C5
    1732:	90 91 c6 04 	lds	r25, 0x04C6
    1736:	6b ea       	ldi	r22, 0xAB	; 171
    1738:	73 e0       	ldi	r23, 0x03	; 3
    173a:	4a e0       	ldi	r20, 0x0A	; 10
    173c:	50 e0       	ldi	r21, 0x00	; 0
    173e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <itoa>
    1742:	ec 01       	movw	r28, r24
		
		wiFly.uart.println("exit");
    1744:	89 ee       	ldi	r24, 0xE9	; 233
    1746:	94 e0       	ldi	r25, 0x04	; 4
    1748:	65 e9       	ldi	r22, 0x95	; 149
    174a:	73 e0       	ldi	r23, 0x03	; 3
    174c:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
		wiFly.uart.flush();
    1750:	89 ee       	ldi	r24, 0xE9	; 233
    1752:	94 e0       	ldi	r25, 0x04	; 4
    1754:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
		Serial.println("hang");
    1758:	80 ea       	ldi	r24, 0xA0	; 160
    175a:	95 e0       	ldi	r25, 0x05	; 5
    175c:	6e ea       	ldi	r22, 0xAE	; 174
    175e:	73 e0       	ldi	r23, 0x03	; 3
    1760:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
		
		wiFly.SendResponse(str);
    1764:	89 ee       	ldi	r24, 0xE9	; 233
    1766:	94 e0       	ldi	r25, 0x04	; 4
    1768:	be 01       	movw	r22, r28
    176a:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <_ZN9WiFlyRNXV12SendResponseEPc>
		prevTime=millis();
    176e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <millis>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	80 93 be 04 	sts	0x04BE, r24
    177a:	90 93 bf 04 	sts	0x04BF, r25
    177e:	a0 93 c0 04 	sts	0x04C0, r26
    1782:	b0 93 c1 04 	sts	0x04C1, r27
		wiFly.end();
    1786:	89 ee       	ldi	r24, 0xE9	; 233
    1788:	94 e0       	ldi	r25, 0x04	; 4
    178a:	0e 94 77 07 	call	0xeee	; 0xeee <_ZN9WiFlyRNXV3endEv>
	}
}
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	08 95       	ret

00001794 <loop>:

//Main Loop
void loop() {

	//Interrupted-Set up Ad-Hoc mode
	if(enterADHOCnow==true){
    1794:	80 91 c3 04 	lds	r24, 0x04C3
    1798:	88 23       	and	r24, r24
    179a:	b9 f0       	breq	.+46     	; 0x17ca <loop+0x36>
		enterADHOCnow=false;
    179c:	10 92 c3 04 	sts	0x04C3, r1
		wiFly.start();
    17a0:	89 ee       	ldi	r24, 0xE9	; 233
    17a2:	94 e0       	ldi	r25, 0x04	; 4
    17a4:	0e 94 62 07 	call	0xec4	; 0xec4 <_ZN9WiFlyRNXV5startEv>
		wiFly.EnterAdHoc();
    17a8:	89 ee       	ldi	r24, 0xE9	; 233
    17aa:	94 e0       	ldi	r25, 0x04	; 4
    17ac:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN9WiFlyRNXV10EnterAdHocEv>
		state=ADHOCCONNECT;
    17b0:	83 e0       	ldi	r24, 0x03	; 3
    17b2:	80 93 db 03 	sts	0x03DB, r24
		Serial.println("doneX");
    17b6:	80 ea       	ldi	r24, 0xA0	; 160
    17b8:	95 e0       	ldi	r25, 0x05	; 5
    17ba:	63 eb       	ldi	r22, 0xB3	; 179
    17bc:	73 e0       	ldi	r23, 0x03	; 3
    17be:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
		wiFly.uart.flush();
    17c2:	89 ee       	ldi	r24, 0xE9	; 233
    17c4:	94 e0       	ldi	r25, 0x04	; 4
    17c6:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
	}
	
	//State Modes
	switch(state){
    17ca:	80 91 db 03 	lds	r24, 0x03DB
    17ce:	82 30       	cpi	r24, 0x02	; 2
    17d0:	71 f0       	breq	.+28     	; 0x17ee <loop+0x5a>
    17d2:	83 30       	cpi	r24, 0x03	; 3
    17d4:	30 f4       	brcc	.+12     	; 0x17e2 <loop+0x4e>
    17d6:	88 23       	and	r24, r24
    17d8:	a9 f1       	breq	.+106    	; 0x1844 <loop+0xb0>
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <loop+0x4c>
    17de:	4a c0       	rjmp	.+148    	; 0x1874 <loop+0xe0>
    17e0:	43 c0       	rjmp	.+134    	; 0x1868 <loop+0xd4>
    17e2:	83 30       	cpi	r24, 0x03	; 3
    17e4:	39 f0       	breq	.+14     	; 0x17f4 <loop+0x60>
    17e6:	84 30       	cpi	r24, 0x04	; 4
    17e8:	09 f0       	breq	.+2      	; 0x17ec <loop+0x58>
    17ea:	44 c0       	rjmp	.+136    	; 0x1874 <loop+0xe0>
    17ec:	21 c0       	rjmp	.+66     	; 0x1830 <loop+0x9c>
		case DISCONNECTED:
			updateWiFi();
    17ee:	0e 94 07 0b 	call	0x160e	; 0x160e <_Z10updateWiFiv>
			break;
    17f2:	08 95       	ret
			
		case ADHOCCONNECT:{
			if(wiFly.AdHocConnected()){
    17f4:	89 ee       	ldi	r24, 0xE9	; 233
    17f6:	94 e0       	ldi	r25, 0x04	; 4
    17f8:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN9WiFlyRNXV14AdHocConnectedEv>
    17fc:	88 23       	and	r24, r24
    17fe:	d1 f1       	breq	.+116    	; 0x1874 <loop+0xe0>
				Serial.println("EnterAdhocon");
    1800:	80 ea       	ldi	r24, 0xA0	; 160
    1802:	95 e0       	ldi	r25, 0x05	; 5
    1804:	69 eb       	ldi	r22, 0xB9	; 185
    1806:	73 e0       	ldi	r23, 0x03	; 3
    1808:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
				state=ADHOCON;
    180c:	84 e0       	ldi	r24, 0x04	; 4
    180e:	80 93 db 03 	sts	0x03DB, r24
				delay(3000);
    1812:	68 eb       	ldi	r22, 0xB8	; 184
    1814:	7b e0       	ldi	r23, 0x0B	; 11
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <delay>
				wiFly.uart.flush();
    181e:	89 ee       	ldi	r24, 0xE9	; 233
    1820:	94 e0       	ldi	r25, 0x04	; 4
    1822:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14SoftwareSerial5flushEv>
				Serial.println("Ready to receive");
    1826:	80 ea       	ldi	r24, 0xA0	; 160
    1828:	95 e0       	ldi	r25, 0x05	; 5
    182a:	66 ec       	ldi	r22, 0xC6	; 198
    182c:	73 e0       	ldi	r23, 0x03	; 3
    182e:	19 c0       	rjmp	.+50     	; 0x1862 <loop+0xce>
			}			
			break;}
			
		case ADHOCON:{
			if(wiFly.AdHocEnded())
    1830:	89 ee       	ldi	r24, 0xE9	; 233
    1832:	94 e0       	ldi	r25, 0x04	; 4
    1834:	0e 94 8f 09 	call	0x131e	; 0x131e <_ZN9WiFlyRNXV10AdHocEndedEv>
    1838:	88 23       	and	r24, r24
    183a:	e1 f0       	breq	.+56     	; 0x1874 <loop+0xe0>
				state=DISCONNECTED;
    183c:	82 e0       	ldi	r24, 0x02	; 2
    183e:	80 93 db 03 	sts	0x03DB, r24
    1842:	08 95       	ret
			
		case UNKNOWN:
			break;
			
		case CONNECTED1:
			wiFly.SetHTTP();
    1844:	89 ee       	ldi	r24, 0xE9	; 233
    1846:	94 e0       	ldi	r25, 0x04	; 4
    1848:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN9WiFlyRNXV7SetHTTPEv>
			wiFly.end();
    184c:	89 ee       	ldi	r24, 0xE9	; 233
    184e:	94 e0       	ldi	r25, 0x04	; 4
    1850:	0e 94 77 07 	call	0xeee	; 0xeee <_ZN9WiFlyRNXV3endEv>
			state=CONNECTED2;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	80 93 db 03 	sts	0x03DB, r24
			Serial.println("<S>");
    185a:	80 ea       	ldi	r24, 0xA0	; 160
    185c:	95 e0       	ldi	r25, 0x05	; 5
    185e:	67 ed       	ldi	r22, 0xD7	; 215
    1860:	73 e0       	ldi	r23, 0x03	; 3
    1862:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN5Print7printlnEPKc>
			break;
    1866:	08 95       	ret
			
		case CONNECTED2:
			sendMode();
    1868:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_Z8sendModev>
			distanceDriver.pingCount();
    186c:	85 ec       	ldi	r24, 0xC5	; 197
    186e:	94 e0       	ldi	r25, 0x04	; 4
    1870:	0e 94 28 01 	call	0x250	; 0x250 <_ZN14DistanceDriver9pingCountEv>
    1874:	08 95       	ret

00001876 <_GLOBAL__sub_I_wiFly>:
			
		default:
			break;
	}
	
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <_Z41__static_initialization_and_destruction_0ii.constprop.2>
    187e:	08 95       	ret

00001880 <_GLOBAL__sub_D_wiFly>:
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <_Z41__static_initialization_and_destruction_0ii.constprop.2>
    1888:	08 95       	ret

0000188a <attachInterrupt>:
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
    188a:	82 30       	cpi	r24, 0x02	; 2
    188c:	00 f5       	brcc	.+64     	; 0x18ce <attachInterrupt+0x44>
    188e:	e8 2f       	mov	r30, r24
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	ee 0f       	add	r30, r30
    1894:	ff 1f       	adc	r31, r31
    1896:	e5 5f       	subi	r30, 0xF5	; 245
    1898:	fa 4f       	sbci	r31, 0xFA	; 250
    189a:	71 83       	std	Z+1, r23	; 0x01
    189c:	60 83       	st	Z, r22
    189e:	88 23       	and	r24, r24
    18a0:	19 f0       	breq	.+6      	; 0x18a8 <attachInterrupt+0x1e>
    18a2:	81 30       	cpi	r24, 0x01	; 1
    18a4:	a1 f4       	brne	.+40     	; 0x18ce <attachInterrupt+0x44>
    18a6:	08 c0       	rjmp	.+16     	; 0x18b8 <attachInterrupt+0x2e>
    18a8:	80 91 69 00 	lds	r24, 0x0069
    18ac:	8c 7f       	andi	r24, 0xFC	; 252
    18ae:	84 2b       	or	r24, r20
    18b0:	80 93 69 00 	sts	0x0069, r24
    18b4:	e8 9a       	sbi	0x1d, 0	; 29
    18b6:	08 95       	ret
    18b8:	80 91 69 00 	lds	r24, 0x0069
    18bc:	44 0f       	add	r20, r20
    18be:	55 1f       	adc	r21, r21
    18c0:	44 0f       	add	r20, r20
    18c2:	55 1f       	adc	r21, r21
    18c4:	83 7f       	andi	r24, 0xF3	; 243
    18c6:	84 2b       	or	r24, r20
    18c8:	80 93 69 00 	sts	0x0069, r24
    18cc:	e9 9a       	sbi	0x1d, 1	; 29
    18ce:	08 95       	ret

000018d0 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
    18d0:	1f 92       	push	r1
    18d2:	0f 92       	push	r0
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	0f 92       	push	r0
    18d8:	11 24       	eor	r1, r1
    18da:	2f 93       	push	r18
    18dc:	3f 93       	push	r19
    18de:	4f 93       	push	r20
    18e0:	5f 93       	push	r21
    18e2:	6f 93       	push	r22
    18e4:	7f 93       	push	r23
    18e6:	8f 93       	push	r24
    18e8:	9f 93       	push	r25
    18ea:	af 93       	push	r26
    18ec:	bf 93       	push	r27
    18ee:	ef 93       	push	r30
    18f0:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    18f2:	80 91 0b 05 	lds	r24, 0x050B
    18f6:	90 91 0c 05 	lds	r25, 0x050C
    18fa:	89 2b       	or	r24, r25
    18fc:	29 f0       	breq	.+10     	; 0x1908 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    18fe:	e0 91 0b 05 	lds	r30, 0x050B
    1902:	f0 91 0c 05 	lds	r31, 0x050C
    1906:	09 95       	icall
}
    1908:	ff 91       	pop	r31
    190a:	ef 91       	pop	r30
    190c:	bf 91       	pop	r27
    190e:	af 91       	pop	r26
    1910:	9f 91       	pop	r25
    1912:	8f 91       	pop	r24
    1914:	7f 91       	pop	r23
    1916:	6f 91       	pop	r22
    1918:	5f 91       	pop	r21
    191a:	4f 91       	pop	r20
    191c:	3f 91       	pop	r19
    191e:	2f 91       	pop	r18
    1920:	0f 90       	pop	r0
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	0f 90       	pop	r0
    1926:	1f 90       	pop	r1
    1928:	18 95       	reti

0000192a <__vector_2>:

SIGNAL(INT1_vect) {
    192a:	1f 92       	push	r1
    192c:	0f 92       	push	r0
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	0f 92       	push	r0
    1932:	11 24       	eor	r1, r1
    1934:	2f 93       	push	r18
    1936:	3f 93       	push	r19
    1938:	4f 93       	push	r20
    193a:	5f 93       	push	r21
    193c:	6f 93       	push	r22
    193e:	7f 93       	push	r23
    1940:	8f 93       	push	r24
    1942:	9f 93       	push	r25
    1944:	af 93       	push	r26
    1946:	bf 93       	push	r27
    1948:	ef 93       	push	r30
    194a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    194c:	80 91 0d 05 	lds	r24, 0x050D
    1950:	90 91 0e 05 	lds	r25, 0x050E
    1954:	89 2b       	or	r24, r25
    1956:	29 f0       	breq	.+10     	; 0x1962 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    1958:	e0 91 0d 05 	lds	r30, 0x050D
    195c:	f0 91 0e 05 	lds	r31, 0x050E
    1960:	09 95       	icall
}
    1962:	ff 91       	pop	r31
    1964:	ef 91       	pop	r30
    1966:	bf 91       	pop	r27
    1968:	af 91       	pop	r26
    196a:	9f 91       	pop	r25
    196c:	8f 91       	pop	r24
    196e:	7f 91       	pop	r23
    1970:	6f 91       	pop	r22
    1972:	5f 91       	pop	r21
    1974:	4f 91       	pop	r20
    1976:	3f 91       	pop	r19
    1978:	2f 91       	pop	r18
    197a:	0f 90       	pop	r0
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	0f 90       	pop	r0
    1980:	1f 90       	pop	r1
    1982:	18 95       	reti

00001984 <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    1984:	1f 92       	push	r1
    1986:	0f 92       	push	r0
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	0f 92       	push	r0
    198c:	11 24       	eor	r1, r1
    198e:	2f 93       	push	r18
    1990:	3f 93       	push	r19
    1992:	8f 93       	push	r24
    1994:	9f 93       	push	r25
    1996:	af 93       	push	r26
    1998:	bf 93       	push	r27
    199a:	80 91 13 05 	lds	r24, 0x0513
    199e:	90 91 14 05 	lds	r25, 0x0514
    19a2:	a0 91 15 05 	lds	r26, 0x0515
    19a6:	b0 91 16 05 	lds	r27, 0x0516
    19aa:	30 91 17 05 	lds	r19, 0x0517
    19ae:	01 96       	adiw	r24, 0x01	; 1
    19b0:	a1 1d       	adc	r26, r1
    19b2:	b1 1d       	adc	r27, r1
    19b4:	23 2f       	mov	r18, r19
    19b6:	2d 5f       	subi	r18, 0xFD	; 253
    19b8:	2d 37       	cpi	r18, 0x7D	; 125
    19ba:	20 f0       	brcs	.+8      	; 0x19c4 <__vector_16+0x40>
    19bc:	2d 57       	subi	r18, 0x7D	; 125
    19be:	01 96       	adiw	r24, 0x01	; 1
    19c0:	a1 1d       	adc	r26, r1
    19c2:	b1 1d       	adc	r27, r1
    19c4:	20 93 17 05 	sts	0x0517, r18
    19c8:	80 93 13 05 	sts	0x0513, r24
    19cc:	90 93 14 05 	sts	0x0514, r25
    19d0:	a0 93 15 05 	sts	0x0515, r26
    19d4:	b0 93 16 05 	sts	0x0516, r27
    19d8:	80 91 0f 05 	lds	r24, 0x050F
    19dc:	90 91 10 05 	lds	r25, 0x0510
    19e0:	a0 91 11 05 	lds	r26, 0x0511
    19e4:	b0 91 12 05 	lds	r27, 0x0512
    19e8:	01 96       	adiw	r24, 0x01	; 1
    19ea:	a1 1d       	adc	r26, r1
    19ec:	b1 1d       	adc	r27, r1
    19ee:	80 93 0f 05 	sts	0x050F, r24
    19f2:	90 93 10 05 	sts	0x0510, r25
    19f6:	a0 93 11 05 	sts	0x0511, r26
    19fa:	b0 93 12 05 	sts	0x0512, r27
    19fe:	bf 91       	pop	r27
    1a00:	af 91       	pop	r26
    1a02:	9f 91       	pop	r25
    1a04:	8f 91       	pop	r24
    1a06:	3f 91       	pop	r19
    1a08:	2f 91       	pop	r18
    1a0a:	0f 90       	pop	r0
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	0f 90       	pop	r0
    1a10:	1f 90       	pop	r1
    1a12:	18 95       	reti

00001a14 <millis>:
    1a14:	8f b7       	in	r24, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	20 91 13 05 	lds	r18, 0x0513
    1a1c:	30 91 14 05 	lds	r19, 0x0514
    1a20:	40 91 15 05 	lds	r20, 0x0515
    1a24:	50 91 16 05 	lds	r21, 0x0516
    1a28:	8f bf       	out	0x3f, r24	; 63
    1a2a:	b9 01       	movw	r22, r18
    1a2c:	ca 01       	movw	r24, r20
    1a2e:	08 95       	ret

00001a30 <delay>:
    1a30:	9b 01       	movw	r18, r22
    1a32:	ac 01       	movw	r20, r24
    1a34:	7f b7       	in	r23, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	80 91 0f 05 	lds	r24, 0x050F
    1a3c:	90 91 10 05 	lds	r25, 0x0510
    1a40:	a0 91 11 05 	lds	r26, 0x0511
    1a44:	b0 91 12 05 	lds	r27, 0x0512
    1a48:	66 b5       	in	r22, 0x26	; 38
    1a4a:	a8 9b       	sbis	0x15, 0	; 21
    1a4c:	05 c0       	rjmp	.+10     	; 0x1a58 <delay+0x28>
    1a4e:	6f 3f       	cpi	r22, 0xFF	; 255
    1a50:	19 f0       	breq	.+6      	; 0x1a58 <delay+0x28>
    1a52:	01 96       	adiw	r24, 0x01	; 1
    1a54:	a1 1d       	adc	r26, r1
    1a56:	b1 1d       	adc	r27, r1
    1a58:	7f bf       	out	0x3f, r23	; 63
    1a5a:	ba 2f       	mov	r27, r26
    1a5c:	a9 2f       	mov	r26, r25
    1a5e:	98 2f       	mov	r25, r24
    1a60:	88 27       	eor	r24, r24
    1a62:	86 0f       	add	r24, r22
    1a64:	91 1d       	adc	r25, r1
    1a66:	a1 1d       	adc	r26, r1
    1a68:	b1 1d       	adc	r27, r1
    1a6a:	62 e0       	ldi	r22, 0x02	; 2
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	aa 1f       	adc	r26, r26
    1a72:	bb 1f       	adc	r27, r27
    1a74:	6a 95       	dec	r22
    1a76:	d1 f7       	brne	.-12     	; 0x1a6c <delay+0x3c>
    1a78:	bc 01       	movw	r22, r24
    1a7a:	2d c0       	rjmp	.+90     	; 0x1ad6 <delay+0xa6>
    1a7c:	ff b7       	in	r31, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	80 91 0f 05 	lds	r24, 0x050F
    1a84:	90 91 10 05 	lds	r25, 0x0510
    1a88:	a0 91 11 05 	lds	r26, 0x0511
    1a8c:	b0 91 12 05 	lds	r27, 0x0512
    1a90:	e6 b5       	in	r30, 0x26	; 38
    1a92:	a8 9b       	sbis	0x15, 0	; 21
    1a94:	05 c0       	rjmp	.+10     	; 0x1aa0 <delay+0x70>
    1a96:	ef 3f       	cpi	r30, 0xFF	; 255
    1a98:	19 f0       	breq	.+6      	; 0x1aa0 <delay+0x70>
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	a1 1d       	adc	r26, r1
    1a9e:	b1 1d       	adc	r27, r1
    1aa0:	ff bf       	out	0x3f, r31	; 63
    1aa2:	ba 2f       	mov	r27, r26
    1aa4:	a9 2f       	mov	r26, r25
    1aa6:	98 2f       	mov	r25, r24
    1aa8:	88 27       	eor	r24, r24
    1aaa:	8e 0f       	add	r24, r30
    1aac:	91 1d       	adc	r25, r1
    1aae:	a1 1d       	adc	r26, r1
    1ab0:	b1 1d       	adc	r27, r1
    1ab2:	e2 e0       	ldi	r30, 0x02	; 2
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	aa 1f       	adc	r26, r26
    1aba:	bb 1f       	adc	r27, r27
    1abc:	ea 95       	dec	r30
    1abe:	d1 f7       	brne	.-12     	; 0x1ab4 <delay+0x84>
    1ac0:	86 1b       	sub	r24, r22
    1ac2:	97 0b       	sbc	r25, r23
    1ac4:	88 5e       	subi	r24, 0xE8	; 232
    1ac6:	93 40       	sbci	r25, 0x03	; 3
    1ac8:	c8 f2       	brcs	.-78     	; 0x1a7c <delay+0x4c>
    1aca:	21 50       	subi	r18, 0x01	; 1
    1acc:	30 40       	sbci	r19, 0x00	; 0
    1ace:	40 40       	sbci	r20, 0x00	; 0
    1ad0:	50 40       	sbci	r21, 0x00	; 0
    1ad2:	68 51       	subi	r22, 0x18	; 24
    1ad4:	7c 4f       	sbci	r23, 0xFC	; 252
    1ad6:	21 15       	cp	r18, r1
    1ad8:	31 05       	cpc	r19, r1
    1ada:	41 05       	cpc	r20, r1
    1adc:	51 05       	cpc	r21, r1
    1ade:	71 f6       	brne	.-100    	; 0x1a7c <delay+0x4c>
    1ae0:	08 95       	ret

00001ae2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1ae2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1ae4:	84 b5       	in	r24, 0x24	; 36
    1ae6:	82 60       	ori	r24, 0x02	; 2
    1ae8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1aea:	84 b5       	in	r24, 0x24	; 36
    1aec:	81 60       	ori	r24, 0x01	; 1
    1aee:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1af0:	85 b5       	in	r24, 0x25	; 37
    1af2:	82 60       	ori	r24, 0x02	; 2
    1af4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1af6:	85 b5       	in	r24, 0x25	; 37
    1af8:	81 60       	ori	r24, 0x01	; 1
    1afa:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1afc:	ee e6       	ldi	r30, 0x6E	; 110
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	81 60       	ori	r24, 0x01	; 1
    1b04:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1b06:	e1 e8       	ldi	r30, 0x81	; 129
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1b0c:	80 81       	ld	r24, Z
    1b0e:	82 60       	ori	r24, 0x02	; 2
    1b10:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1b12:	80 81       	ld	r24, Z
    1b14:	81 60       	ori	r24, 0x01	; 1
    1b16:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1b18:	e0 e8       	ldi	r30, 0x80	; 128
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	81 60       	ori	r24, 0x01	; 1
    1b20:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1b22:	e1 eb       	ldi	r30, 0xB1	; 177
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	84 60       	ori	r24, 0x04	; 4
    1b2a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1b2c:	e0 eb       	ldi	r30, 0xB0	; 176
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	81 60       	ori	r24, 0x01	; 1
    1b34:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1b36:	ea e7       	ldi	r30, 0x7A	; 122
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	84 60       	ori	r24, 0x04	; 4
    1b3e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1b40:	80 81       	ld	r24, Z
    1b42:	82 60       	ori	r24, 0x02	; 2
    1b44:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1b46:	80 81       	ld	r24, Z
    1b48:	81 60       	ori	r24, 0x01	; 1
    1b4a:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1b4c:	80 81       	ld	r24, Z
    1b4e:	80 68       	ori	r24, 0x80	; 128
    1b50:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1b52:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1b56:	08 95       	ret

00001b58 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1b5c:	48 2f       	mov	r20, r24
    1b5e:	50 e0       	ldi	r21, 0x00	; 0
    1b60:	ca 01       	movw	r24, r20
    1b62:	86 5d       	subi	r24, 0xD6	; 214
    1b64:	9e 4f       	sbci	r25, 0xFE	; 254
    1b66:	fc 01       	movw	r30, r24
    1b68:	34 91       	lpm	r19, Z
	uint8_t port = digitalPinToPort(pin);
    1b6a:	4a 5e       	subi	r20, 0xEA	; 234
    1b6c:	5e 4f       	sbci	r21, 0xFE	; 254
    1b6e:	fa 01       	movw	r30, r20
    1b70:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1b72:	88 23       	and	r24, r24
    1b74:	69 f1       	breq	.+90     	; 0x1bd0 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	e8 50       	subi	r30, 0x08	; 8
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	a5 91       	lpm	r26, Z+
    1b84:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    1b86:	fc 01       	movw	r30, r24
    1b88:	ee 5f       	subi	r30, 0xFE	; 254
    1b8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b8c:	c5 91       	lpm	r28, Z+
    1b8e:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    1b90:	66 23       	and	r22, r22
    1b92:	51 f4       	brne	.+20     	; 0x1ba8 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    1b94:	2f b7       	in	r18, 0x3f	; 63
                cli();
    1b96:	f8 94       	cli
		*reg &= ~bit;
    1b98:	8c 91       	ld	r24, X
    1b9a:	93 2f       	mov	r25, r19
    1b9c:	90 95       	com	r25
    1b9e:	89 23       	and	r24, r25
    1ba0:	8c 93       	st	X, r24
		*out &= ~bit;
    1ba2:	88 81       	ld	r24, Y
    1ba4:	89 23       	and	r24, r25
    1ba6:	0b c0       	rjmp	.+22     	; 0x1bbe <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1ba8:	62 30       	cpi	r22, 0x02	; 2
    1baa:	61 f4       	brne	.+24     	; 0x1bc4 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    1bac:	2f b7       	in	r18, 0x3f	; 63
                cli();
    1bae:	f8 94       	cli
		*reg &= ~bit;
    1bb0:	8c 91       	ld	r24, X
    1bb2:	93 2f       	mov	r25, r19
    1bb4:	90 95       	com	r25
    1bb6:	89 23       	and	r24, r25
    1bb8:	8c 93       	st	X, r24
		*out |= bit;
    1bba:	88 81       	ld	r24, Y
    1bbc:	83 2b       	or	r24, r19
    1bbe:	88 83       	st	Y, r24
		SREG = oldSREG;
    1bc0:	2f bf       	out	0x3f, r18	; 63
    1bc2:	06 c0       	rjmp	.+12     	; 0x1bd0 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    1bc4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1bc6:	f8 94       	cli
		*reg |= bit;
    1bc8:	8c 91       	ld	r24, X
    1bca:	83 2b       	or	r24, r19
    1bcc:	8c 93       	st	X, r24
		SREG = oldSREG;
    1bce:	9f bf       	out	0x3f, r25	; 63
	}
}
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	08 95       	ret

00001bd6 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    1bd6:	48 2f       	mov	r20, r24
    1bd8:	50 e0       	ldi	r21, 0x00	; 0
    1bda:	ca 01       	movw	r24, r20
    1bdc:	82 5c       	subi	r24, 0xC2	; 194
    1bde:	9e 4f       	sbci	r25, 0xFE	; 254
    1be0:	fc 01       	movw	r30, r24
    1be2:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1be4:	ca 01       	movw	r24, r20
    1be6:	86 5d       	subi	r24, 0xD6	; 214
    1be8:	9e 4f       	sbci	r25, 0xFE	; 254
    1bea:	fc 01       	movw	r30, r24
    1bec:	94 91       	lpm	r25, Z
	uint8_t port = digitalPinToPort(pin);
    1bee:	4a 5e       	subi	r20, 0xEA	; 234
    1bf0:	5e 4f       	sbci	r21, 0xFE	; 254
    1bf2:	fa 01       	movw	r30, r20
    1bf4:	34 91       	lpm	r19, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1bf6:	33 23       	and	r19, r19
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <digitalWrite+0x26>
    1bfa:	40 c0       	rjmp	.+128    	; 0x1c7c <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1bfc:	22 23       	and	r18, r18
    1bfe:	51 f1       	breq	.+84     	; 0x1c54 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1c00:	23 30       	cpi	r18, 0x03	; 3
    1c02:	71 f0       	breq	.+28     	; 0x1c20 <digitalWrite+0x4a>
    1c04:	24 30       	cpi	r18, 0x04	; 4
    1c06:	28 f4       	brcc	.+10     	; 0x1c12 <digitalWrite+0x3c>
    1c08:	21 30       	cpi	r18, 0x01	; 1
    1c0a:	a1 f0       	breq	.+40     	; 0x1c34 <digitalWrite+0x5e>
    1c0c:	22 30       	cpi	r18, 0x02	; 2
    1c0e:	11 f5       	brne	.+68     	; 0x1c54 <digitalWrite+0x7e>
    1c10:	14 c0       	rjmp	.+40     	; 0x1c3a <digitalWrite+0x64>
    1c12:	26 30       	cpi	r18, 0x06	; 6
    1c14:	b1 f0       	breq	.+44     	; 0x1c42 <digitalWrite+0x6c>
    1c16:	27 30       	cpi	r18, 0x07	; 7
    1c18:	c1 f0       	breq	.+48     	; 0x1c4a <digitalWrite+0x74>
    1c1a:	24 30       	cpi	r18, 0x04	; 4
    1c1c:	d9 f4       	brne	.+54     	; 0x1c54 <digitalWrite+0x7e>
    1c1e:	04 c0       	rjmp	.+8      	; 0x1c28 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1c20:	80 91 80 00 	lds	r24, 0x0080
    1c24:	8f 77       	andi	r24, 0x7F	; 127
    1c26:	03 c0       	rjmp	.+6      	; 0x1c2e <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1c28:	80 91 80 00 	lds	r24, 0x0080
    1c2c:	8f 7d       	andi	r24, 0xDF	; 223
    1c2e:	80 93 80 00 	sts	0x0080, r24
    1c32:	10 c0       	rjmp	.+32     	; 0x1c54 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1c34:	84 b5       	in	r24, 0x24	; 36
    1c36:	8f 77       	andi	r24, 0x7F	; 127
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1c3a:	84 b5       	in	r24, 0x24	; 36
    1c3c:	8f 7d       	andi	r24, 0xDF	; 223
    1c3e:	84 bd       	out	0x24, r24	; 36
    1c40:	09 c0       	rjmp	.+18     	; 0x1c54 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1c42:	80 91 b0 00 	lds	r24, 0x00B0
    1c46:	8f 77       	andi	r24, 0x7F	; 127
    1c48:	03 c0       	rjmp	.+6      	; 0x1c50 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1c4a:	80 91 b0 00 	lds	r24, 0x00B0
    1c4e:	8f 7d       	andi	r24, 0xDF	; 223
    1c50:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    1c54:	e3 2f       	mov	r30, r19
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	ee 0f       	add	r30, r30
    1c5a:	ff 1f       	adc	r31, r31
    1c5c:	ee 5f       	subi	r30, 0xFE	; 254
    1c5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c60:	a5 91       	lpm	r26, Z+
    1c62:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1c64:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1c66:	f8 94       	cli

	if (val == LOW) {
    1c68:	66 23       	and	r22, r22
    1c6a:	21 f4       	brne	.+8      	; 0x1c74 <digitalWrite+0x9e>
		*out &= ~bit;
    1c6c:	8c 91       	ld	r24, X
    1c6e:	90 95       	com	r25
    1c70:	89 23       	and	r24, r25
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    1c74:	8c 91       	ld	r24, X
    1c76:	89 2b       	or	r24, r25
    1c78:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1c7a:	2f bf       	out	0x3f, r18	; 63
    1c7c:	08 95       	ret

00001c7e <_Z11serialEventv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
    1c7e:	08 95       	ret

00001c80 <__vector_18>:
    1c80:	1f 92       	push	r1
    1c82:	0f 92       	push	r0
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	0f 92       	push	r0
    1c88:	11 24       	eor	r1, r1
    1c8a:	2f 93       	push	r18
    1c8c:	3f 93       	push	r19
    1c8e:	4f 93       	push	r20
    1c90:	8f 93       	push	r24
    1c92:	9f 93       	push	r25
    1c94:	ef 93       	push	r30
    1c96:	ff 93       	push	r31
    1c98:	40 91 c6 00 	lds	r20, 0x00C6
    1c9c:	20 91 58 05 	lds	r18, 0x0558
    1ca0:	30 91 59 05 	lds	r19, 0x0559
    1ca4:	2f 5f       	subi	r18, 0xFF	; 255
    1ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca8:	2f 73       	andi	r18, 0x3F	; 63
    1caa:	30 70       	andi	r19, 0x00	; 0
    1cac:	80 91 5a 05 	lds	r24, 0x055A
    1cb0:	90 91 5b 05 	lds	r25, 0x055B
    1cb4:	28 17       	cp	r18, r24
    1cb6:	39 07       	cpc	r19, r25
    1cb8:	59 f0       	breq	.+22     	; 0x1cd0 <__vector_18+0x50>
    1cba:	e0 91 58 05 	lds	r30, 0x0558
    1cbe:	f0 91 59 05 	lds	r31, 0x0559
    1cc2:	e8 5e       	subi	r30, 0xE8	; 232
    1cc4:	fa 4f       	sbci	r31, 0xFA	; 250
    1cc6:	40 83       	st	Z, r20
    1cc8:	30 93 59 05 	sts	0x0559, r19
    1ccc:	20 93 58 05 	sts	0x0558, r18
    1cd0:	ff 91       	pop	r31
    1cd2:	ef 91       	pop	r30
    1cd4:	9f 91       	pop	r25
    1cd6:	8f 91       	pop	r24
    1cd8:	4f 91       	pop	r20
    1cda:	3f 91       	pop	r19
    1cdc:	2f 91       	pop	r18
    1cde:	0f 90       	pop	r0
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	0f 90       	pop	r0
    1ce4:	1f 90       	pop	r1
    1ce6:	18 95       	reti

00001ce8 <_Z14serialEventRunv>:
    1ce8:	e0 91 ac 05 	lds	r30, 0x05AC
    1cec:	f0 91 ad 05 	lds	r31, 0x05AD
    1cf0:	e0 5c       	subi	r30, 0xC0	; 192
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	81 91       	ld	r24, Z+
    1cf6:	91 91       	ld	r25, Z+
    1cf8:	20 81       	ld	r18, Z
    1cfa:	31 81       	ldd	r19, Z+1	; 0x01
    1cfc:	82 1b       	sub	r24, r18
    1cfe:	93 0b       	sbc	r25, r19
    1d00:	8f 73       	andi	r24, 0x3F	; 63
    1d02:	90 70       	andi	r25, 0x00	; 0
    1d04:	89 2b       	or	r24, r25
    1d06:	11 f0       	breq	.+4      	; 0x1d0c <_Z14serialEventRunv+0x24>
    1d08:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z11serialEventv>
    1d0c:	08 95       	ret

00001d0e <__vector_19>:
    1d0e:	1f 92       	push	r1
    1d10:	0f 92       	push	r0
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	0f 92       	push	r0
    1d16:	11 24       	eor	r1, r1
    1d18:	2f 93       	push	r18
    1d1a:	3f 93       	push	r19
    1d1c:	8f 93       	push	r24
    1d1e:	9f 93       	push	r25
    1d20:	ef 93       	push	r30
    1d22:	ff 93       	push	r31
    1d24:	20 91 9c 05 	lds	r18, 0x059C
    1d28:	30 91 9d 05 	lds	r19, 0x059D
    1d2c:	80 91 9e 05 	lds	r24, 0x059E
    1d30:	90 91 9f 05 	lds	r25, 0x059F
    1d34:	28 17       	cp	r18, r24
    1d36:	39 07       	cpc	r19, r25
    1d38:	31 f4       	brne	.+12     	; 0x1d46 <__vector_19+0x38>
    1d3a:	80 91 c1 00 	lds	r24, 0x00C1
    1d3e:	8f 7d       	andi	r24, 0xDF	; 223
    1d40:	80 93 c1 00 	sts	0x00C1, r24
    1d44:	14 c0       	rjmp	.+40     	; 0x1d6e <__vector_19+0x60>
    1d46:	e0 91 9e 05 	lds	r30, 0x059E
    1d4a:	f0 91 9f 05 	lds	r31, 0x059F
    1d4e:	e4 5a       	subi	r30, 0xA4	; 164
    1d50:	fa 4f       	sbci	r31, 0xFA	; 250
    1d52:	20 81       	ld	r18, Z
    1d54:	80 91 9e 05 	lds	r24, 0x059E
    1d58:	90 91 9f 05 	lds	r25, 0x059F
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    1d5e:	8f 73       	andi	r24, 0x3F	; 63
    1d60:	90 70       	andi	r25, 0x00	; 0
    1d62:	90 93 9f 05 	sts	0x059F, r25
    1d66:	80 93 9e 05 	sts	0x059E, r24
    1d6a:	20 93 c6 00 	sts	0x00C6, r18
    1d6e:	ff 91       	pop	r31
    1d70:	ef 91       	pop	r30
    1d72:	9f 91       	pop	r25
    1d74:	8f 91       	pop	r24
    1d76:	3f 91       	pop	r19
    1d78:	2f 91       	pop	r18
    1d7a:	0f 90       	pop	r0
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	0f 90       	pop	r0
    1d80:	1f 90       	pop	r1
    1d82:	18 95       	reti

00001d84 <_ZN14HardwareSerial5beginEm>:
    1d84:	af 92       	push	r10
    1d86:	bf 92       	push	r11
    1d88:	df 92       	push	r13
    1d8a:	ef 92       	push	r14
    1d8c:	ff 92       	push	r15
    1d8e:	0f 93       	push	r16
    1d90:	1f 93       	push	r17
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	ec 01       	movw	r28, r24
    1d98:	7a 01       	movw	r14, r20
    1d9a:	8b 01       	movw	r16, r22
    1d9c:	dd 24       	eor	r13, r13
    1d9e:	40 30       	cpi	r20, 0x00	; 0
    1da0:	81 ee       	ldi	r24, 0xE1	; 225
    1da2:	58 07       	cpc	r21, r24
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	68 07       	cpc	r22, r24
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	78 07       	cpc	r23, r24
    1dac:	11 f0       	breq	.+4      	; 0x1db2 <_ZN14HardwareSerial5beginEm+0x2e>
    1dae:	dd 24       	eor	r13, r13
    1db0:	d3 94       	inc	r13
    1db2:	91 e0       	ldi	r25, 0x01	; 1
    1db4:	a9 2e       	mov	r10, r25
    1db6:	b1 2c       	mov	r11, r1
    1db8:	ec 89       	ldd	r30, Y+20	; 0x14
    1dba:	fd 89       	ldd	r31, Y+21	; 0x15
    1dbc:	dd 20       	and	r13, r13
    1dbe:	69 f0       	breq	.+26     	; 0x1dda <_ZN14HardwareSerial5beginEm+0x56>
    1dc0:	c5 01       	movw	r24, r10
    1dc2:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <_ZN14HardwareSerial5beginEm+0x46>
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	0a 94       	dec	r0
    1dcc:	e2 f7       	brpl	.-8      	; 0x1dc6 <_ZN14HardwareSerial5beginEm+0x42>
    1dce:	80 83       	st	Z, r24
    1dd0:	60 e0       	ldi	r22, 0x00	; 0
    1dd2:	79 e0       	ldi	r23, 0x09	; 9
    1dd4:	8d e3       	ldi	r24, 0x3D	; 61
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	05 c0       	rjmp	.+10     	; 0x1de4 <_ZN14HardwareSerial5beginEm+0x60>
    1dda:	10 82       	st	Z, r1
    1ddc:	60 e8       	ldi	r22, 0x80	; 128
    1dde:	74 e8       	ldi	r23, 0x84	; 132
    1de0:	8e e1       	ldi	r24, 0x1E	; 30
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	a8 01       	movw	r20, r16
    1de6:	97 01       	movw	r18, r14
    1de8:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__udivmodsi4>
    1dec:	21 50       	subi	r18, 0x01	; 1
    1dee:	30 40       	sbci	r19, 0x00	; 0
    1df0:	40 40       	sbci	r20, 0x00	; 0
    1df2:	50 40       	sbci	r21, 0x00	; 0
    1df4:	56 95       	lsr	r21
    1df6:	47 95       	ror	r20
    1df8:	37 95       	ror	r19
    1dfa:	27 95       	ror	r18
    1dfc:	80 e1       	ldi	r24, 0x10	; 16
    1dfe:	20 30       	cpi	r18, 0x00	; 0
    1e00:	38 07       	cpc	r19, r24
    1e02:	20 f0       	brcs	.+8      	; 0x1e0c <_ZN14HardwareSerial5beginEm+0x88>
    1e04:	dd 20       	and	r13, r13
    1e06:	11 f0       	breq	.+4      	; 0x1e0c <_ZN14HardwareSerial5beginEm+0x88>
    1e08:	dd 24       	eor	r13, r13
    1e0a:	d6 cf       	rjmp	.-84     	; 0x1db8 <_ZN14HardwareSerial5beginEm+0x34>
    1e0c:	e8 89       	ldd	r30, Y+16	; 0x10
    1e0e:	f9 89       	ldd	r31, Y+17	; 0x11
    1e10:	30 83       	st	Z, r19
    1e12:	ea 89       	ldd	r30, Y+18	; 0x12
    1e14:	fb 89       	ldd	r31, Y+19	; 0x13
    1e16:	20 83       	st	Z, r18
    1e18:	ee 89       	ldd	r30, Y+22	; 0x16
    1e1a:	ff 89       	ldd	r31, Y+23	; 0x17
    1e1c:	40 81       	ld	r20, Z
    1e1e:	21 e0       	ldi	r18, 0x01	; 1
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	c9 01       	movw	r24, r18
    1e24:	0a 8c       	ldd	r0, Y+26	; 0x1a
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <_ZN14HardwareSerial5beginEm+0xa8>
    1e28:	88 0f       	add	r24, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	0a 94       	dec	r0
    1e2e:	e2 f7       	brpl	.-8      	; 0x1e28 <_ZN14HardwareSerial5beginEm+0xa4>
    1e30:	48 2b       	or	r20, r24
    1e32:	40 83       	st	Z, r20
    1e34:	ee 89       	ldd	r30, Y+22	; 0x16
    1e36:	ff 89       	ldd	r31, Y+23	; 0x17
    1e38:	40 81       	ld	r20, Z
    1e3a:	c9 01       	movw	r24, r18
    1e3c:	0b 8c       	ldd	r0, Y+27	; 0x1b
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <_ZN14HardwareSerial5beginEm+0xc0>
    1e40:	88 0f       	add	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	0a 94       	dec	r0
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <_ZN14HardwareSerial5beginEm+0xbc>
    1e48:	48 2b       	or	r20, r24
    1e4a:	40 83       	st	Z, r20
    1e4c:	ee 89       	ldd	r30, Y+22	; 0x16
    1e4e:	ff 89       	ldd	r31, Y+23	; 0x17
    1e50:	40 81       	ld	r20, Z
    1e52:	c9 01       	movw	r24, r18
    1e54:	0c 8c       	ldd	r0, Y+28	; 0x1c
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <_ZN14HardwareSerial5beginEm+0xd8>
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	0a 94       	dec	r0
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <_ZN14HardwareSerial5beginEm+0xd4>
    1e60:	48 2b       	or	r20, r24
    1e62:	40 83       	st	Z, r20
    1e64:	ee 89       	ldd	r30, Y+22	; 0x16
    1e66:	ff 89       	ldd	r31, Y+23	; 0x17
    1e68:	80 81       	ld	r24, Z
    1e6a:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <_ZN14HardwareSerial5beginEm+0xee>
    1e6e:	22 0f       	add	r18, r18
    1e70:	33 1f       	adc	r19, r19
    1e72:	0a 94       	dec	r0
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <_ZN14HardwareSerial5beginEm+0xea>
    1e76:	20 95       	com	r18
    1e78:	28 23       	and	r18, r24
    1e7a:	20 83       	st	Z, r18
    1e7c:	df 91       	pop	r29
    1e7e:	cf 91       	pop	r28
    1e80:	1f 91       	pop	r17
    1e82:	0f 91       	pop	r16
    1e84:	ff 90       	pop	r15
    1e86:	ef 90       	pop	r14
    1e88:	df 90       	pop	r13
    1e8a:	bf 90       	pop	r11
    1e8c:	af 90       	pop	r10
    1e8e:	08 95       	ret

00001e90 <_ZN14HardwareSerial9availableEv>:
    1e90:	dc 01       	movw	r26, r24
    1e92:	1c 96       	adiw	r26, 0x0c	; 12
    1e94:	ed 91       	ld	r30, X+
    1e96:	fc 91       	ld	r31, X
    1e98:	1d 97       	sbiw	r26, 0x0d	; 13
    1e9a:	e0 5c       	subi	r30, 0xC0	; 192
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	21 91       	ld	r18, Z+
    1ea0:	31 91       	ld	r19, Z+
    1ea2:	80 81       	ld	r24, Z
    1ea4:	91 81       	ldd	r25, Z+1	; 0x01
    1ea6:	28 1b       	sub	r18, r24
    1ea8:	39 0b       	sbc	r19, r25
    1eaa:	2f 73       	andi	r18, 0x3F	; 63
    1eac:	30 70       	andi	r19, 0x00	; 0
    1eae:	c9 01       	movw	r24, r18
    1eb0:	08 95       	ret

00001eb2 <_ZN14HardwareSerial4peekEv>:
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	1c 96       	adiw	r26, 0x0c	; 12
    1eb6:	ed 91       	ld	r30, X+
    1eb8:	fc 91       	ld	r31, X
    1eba:	1d 97       	sbiw	r26, 0x0d	; 13
    1ebc:	e0 5c       	subi	r30, 0xC0	; 192
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	20 81       	ld	r18, Z
    1ec2:	31 81       	ldd	r19, Z+1	; 0x01
    1ec4:	e0 54       	subi	r30, 0x40	; 64
    1ec6:	f0 40       	sbci	r31, 0x00	; 0
    1ec8:	df 01       	movw	r26, r30
    1eca:	ae 5b       	subi	r26, 0xBE	; 190
    1ecc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ece:	8d 91       	ld	r24, X+
    1ed0:	9c 91       	ld	r25, X
    1ed2:	11 97       	sbiw	r26, 0x01	; 1
    1ed4:	28 17       	cp	r18, r24
    1ed6:	39 07       	cpc	r19, r25
    1ed8:	19 f4       	brne	.+6      	; 0x1ee0 <_ZN14HardwareSerial4peekEv+0x2e>
    1eda:	2f ef       	ldi	r18, 0xFF	; 255
    1edc:	3f ef       	ldi	r19, 0xFF	; 255
    1ede:	07 c0       	rjmp	.+14     	; 0x1eee <_ZN14HardwareSerial4peekEv+0x3c>
    1ee0:	8d 91       	ld	r24, X+
    1ee2:	9c 91       	ld	r25, X
    1ee4:	e8 0f       	add	r30, r24
    1ee6:	f9 1f       	adc	r31, r25
    1ee8:	80 81       	ld	r24, Z
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	c9 01       	movw	r24, r18
    1ef0:	08 95       	ret

00001ef2 <_ZN14HardwareSerial4readEv>:
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	1c 96       	adiw	r26, 0x0c	; 12
    1ef6:	ed 91       	ld	r30, X+
    1ef8:	fc 91       	ld	r31, X
    1efa:	1d 97       	sbiw	r26, 0x0d	; 13
    1efc:	e0 5c       	subi	r30, 0xC0	; 192
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	20 81       	ld	r18, Z
    1f02:	31 81       	ldd	r19, Z+1	; 0x01
    1f04:	e0 54       	subi	r30, 0x40	; 64
    1f06:	f0 40       	sbci	r31, 0x00	; 0
    1f08:	df 01       	movw	r26, r30
    1f0a:	ae 5b       	subi	r26, 0xBE	; 190
    1f0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f0e:	8d 91       	ld	r24, X+
    1f10:	9c 91       	ld	r25, X
    1f12:	11 97       	sbiw	r26, 0x01	; 1
    1f14:	28 17       	cp	r18, r24
    1f16:	39 07       	cpc	r19, r25
    1f18:	19 f4       	brne	.+6      	; 0x1f20 <_ZN14HardwareSerial4readEv+0x2e>
    1f1a:	2f ef       	ldi	r18, 0xFF	; 255
    1f1c:	3f ef       	ldi	r19, 0xFF	; 255
    1f1e:	10 c0       	rjmp	.+32     	; 0x1f40 <_ZN14HardwareSerial4readEv+0x4e>
    1f20:	8d 91       	ld	r24, X+
    1f22:	9c 91       	ld	r25, X
    1f24:	11 97       	sbiw	r26, 0x01	; 1
    1f26:	e8 0f       	add	r30, r24
    1f28:	f9 1f       	adc	r31, r25
    1f2a:	20 81       	ld	r18, Z
    1f2c:	8d 91       	ld	r24, X+
    1f2e:	9c 91       	ld	r25, X
    1f30:	11 97       	sbiw	r26, 0x01	; 1
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	8f 73       	andi	r24, 0x3F	; 63
    1f36:	90 70       	andi	r25, 0x00	; 0
    1f38:	11 96       	adiw	r26, 0x01	; 1
    1f3a:	9c 93       	st	X, r25
    1f3c:	8e 93       	st	-X, r24
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	c9 01       	movw	r24, r18
    1f42:	08 95       	ret

00001f44 <_ZN14HardwareSerial5flushEv>:
    1f44:	fc 01       	movw	r30, r24
    1f46:	86 85       	ldd	r24, Z+14	; 0x0e
    1f48:	97 85       	ldd	r25, Z+15	; 0x0f
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	a0 5c       	subi	r26, 0xC0	; 192
    1f4e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f50:	fc 01       	movw	r30, r24
    1f52:	ee 5b       	subi	r30, 0xBE	; 190
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	2d 91       	ld	r18, X+
    1f58:	3c 91       	ld	r19, X
    1f5a:	11 97       	sbiw	r26, 0x01	; 1
    1f5c:	80 81       	ld	r24, Z
    1f5e:	91 81       	ldd	r25, Z+1	; 0x01
    1f60:	28 17       	cp	r18, r24
    1f62:	39 07       	cpc	r19, r25
    1f64:	c1 f7       	brne	.-16     	; 0x1f56 <_ZN14HardwareSerial5flushEv+0x12>
    1f66:	08 95       	ret

00001f68 <_ZN14HardwareSerial5writeEh>:
    1f68:	cf 93       	push	r28
    1f6a:	df 93       	push	r29
    1f6c:	ec 01       	movw	r28, r24
    1f6e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f70:	ff 85       	ldd	r31, Y+15	; 0x0f
    1f72:	e0 5c       	subi	r30, 0xC0	; 192
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	20 81       	ld	r18, Z
    1f78:	31 81       	ldd	r19, Z+1	; 0x01
    1f7a:	e0 54       	subi	r30, 0x40	; 64
    1f7c:	f0 40       	sbci	r31, 0x00	; 0
    1f7e:	2f 5f       	subi	r18, 0xFF	; 255
    1f80:	3f 4f       	sbci	r19, 0xFF	; 255
    1f82:	2f 73       	andi	r18, 0x3F	; 63
    1f84:	30 70       	andi	r19, 0x00	; 0
    1f86:	df 01       	movw	r26, r30
    1f88:	ae 5b       	subi	r26, 0xBE	; 190
    1f8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f8c:	8d 91       	ld	r24, X+
    1f8e:	9c 91       	ld	r25, X
    1f90:	11 97       	sbiw	r26, 0x01	; 1
    1f92:	28 17       	cp	r18, r24
    1f94:	39 07       	cpc	r19, r25
    1f96:	d1 f3       	breq	.-12     	; 0x1f8c <_ZN14HardwareSerial5writeEh+0x24>
    1f98:	e0 5c       	subi	r30, 0xC0	; 192
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 81       	ld	r24, Z
    1f9e:	91 81       	ldd	r25, Z+1	; 0x01
    1fa0:	e0 54       	subi	r30, 0x40	; 64
    1fa2:	f0 40       	sbci	r31, 0x00	; 0
    1fa4:	e8 0f       	add	r30, r24
    1fa6:	f9 1f       	adc	r31, r25
    1fa8:	60 83       	st	Z, r22
    1faa:	ee 85       	ldd	r30, Y+14	; 0x0e
    1fac:	ff 85       	ldd	r31, Y+15	; 0x0f
    1fae:	e0 5c       	subi	r30, 0xC0	; 192
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	31 83       	std	Z+1, r19	; 0x01
    1fb4:	20 83       	st	Z, r18
    1fb6:	ee 89       	ldd	r30, Y+22	; 0x16
    1fb8:	ff 89       	ldd	r31, Y+23	; 0x17
    1fba:	20 81       	ld	r18, Z
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <_ZN14HardwareSerial5writeEh+0x60>
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	0a 94       	dec	r0
    1fca:	e2 f7       	brpl	.-8      	; 0x1fc4 <_ZN14HardwareSerial5writeEh+0x5c>
    1fcc:	28 2b       	or	r18, r24
    1fce:	20 83       	st	Z, r18
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
    1fd8:	08 95       	ret

00001fda <_GLOBAL__I_rx_buffer>:
    1fda:	10 92 a3 05 	sts	0x05A3, r1
    1fde:	10 92 a2 05 	sts	0x05A2, r1
    1fe2:	88 ee       	ldi	r24, 0xE8	; 232
    1fe4:	93 e0       	ldi	r25, 0x03	; 3
    1fe6:	a0 e0       	ldi	r26, 0x00	; 0
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	80 93 a4 05 	sts	0x05A4, r24
    1fee:	90 93 a5 05 	sts	0x05A5, r25
    1ff2:	a0 93 a6 05 	sts	0x05A6, r26
    1ff6:	b0 93 a7 05 	sts	0x05A7, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1ffa:	86 ee       	ldi	r24, 0xE6	; 230
    1ffc:	93 e0       	ldi	r25, 0x03	; 3
    1ffe:	90 93 a1 05 	sts	0x05A1, r25
    2002:	80 93 a0 05 	sts	0x05A0, r24
{
  _rx_buffer = rx_buffer;
    2006:	88 e1       	ldi	r24, 0x18	; 24
    2008:	95 e0       	ldi	r25, 0x05	; 5
    200a:	90 93 ad 05 	sts	0x05AD, r25
    200e:	80 93 ac 05 	sts	0x05AC, r24
  _tx_buffer = tx_buffer;
    2012:	8c e5       	ldi	r24, 0x5C	; 92
    2014:	95 e0       	ldi	r25, 0x05	; 5
    2016:	90 93 af 05 	sts	0x05AF, r25
    201a:	80 93 ae 05 	sts	0x05AE, r24
  _ubrrh = ubrrh;
    201e:	85 ec       	ldi	r24, 0xC5	; 197
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	90 93 b1 05 	sts	0x05B1, r25
    2026:	80 93 b0 05 	sts	0x05B0, r24
  _ubrrl = ubrrl;
    202a:	84 ec       	ldi	r24, 0xC4	; 196
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	90 93 b3 05 	sts	0x05B3, r25
    2032:	80 93 b2 05 	sts	0x05B2, r24
  _ucsra = ucsra;
    2036:	80 ec       	ldi	r24, 0xC0	; 192
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	90 93 b5 05 	sts	0x05B5, r25
    203e:	80 93 b4 05 	sts	0x05B4, r24
  _ucsrb = ucsrb;
    2042:	81 ec       	ldi	r24, 0xC1	; 193
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	90 93 b7 05 	sts	0x05B7, r25
    204a:	80 93 b6 05 	sts	0x05B6, r24
  _udr = udr;
    204e:	86 ec       	ldi	r24, 0xC6	; 198
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	90 93 b9 05 	sts	0x05B9, r25
    2056:	80 93 b8 05 	sts	0x05B8, r24
  _rxen = rxen;
    205a:	84 e0       	ldi	r24, 0x04	; 4
    205c:	80 93 ba 05 	sts	0x05BA, r24
  _txen = txen;
    2060:	83 e0       	ldi	r24, 0x03	; 3
    2062:	80 93 bb 05 	sts	0x05BB, r24
  _rxcie = rxcie;
    2066:	87 e0       	ldi	r24, 0x07	; 7
    2068:	80 93 bc 05 	sts	0x05BC, r24
  _udrie = udrie;
    206c:	85 e0       	ldi	r24, 0x05	; 5
    206e:	80 93 bd 05 	sts	0x05BD, r24
  _u2x = u2x;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	80 93 be 05 	sts	0x05BE, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    2078:	08 95       	ret

0000207a <main>:
#include <Arduino.h>

int main(void)
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
{
	init();
    207e:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2082:	0e 94 24 0b 	call	0x1648	; 0x1648 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2086:	c4 e7       	ldi	r28, 0x74	; 116
    2088:	de e0       	ldi	r29, 0x0E	; 14
#endif
	
	setup();
    
	for (;;) {
		loop();
    208a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <loop>
		if (serialEventRun) serialEventRun();
    208e:	20 97       	sbiw	r28, 0x00	; 0
    2090:	e1 f3       	breq	.-8      	; 0x208a <main+0x10>
    2092:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_Z14serialEventRunv>
    2096:	f9 cf       	rjmp	.-14     	; 0x208a <main+0x10>

00002098 <__cxa_pure_virtual>:
}

void operator delete(void * ptr)
{
  free(ptr);
} 
    2098:	08 95       	ret

0000209a <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
    209a:	0e 94 16 12 	call	0x242c	; 0x242c <malloc>
}
    209e:	08 95       	ret

000020a0 <_ZN5Print5writeEPKhj>:
size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  return n;
}
    20a0:	cf 92       	push	r12
    20a2:	df 92       	push	r13
    20a4:	ef 92       	push	r14
    20a6:	ff 92       	push	r15
    20a8:	0f 93       	push	r16
    20aa:	1f 93       	push	r17
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	7c 01       	movw	r14, r24
    20b2:	6b 01       	movw	r12, r22
    20b4:	8a 01       	movw	r16, r20
    20b6:	c0 e0       	ldi	r28, 0x00	; 0
    20b8:	d0 e0       	ldi	r29, 0x00	; 0
    20ba:	0f c0       	rjmp	.+30     	; 0x20da <_ZN5Print5writeEPKhj+0x3a>
    20bc:	d6 01       	movw	r26, r12
    20be:	6d 91       	ld	r22, X+
    20c0:	6d 01       	movw	r12, r26
    20c2:	d7 01       	movw	r26, r14
    20c4:	ed 91       	ld	r30, X+
    20c6:	fc 91       	ld	r31, X
    20c8:	01 90       	ld	r0, Z+
    20ca:	f0 81       	ld	r31, Z
    20cc:	e0 2d       	mov	r30, r0
    20ce:	c7 01       	movw	r24, r14
    20d0:	09 95       	icall
    20d2:	c8 0f       	add	r28, r24
    20d4:	d9 1f       	adc	r29, r25
    20d6:	01 50       	subi	r16, 0x01	; 1
    20d8:	10 40       	sbci	r17, 0x00	; 0
    20da:	01 15       	cp	r16, r1
    20dc:	11 05       	cpc	r17, r1
    20de:	71 f7       	brne	.-36     	; 0x20bc <_ZN5Print5writeEPKhj+0x1c>
    20e0:	ce 01       	movw	r24, r28
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	1f 91       	pop	r17
    20e8:	0f 91       	pop	r16
    20ea:	ff 90       	pop	r15
    20ec:	ef 90       	pop	r14
    20ee:	df 90       	pop	r13
    20f0:	cf 90       	pop	r12
    20f2:	08 95       	ret

000020f4 <_ZN5Print7printlnEv>:
    20f4:	ef 92       	push	r14
    20f6:	ff 92       	push	r15
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	8c 01       	movw	r16, r24
    20fe:	dc 01       	movw	r26, r24
    2100:	ed 91       	ld	r30, X+
    2102:	fc 91       	ld	r31, X
    2104:	01 90       	ld	r0, Z+
    2106:	f0 81       	ld	r31, Z
    2108:	e0 2d       	mov	r30, r0
    210a:	6d e0       	ldi	r22, 0x0D	; 13
    210c:	09 95       	icall
    210e:	7c 01       	movw	r14, r24
    2110:	d8 01       	movw	r26, r16
    2112:	ed 91       	ld	r30, X+
    2114:	fc 91       	ld	r31, X
    2116:	01 90       	ld	r0, Z+
    2118:	f0 81       	ld	r31, Z
    211a:	e0 2d       	mov	r30, r0
    211c:	c8 01       	movw	r24, r16
    211e:	6a e0       	ldi	r22, 0x0A	; 10
    2120:	09 95       	icall
    2122:	9c 01       	movw	r18, r24
    2124:	2e 0d       	add	r18, r14
    2126:	3f 1d       	adc	r19, r15
    2128:	c9 01       	movw	r24, r18
    212a:	1f 91       	pop	r17
    212c:	0f 91       	pop	r16
    212e:	ff 90       	pop	r15
    2130:	ef 90       	pop	r14
    2132:	08 95       	ret

00002134 <_ZN5Print5writeEPKc>:
    2134:	cf 93       	push	r28
    2136:	df 93       	push	r29
    2138:	db 01       	movw	r26, r22
    213a:	0d 90       	ld	r0, X+
    213c:	00 20       	and	r0, r0
    213e:	e9 f7       	brne	.-6      	; 0x213a <_ZN5Print5writeEPKc+0x6>
    2140:	11 97       	sbiw	r26, 0x01	; 1
    2142:	a6 1b       	sub	r26, r22
    2144:	b7 0b       	sbc	r27, r23
    2146:	ec 01       	movw	r28, r24
    2148:	e8 81       	ld	r30, Y
    214a:	f9 81       	ldd	r31, Y+1	; 0x01
    214c:	02 80       	ldd	r0, Z+2	; 0x02
    214e:	f3 81       	ldd	r31, Z+3	; 0x03
    2150:	e0 2d       	mov	r30, r0
    2152:	ad 01       	movw	r20, r26
    2154:	09 95       	icall
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	08 95       	ret

0000215c <_ZN5Print11printNumberEmh>:
    215c:	4f 92       	push	r4
    215e:	5f 92       	push	r5
    2160:	7f 92       	push	r7
    2162:	8f 92       	push	r8
    2164:	9f 92       	push	r9
    2166:	af 92       	push	r10
    2168:	bf 92       	push	r11
    216a:	cf 92       	push	r12
    216c:	df 92       	push	r13
    216e:	ef 92       	push	r14
    2170:	ff 92       	push	r15
    2172:	0f 93       	push	r16
    2174:	1f 93       	push	r17
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	a1 97       	sbiw	r28, 0x21	; 33
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	2c 01       	movw	r4, r24
    218c:	74 2e       	mov	r7, r20
    218e:	cb 01       	movw	r24, r22
    2190:	22 30       	cpi	r18, 0x02	; 2
    2192:	08 f4       	brcc	.+2      	; 0x2196 <_ZN5Print11printNumberEmh+0x3a>
    2194:	2a e0       	ldi	r18, 0x0A	; 10
    2196:	19 a2       	lds	r17, 0x99
    2198:	31 e2       	ldi	r19, 0x21	; 33
    219a:	c3 2e       	mov	r12, r19
    219c:	d1 2c       	mov	r13, r1
    219e:	cc 0e       	add	r12, r28
    21a0:	dd 1e       	adc	r13, r29
    21a2:	82 2e       	mov	r8, r18
    21a4:	99 24       	eor	r9, r9
    21a6:	aa 24       	eor	r10, r10
    21a8:	bb 24       	eor	r11, r11
    21aa:	67 2d       	mov	r22, r7
    21ac:	75 2f       	mov	r23, r21
    21ae:	a5 01       	movw	r20, r10
    21b0:	94 01       	movw	r18, r8
    21b2:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__udivmodsi4>
    21b6:	79 01       	movw	r14, r18
    21b8:	8a 01       	movw	r16, r20
    21ba:	c8 01       	movw	r24, r16
    21bc:	b7 01       	movw	r22, r14
    21be:	a5 01       	movw	r20, r10
    21c0:	94 01       	movw	r18, r8
    21c2:	0e 94 a8 11 	call	0x2350	; 0x2350 <__mulsi3>
    21c6:	47 2d       	mov	r20, r7
    21c8:	46 1b       	sub	r20, r22
    21ca:	08 94       	sec
    21cc:	c1 08       	sbc	r12, r1
    21ce:	d1 08       	sbc	r13, r1
    21d0:	4a 30       	cpi	r20, 0x0A	; 10
    21d2:	14 f4       	brge	.+4      	; 0x21d8 <_ZN5Print11printNumberEmh+0x7c>
    21d4:	40 5d       	subi	r20, 0xD0	; 208
    21d6:	01 c0       	rjmp	.+2      	; 0x21da <_ZN5Print11printNumberEmh+0x7e>
    21d8:	49 5c       	subi	r20, 0xC9	; 201
    21da:	f6 01       	movw	r30, r12
    21dc:	40 83       	st	Z, r20
    21de:	e1 14       	cp	r14, r1
    21e0:	f1 04       	cpc	r15, r1
    21e2:	01 05       	cpc	r16, r1
    21e4:	11 05       	cpc	r17, r1
    21e6:	21 f0       	breq	.+8      	; 0x21f0 <_ZN5Print11printNumberEmh+0x94>
    21e8:	7e 2c       	mov	r7, r14
    21ea:	5f 2d       	mov	r21, r15
    21ec:	c8 01       	movw	r24, r16
    21ee:	dd cf       	rjmp	.-70     	; 0x21aa <_ZN5Print11printNumberEmh+0x4e>
    21f0:	c2 01       	movw	r24, r4
    21f2:	b6 01       	movw	r22, r12
    21f4:	0e 94 9a 10 	call	0x2134	; 0x2134 <_ZN5Print5writeEPKc>
    21f8:	a1 96       	adiw	r28, 0x21	; 33
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	1f 91       	pop	r17
    220a:	0f 91       	pop	r16
    220c:	ff 90       	pop	r15
    220e:	ef 90       	pop	r14
    2210:	df 90       	pop	r13
    2212:	cf 90       	pop	r12
    2214:	bf 90       	pop	r11
    2216:	af 90       	pop	r10
    2218:	9f 90       	pop	r9
    221a:	8f 90       	pop	r8
    221c:	7f 90       	pop	r7
    221e:	5f 90       	pop	r5
    2220:	4f 90       	pop	r4
    2222:	08 95       	ret

00002224 <_ZN5Print5printEmi>:
    2224:	dc 01       	movw	r26, r24
    2226:	21 15       	cp	r18, r1
    2228:	31 05       	cpc	r19, r1
    222a:	41 f4       	brne	.+16     	; 0x223c <_ZN5Print5printEmi+0x18>
    222c:	ed 91       	ld	r30, X+
    222e:	fc 91       	ld	r31, X
    2230:	01 90       	ld	r0, Z+
    2232:	f0 81       	ld	r31, Z
    2234:	e0 2d       	mov	r30, r0
    2236:	64 2f       	mov	r22, r20
    2238:	09 95       	icall
    223a:	08 95       	ret
    223c:	0e 94 ae 10 	call	0x215c	; 0x215c <_ZN5Print11printNumberEmh>
    2240:	08 95       	ret

00002242 <_ZN5Print7printlnEhi>:
    2242:	cf 92       	push	r12
    2244:	df 92       	push	r13
    2246:	ef 92       	push	r14
    2248:	ff 92       	push	r15
    224a:	0f 93       	push	r16
    224c:	1f 93       	push	r17
    224e:	6c 01       	movw	r12, r24
    2250:	e6 2e       	mov	r14, r22
    2252:	9a 01       	movw	r18, r20
    2254:	ff 24       	eor	r15, r15
    2256:	00 e0       	ldi	r16, 0x00	; 0
    2258:	10 e0       	ldi	r17, 0x00	; 0
    225a:	b8 01       	movw	r22, r16
    225c:	a7 01       	movw	r20, r14
    225e:	0e 94 12 11 	call	0x2224	; 0x2224 <_ZN5Print5printEmi>
    2262:	8c 01       	movw	r16, r24
    2264:	c6 01       	movw	r24, r12
    2266:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN5Print7printlnEv>
    226a:	08 0f       	add	r16, r24
    226c:	19 1f       	adc	r17, r25
    226e:	c8 01       	movw	r24, r16
    2270:	1f 91       	pop	r17
    2272:	0f 91       	pop	r16
    2274:	ff 90       	pop	r15
    2276:	ef 90       	pop	r14
    2278:	df 90       	pop	r13
    227a:	cf 90       	pop	r12
    227c:	08 95       	ret

0000227e <_ZN5Print5printEli>:
    227e:	cf 92       	push	r12
    2280:	df 92       	push	r13
    2282:	ef 92       	push	r14
    2284:	ff 92       	push	r15
    2286:	0f 93       	push	r16
    2288:	1f 93       	push	r17
    228a:	cf 93       	push	r28
    228c:	df 93       	push	r29
    228e:	ec 01       	movw	r28, r24
    2290:	6a 01       	movw	r12, r20
    2292:	7b 01       	movw	r14, r22
    2294:	21 15       	cp	r18, r1
    2296:	31 05       	cpc	r19, r1
    2298:	41 f4       	brne	.+16     	; 0x22aa <_ZN5Print5printEli+0x2c>
    229a:	e8 81       	ld	r30, Y
    229c:	f9 81       	ldd	r31, Y+1	; 0x01
    229e:	01 90       	ld	r0, Z+
    22a0:	f0 81       	ld	r31, Z
    22a2:	e0 2d       	mov	r30, r0
    22a4:	64 2f       	mov	r22, r20
    22a6:	09 95       	icall
    22a8:	1f c0       	rjmp	.+62     	; 0x22e8 <_ZN5Print5printEli+0x6a>
    22aa:	2a 30       	cpi	r18, 0x0A	; 10
    22ac:	31 05       	cpc	r19, r1
    22ae:	d1 f4       	brne	.+52     	; 0x22e4 <_ZN5Print5printEli+0x66>
    22b0:	77 ff       	sbrs	r23, 7
    22b2:	17 c0       	rjmp	.+46     	; 0x22e2 <_ZN5Print5printEli+0x64>
    22b4:	e8 81       	ld	r30, Y
    22b6:	f9 81       	ldd	r31, Y+1	; 0x01
    22b8:	01 90       	ld	r0, Z+
    22ba:	f0 81       	ld	r31, Z
    22bc:	e0 2d       	mov	r30, r0
    22be:	6d e2       	ldi	r22, 0x2D	; 45
    22c0:	09 95       	icall
    22c2:	8c 01       	movw	r16, r24
    22c4:	44 27       	eor	r20, r20
    22c6:	55 27       	eor	r21, r21
    22c8:	ba 01       	movw	r22, r20
    22ca:	4c 19       	sub	r20, r12
    22cc:	5d 09       	sbc	r21, r13
    22ce:	6e 09       	sbc	r22, r14
    22d0:	7f 09       	sbc	r23, r15
    22d2:	ce 01       	movw	r24, r28
    22d4:	2a e0       	ldi	r18, 0x0A	; 10
    22d6:	0e 94 ae 10 	call	0x215c	; 0x215c <_ZN5Print11printNumberEmh>
    22da:	98 01       	movw	r18, r16
    22dc:	28 0f       	add	r18, r24
    22de:	39 1f       	adc	r19, r25
    22e0:	04 c0       	rjmp	.+8      	; 0x22ea <_ZN5Print5printEli+0x6c>
    22e2:	2a e0       	ldi	r18, 0x0A	; 10
    22e4:	0e 94 ae 10 	call	0x215c	; 0x215c <_ZN5Print11printNumberEmh>
    22e8:	9c 01       	movw	r18, r24
    22ea:	c9 01       	movw	r24, r18
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	1f 91       	pop	r17
    22f2:	0f 91       	pop	r16
    22f4:	ff 90       	pop	r15
    22f6:	ef 90       	pop	r14
    22f8:	df 90       	pop	r13
    22fa:	cf 90       	pop	r12
    22fc:	08 95       	ret

000022fe <_ZN5Print5printEii>:
    22fe:	ef 92       	push	r14
    2300:	ff 92       	push	r15
    2302:	0f 93       	push	r16
    2304:	1f 93       	push	r17
    2306:	7b 01       	movw	r14, r22
    2308:	9a 01       	movw	r18, r20
    230a:	00 27       	eor	r16, r16
    230c:	f7 fc       	sbrc	r15, 7
    230e:	00 95       	com	r16
    2310:	10 2f       	mov	r17, r16
    2312:	b8 01       	movw	r22, r16
    2314:	a7 01       	movw	r20, r14
    2316:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print5printEli>
    231a:	1f 91       	pop	r17
    231c:	0f 91       	pop	r16
    231e:	ff 90       	pop	r15
    2320:	ef 90       	pop	r14
    2322:	08 95       	ret

00002324 <_ZN5Print5printEPKc>:
    2324:	0e 94 9a 10 	call	0x2134	; 0x2134 <_ZN5Print5writeEPKc>
    2328:	08 95       	ret

0000232a <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    232a:	ef 92       	push	r14
    232c:	ff 92       	push	r15
    232e:	0f 93       	push	r16
    2330:	1f 93       	push	r17
    2332:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    2334:	0e 94 9a 10 	call	0x2134	; 0x2134 <_ZN5Print5writeEPKc>
    2338:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    233a:	c7 01       	movw	r24, r14
    233c:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN5Print7printlnEv>
    2340:	08 0f       	add	r16, r24
    2342:	19 1f       	adc	r17, r25
  return n;
}
    2344:	c8 01       	movw	r24, r16
    2346:	1f 91       	pop	r17
    2348:	0f 91       	pop	r16
    234a:	ff 90       	pop	r15
    234c:	ef 90       	pop	r14
    234e:	08 95       	ret

00002350 <__mulsi3>:
    2350:	62 9f       	mul	r22, r18
    2352:	d0 01       	movw	r26, r0
    2354:	73 9f       	mul	r23, r19
    2356:	f0 01       	movw	r30, r0
    2358:	82 9f       	mul	r24, r18
    235a:	e0 0d       	add	r30, r0
    235c:	f1 1d       	adc	r31, r1
    235e:	64 9f       	mul	r22, r20
    2360:	e0 0d       	add	r30, r0
    2362:	f1 1d       	adc	r31, r1
    2364:	92 9f       	mul	r25, r18
    2366:	f0 0d       	add	r31, r0
    2368:	83 9f       	mul	r24, r19
    236a:	f0 0d       	add	r31, r0
    236c:	74 9f       	mul	r23, r20
    236e:	f0 0d       	add	r31, r0
    2370:	65 9f       	mul	r22, r21
    2372:	f0 0d       	add	r31, r0
    2374:	99 27       	eor	r25, r25
    2376:	72 9f       	mul	r23, r18
    2378:	b0 0d       	add	r27, r0
    237a:	e1 1d       	adc	r30, r1
    237c:	f9 1f       	adc	r31, r25
    237e:	63 9f       	mul	r22, r19
    2380:	b0 0d       	add	r27, r0
    2382:	e1 1d       	adc	r30, r1
    2384:	f9 1f       	adc	r31, r25
    2386:	bd 01       	movw	r22, r26
    2388:	cf 01       	movw	r24, r30
    238a:	11 24       	eor	r1, r1
    238c:	08 95       	ret

0000238e <__divmodhi4>:
    238e:	97 fb       	bst	r25, 7
    2390:	09 2e       	mov	r0, r25
    2392:	07 26       	eor	r0, r23
    2394:	0a d0       	rcall	.+20     	; 0x23aa <__divmodhi4_neg1>
    2396:	77 fd       	sbrc	r23, 7
    2398:	04 d0       	rcall	.+8      	; 0x23a2 <__divmodhi4_neg2>
    239a:	2e d0       	rcall	.+92     	; 0x23f8 <__udivmodhi4>
    239c:	06 d0       	rcall	.+12     	; 0x23aa <__divmodhi4_neg1>
    239e:	00 20       	and	r0, r0
    23a0:	1a f4       	brpl	.+6      	; 0x23a8 <__divmodhi4_exit>

000023a2 <__divmodhi4_neg2>:
    23a2:	70 95       	com	r23
    23a4:	61 95       	neg	r22
    23a6:	7f 4f       	sbci	r23, 0xFF	; 255

000023a8 <__divmodhi4_exit>:
    23a8:	08 95       	ret

000023aa <__divmodhi4_neg1>:
    23aa:	f6 f7       	brtc	.-4      	; 0x23a8 <__divmodhi4_exit>
    23ac:	90 95       	com	r25
    23ae:	81 95       	neg	r24
    23b0:	9f 4f       	sbci	r25, 0xFF	; 255
    23b2:	08 95       	ret

000023b4 <__udivmodsi4>:
    23b4:	a1 e2       	ldi	r26, 0x21	; 33
    23b6:	1a 2e       	mov	r1, r26
    23b8:	aa 1b       	sub	r26, r26
    23ba:	bb 1b       	sub	r27, r27
    23bc:	fd 01       	movw	r30, r26
    23be:	0d c0       	rjmp	.+26     	; 0x23da <__udivmodsi4_ep>

000023c0 <__udivmodsi4_loop>:
    23c0:	aa 1f       	adc	r26, r26
    23c2:	bb 1f       	adc	r27, r27
    23c4:	ee 1f       	adc	r30, r30
    23c6:	ff 1f       	adc	r31, r31
    23c8:	a2 17       	cp	r26, r18
    23ca:	b3 07       	cpc	r27, r19
    23cc:	e4 07       	cpc	r30, r20
    23ce:	f5 07       	cpc	r31, r21
    23d0:	20 f0       	brcs	.+8      	; 0x23da <__udivmodsi4_ep>
    23d2:	a2 1b       	sub	r26, r18
    23d4:	b3 0b       	sbc	r27, r19
    23d6:	e4 0b       	sbc	r30, r20
    23d8:	f5 0b       	sbc	r31, r21

000023da <__udivmodsi4_ep>:
    23da:	66 1f       	adc	r22, r22
    23dc:	77 1f       	adc	r23, r23
    23de:	88 1f       	adc	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	1a 94       	dec	r1
    23e4:	69 f7       	brne	.-38     	; 0x23c0 <__udivmodsi4_loop>
    23e6:	60 95       	com	r22
    23e8:	70 95       	com	r23
    23ea:	80 95       	com	r24
    23ec:	90 95       	com	r25
    23ee:	9b 01       	movw	r18, r22
    23f0:	ac 01       	movw	r20, r24
    23f2:	bd 01       	movw	r22, r26
    23f4:	cf 01       	movw	r24, r30
    23f6:	08 95       	ret

000023f8 <__udivmodhi4>:
    23f8:	aa 1b       	sub	r26, r26
    23fa:	bb 1b       	sub	r27, r27
    23fc:	51 e1       	ldi	r21, 0x11	; 17
    23fe:	07 c0       	rjmp	.+14     	; 0x240e <__udivmodhi4_ep>

00002400 <__udivmodhi4_loop>:
    2400:	aa 1f       	adc	r26, r26
    2402:	bb 1f       	adc	r27, r27
    2404:	a6 17       	cp	r26, r22
    2406:	b7 07       	cpc	r27, r23
    2408:	10 f0       	brcs	.+4      	; 0x240e <__udivmodhi4_ep>
    240a:	a6 1b       	sub	r26, r22
    240c:	b7 0b       	sbc	r27, r23

0000240e <__udivmodhi4_ep>:
    240e:	88 1f       	adc	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	5a 95       	dec	r21
    2414:	a9 f7       	brne	.-22     	; 0x2400 <__udivmodhi4_loop>
    2416:	80 95       	com	r24
    2418:	90 95       	com	r25
    241a:	bc 01       	movw	r22, r24
    241c:	cd 01       	movw	r24, r26
    241e:	08 95       	ret

00002420 <__tablejump2__>:
    2420:	ee 0f       	add	r30, r30
    2422:	ff 1f       	adc	r31, r31

00002424 <__tablejump__>:
    2424:	05 90       	lpm	r0, Z+
    2426:	f4 91       	lpm	r31, Z
    2428:	e0 2d       	mov	r30, r0
    242a:	09 94       	ijmp

0000242c <malloc>:
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
    2430:	ac 01       	movw	r20, r24
    2432:	82 30       	cpi	r24, 0x02	; 2
    2434:	91 05       	cpc	r25, r1
    2436:	10 f4       	brcc	.+4      	; 0x243c <malloc+0x10>
    2438:	42 e0       	ldi	r20, 0x02	; 2
    243a:	50 e0       	ldi	r21, 0x00	; 0
    243c:	e0 91 c1 05 	lds	r30, 0x05C1
    2440:	f0 91 c2 05 	lds	r31, 0x05C2
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	a0 e0       	ldi	r26, 0x00	; 0
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	24 c0       	rjmp	.+72     	; 0x2496 <malloc+0x6a>
    244e:	80 81       	ld	r24, Z
    2450:	91 81       	ldd	r25, Z+1	; 0x01
    2452:	84 17       	cp	r24, r20
    2454:	95 07       	cpc	r25, r21
    2456:	d0 f0       	brcs	.+52     	; 0x248c <malloc+0x60>
    2458:	84 17       	cp	r24, r20
    245a:	95 07       	cpc	r25, r21
    245c:	71 f4       	brne	.+28     	; 0x247a <malloc+0x4e>
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	10 97       	sbiw	r26, 0x00	; 0
    2464:	29 f0       	breq	.+10     	; 0x2470 <malloc+0x44>
    2466:	13 96       	adiw	r26, 0x03	; 3
    2468:	9c 93       	st	X, r25
    246a:	8e 93       	st	-X, r24
    246c:	12 97       	sbiw	r26, 0x02	; 2
    246e:	2c c0       	rjmp	.+88     	; 0x24c8 <malloc+0x9c>
    2470:	90 93 c2 05 	sts	0x05C2, r25
    2474:	80 93 c1 05 	sts	0x05C1, r24
    2478:	27 c0       	rjmp	.+78     	; 0x24c8 <malloc+0x9c>
    247a:	21 15       	cp	r18, r1
    247c:	31 05       	cpc	r19, r1
    247e:	19 f0       	breq	.+6      	; 0x2486 <malloc+0x5a>
    2480:	82 17       	cp	r24, r18
    2482:	93 07       	cpc	r25, r19
    2484:	18 f4       	brcc	.+6      	; 0x248c <malloc+0x60>
    2486:	9c 01       	movw	r18, r24
    2488:	bd 01       	movw	r22, r26
    248a:	ef 01       	movw	r28, r30
    248c:	92 81       	ldd	r25, Z+2	; 0x02
    248e:	83 81       	ldd	r24, Z+3	; 0x03
    2490:	df 01       	movw	r26, r30
    2492:	e9 2f       	mov	r30, r25
    2494:	f8 2f       	mov	r31, r24
    2496:	30 97       	sbiw	r30, 0x00	; 0
    2498:	d1 f6       	brne	.-76     	; 0x244e <malloc+0x22>
    249a:	21 15       	cp	r18, r1
    249c:	31 05       	cpc	r19, r1
    249e:	f9 f0       	breq	.+62     	; 0x24de <malloc+0xb2>
    24a0:	c9 01       	movw	r24, r18
    24a2:	84 1b       	sub	r24, r20
    24a4:	95 0b       	sbc	r25, r21
    24a6:	84 30       	cpi	r24, 0x04	; 4
    24a8:	91 05       	cpc	r25, r1
    24aa:	80 f4       	brcc	.+32     	; 0x24cc <malloc+0xa0>
    24ac:	8a 81       	ldd	r24, Y+2	; 0x02
    24ae:	9b 81       	ldd	r25, Y+3	; 0x03
    24b0:	61 15       	cp	r22, r1
    24b2:	71 05       	cpc	r23, r1
    24b4:	21 f0       	breq	.+8      	; 0x24be <malloc+0x92>
    24b6:	fb 01       	movw	r30, r22
    24b8:	93 83       	std	Z+3, r25	; 0x03
    24ba:	82 83       	std	Z+2, r24	; 0x02
    24bc:	04 c0       	rjmp	.+8      	; 0x24c6 <malloc+0x9a>
    24be:	90 93 c2 05 	sts	0x05C2, r25
    24c2:	80 93 c1 05 	sts	0x05C1, r24
    24c6:	fe 01       	movw	r30, r28
    24c8:	32 96       	adiw	r30, 0x02	; 2
    24ca:	42 c0       	rjmp	.+132    	; 0x2550 <malloc+0x124>
    24cc:	fe 01       	movw	r30, r28
    24ce:	e8 0f       	add	r30, r24
    24d0:	f9 1f       	adc	r31, r25
    24d2:	41 93       	st	Z+, r20
    24d4:	51 93       	st	Z+, r21
    24d6:	02 97       	sbiw	r24, 0x02	; 2
    24d8:	99 83       	std	Y+1, r25	; 0x01
    24da:	88 83       	st	Y, r24
    24dc:	39 c0       	rjmp	.+114    	; 0x2550 <malloc+0x124>
    24de:	80 91 bf 05 	lds	r24, 0x05BF
    24e2:	90 91 c0 05 	lds	r25, 0x05C0
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	41 f4       	brne	.+16     	; 0x24fa <malloc+0xce>
    24ea:	80 91 de 03 	lds	r24, 0x03DE
    24ee:	90 91 df 03 	lds	r25, 0x03DF
    24f2:	90 93 c0 05 	sts	0x05C0, r25
    24f6:	80 93 bf 05 	sts	0x05BF, r24
    24fa:	20 91 dc 03 	lds	r18, 0x03DC
    24fe:	30 91 dd 03 	lds	r19, 0x03DD
    2502:	21 15       	cp	r18, r1
    2504:	31 05       	cpc	r19, r1
    2506:	41 f4       	brne	.+16     	; 0x2518 <malloc+0xec>
    2508:	2d b7       	in	r18, 0x3d	; 61
    250a:	3e b7       	in	r19, 0x3e	; 62
    250c:	80 91 e0 03 	lds	r24, 0x03E0
    2510:	90 91 e1 03 	lds	r25, 0x03E1
    2514:	28 1b       	sub	r18, r24
    2516:	39 0b       	sbc	r19, r25
    2518:	e0 91 bf 05 	lds	r30, 0x05BF
    251c:	f0 91 c0 05 	lds	r31, 0x05C0
    2520:	e2 17       	cp	r30, r18
    2522:	f3 07       	cpc	r31, r19
    2524:	98 f4       	brcc	.+38     	; 0x254c <malloc+0x120>
    2526:	2e 1b       	sub	r18, r30
    2528:	3f 0b       	sbc	r19, r31
    252a:	24 17       	cp	r18, r20
    252c:	35 07       	cpc	r19, r21
    252e:	70 f0       	brcs	.+28     	; 0x254c <malloc+0x120>
    2530:	ca 01       	movw	r24, r20
    2532:	02 96       	adiw	r24, 0x02	; 2
    2534:	28 17       	cp	r18, r24
    2536:	39 07       	cpc	r19, r25
    2538:	48 f0       	brcs	.+18     	; 0x254c <malloc+0x120>
    253a:	8e 0f       	add	r24, r30
    253c:	9f 1f       	adc	r25, r31
    253e:	90 93 c0 05 	sts	0x05C0, r25
    2542:	80 93 bf 05 	sts	0x05BF, r24
    2546:	41 93       	st	Z+, r20
    2548:	51 93       	st	Z+, r21
    254a:	02 c0       	rjmp	.+4      	; 0x2550 <malloc+0x124>
    254c:	e0 e0       	ldi	r30, 0x00	; 0
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	cf 01       	movw	r24, r30
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	08 95       	ret

00002558 <free>:
    2558:	0f 93       	push	r16
    255a:	1f 93       	push	r17
    255c:	cf 93       	push	r28
    255e:	df 93       	push	r29
    2560:	9c 01       	movw	r18, r24
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	09 f4       	brne	.+2      	; 0x2568 <free+0x10>
    2566:	8c c0       	rjmp	.+280    	; 0x2680 <free+0x128>
    2568:	dc 01       	movw	r26, r24
    256a:	12 97       	sbiw	r26, 0x02	; 2
    256c:	13 96       	adiw	r26, 0x03	; 3
    256e:	1c 92       	st	X, r1
    2570:	1e 92       	st	-X, r1
    2572:	12 97       	sbiw	r26, 0x02	; 2
    2574:	60 91 c1 05 	lds	r22, 0x05C1
    2578:	70 91 c2 05 	lds	r23, 0x05C2
    257c:	61 15       	cp	r22, r1
    257e:	71 05       	cpc	r23, r1
    2580:	89 f4       	brne	.+34     	; 0x25a4 <free+0x4c>
    2582:	8d 91       	ld	r24, X+
    2584:	9c 91       	ld	r25, X
    2586:	11 97       	sbiw	r26, 0x01	; 1
    2588:	82 0f       	add	r24, r18
    258a:	93 1f       	adc	r25, r19
    258c:	20 91 bf 05 	lds	r18, 0x05BF
    2590:	30 91 c0 05 	lds	r19, 0x05C0
    2594:	28 17       	cp	r18, r24
    2596:	39 07       	cpc	r19, r25
    2598:	69 f5       	brne	.+90     	; 0x25f4 <free+0x9c>
    259a:	b0 93 c0 05 	sts	0x05C0, r27
    259e:	a0 93 bf 05 	sts	0x05BF, r26
    25a2:	6e c0       	rjmp	.+220    	; 0x2680 <free+0x128>
    25a4:	fb 01       	movw	r30, r22
    25a6:	40 e0       	ldi	r20, 0x00	; 0
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	01 c0       	rjmp	.+2      	; 0x25ae <free+0x56>
    25ac:	fc 01       	movw	r30, r24
    25ae:	ea 17       	cp	r30, r26
    25b0:	fb 07       	cpc	r31, r27
    25b2:	30 f4       	brcc	.+12     	; 0x25c0 <free+0x68>
    25b4:	82 81       	ldd	r24, Z+2	; 0x02
    25b6:	93 81       	ldd	r25, Z+3	; 0x03
    25b8:	af 01       	movw	r20, r30
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	b9 f7       	brne	.-18     	; 0x25ac <free+0x54>
    25be:	1f c0       	rjmp	.+62     	; 0x25fe <free+0xa6>
    25c0:	e9 01       	movw	r28, r18
    25c2:	22 97       	sbiw	r28, 0x02	; 2
    25c4:	fb 83       	std	Y+3, r31	; 0x03
    25c6:	ea 83       	std	Y+2, r30	; 0x02
    25c8:	08 81       	ld	r16, Y
    25ca:	19 81       	ldd	r17, Y+1	; 0x01
    25cc:	c9 01       	movw	r24, r18
    25ce:	80 0f       	add	r24, r16
    25d0:	91 1f       	adc	r25, r17
    25d2:	8e 17       	cp	r24, r30
    25d4:	9f 07       	cpc	r25, r31
    25d6:	59 f4       	brne	.+22     	; 0x25ee <free+0x96>
    25d8:	80 81       	ld	r24, Z
    25da:	91 81       	ldd	r25, Z+1	; 0x01
    25dc:	80 0f       	add	r24, r16
    25de:	91 1f       	adc	r25, r17
    25e0:	02 96       	adiw	r24, 0x02	; 2
    25e2:	99 83       	std	Y+1, r25	; 0x01
    25e4:	88 83       	st	Y, r24
    25e6:	82 81       	ldd	r24, Z+2	; 0x02
    25e8:	93 81       	ldd	r25, Z+3	; 0x03
    25ea:	9b 83       	std	Y+3, r25	; 0x03
    25ec:	8a 83       	std	Y+2, r24	; 0x02
    25ee:	41 15       	cp	r20, r1
    25f0:	51 05       	cpc	r21, r1
    25f2:	29 f4       	brne	.+10     	; 0x25fe <free+0xa6>
    25f4:	b0 93 c2 05 	sts	0x05C2, r27
    25f8:	a0 93 c1 05 	sts	0x05C1, r26
    25fc:	41 c0       	rjmp	.+130    	; 0x2680 <free+0x128>
    25fe:	fa 01       	movw	r30, r20
    2600:	b3 83       	std	Z+3, r27	; 0x03
    2602:	a2 83       	std	Z+2, r26	; 0x02
    2604:	c1 91       	ld	r28, Z+
    2606:	d1 91       	ld	r29, Z+
    2608:	ec 0f       	add	r30, r28
    260a:	fd 1f       	adc	r31, r29
    260c:	ae 17       	cp	r26, r30
    260e:	bf 07       	cpc	r27, r31
    2610:	81 f4       	brne	.+32     	; 0x2632 <free+0xda>
    2612:	f9 01       	movw	r30, r18
    2614:	92 91       	ld	r25, -Z
    2616:	82 91       	ld	r24, -Z
    2618:	8c 0f       	add	r24, r28
    261a:	9d 1f       	adc	r25, r29
    261c:	02 96       	adiw	r24, 0x02	; 2
    261e:	da 01       	movw	r26, r20
    2620:	11 96       	adiw	r26, 0x01	; 1
    2622:	9c 93       	st	X, r25
    2624:	8e 93       	st	-X, r24
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	13 96       	adiw	r26, 0x03	; 3
    262c:	9c 93       	st	X, r25
    262e:	8e 93       	st	-X, r24
    2630:	12 97       	sbiw	r26, 0x02	; 2
    2632:	e0 e0       	ldi	r30, 0x00	; 0
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	02 c0       	rjmp	.+4      	; 0x263c <free+0xe4>
    2638:	fb 01       	movw	r30, r22
    263a:	bc 01       	movw	r22, r24
    263c:	db 01       	movw	r26, r22
    263e:	12 96       	adiw	r26, 0x02	; 2
    2640:	8d 91       	ld	r24, X+
    2642:	9c 91       	ld	r25, X
    2644:	13 97       	sbiw	r26, 0x03	; 3
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	b9 f7       	brne	.-18     	; 0x2638 <free+0xe0>
    264a:	cb 01       	movw	r24, r22
    264c:	02 96       	adiw	r24, 0x02	; 2
    264e:	2d 91       	ld	r18, X+
    2650:	3c 91       	ld	r19, X
    2652:	11 97       	sbiw	r26, 0x01	; 1
    2654:	82 0f       	add	r24, r18
    2656:	93 1f       	adc	r25, r19
    2658:	20 91 bf 05 	lds	r18, 0x05BF
    265c:	30 91 c0 05 	lds	r19, 0x05C0
    2660:	28 17       	cp	r18, r24
    2662:	39 07       	cpc	r19, r25
    2664:	69 f4       	brne	.+26     	; 0x2680 <free+0x128>
    2666:	30 97       	sbiw	r30, 0x00	; 0
    2668:	29 f4       	brne	.+10     	; 0x2674 <free+0x11c>
    266a:	10 92 c2 05 	sts	0x05C2, r1
    266e:	10 92 c1 05 	sts	0x05C1, r1
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <free+0x120>
    2674:	13 82       	std	Z+3, r1	; 0x03
    2676:	12 82       	std	Z+2, r1	; 0x02
    2678:	70 93 c0 05 	sts	0x05C0, r23
    267c:	60 93 bf 05 	sts	0x05BF, r22
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	1f 91       	pop	r17
    2686:	0f 91       	pop	r16
    2688:	08 95       	ret

0000268a <strcat>:
    268a:	fb 01       	movw	r30, r22
    268c:	dc 01       	movw	r26, r24
    268e:	0d 90       	ld	r0, X+
    2690:	00 20       	and	r0, r0
    2692:	e9 f7       	brne	.-6      	; 0x268e <strcat+0x4>
    2694:	11 97       	sbiw	r26, 0x01	; 1
    2696:	01 90       	ld	r0, Z+
    2698:	0d 92       	st	X+, r0
    269a:	00 20       	and	r0, r0
    269c:	e1 f7       	brne	.-8      	; 0x2696 <strcat+0xc>
    269e:	08 95       	ret

000026a0 <strstr>:
    26a0:	fb 01       	movw	r30, r22
    26a2:	51 91       	ld	r21, Z+
    26a4:	55 23       	and	r21, r21
    26a6:	a9 f0       	breq	.+42     	; 0x26d2 <strstr+0x32>
    26a8:	bf 01       	movw	r22, r30
    26aa:	dc 01       	movw	r26, r24
    26ac:	4d 91       	ld	r20, X+
    26ae:	45 17       	cp	r20, r21
    26b0:	41 11       	cpse	r20, r1
    26b2:	e1 f7       	brne	.-8      	; 0x26ac <strstr+0xc>
    26b4:	59 f4       	brne	.+22     	; 0x26cc <strstr+0x2c>
    26b6:	cd 01       	movw	r24, r26
    26b8:	01 90       	ld	r0, Z+
    26ba:	00 20       	and	r0, r0
    26bc:	49 f0       	breq	.+18     	; 0x26d0 <strstr+0x30>
    26be:	4d 91       	ld	r20, X+
    26c0:	40 15       	cp	r20, r0
    26c2:	41 11       	cpse	r20, r1
    26c4:	c9 f3       	breq	.-14     	; 0x26b8 <strstr+0x18>
    26c6:	fb 01       	movw	r30, r22
    26c8:	41 11       	cpse	r20, r1
    26ca:	ef cf       	rjmp	.-34     	; 0x26aa <strstr+0xa>
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	08 95       	ret

000026d4 <itoa>:
    26d4:	fb 01       	movw	r30, r22
    26d6:	9f 01       	movw	r18, r30
    26d8:	e8 94       	clt
    26da:	42 30       	cpi	r20, 0x02	; 2
    26dc:	c4 f0       	brlt	.+48     	; 0x270e <itoa+0x3a>
    26de:	45 32       	cpi	r20, 0x25	; 37
    26e0:	b4 f4       	brge	.+44     	; 0x270e <itoa+0x3a>
    26e2:	4a 30       	cpi	r20, 0x0A	; 10
    26e4:	29 f4       	brne	.+10     	; 0x26f0 <itoa+0x1c>
    26e6:	97 fb       	bst	r25, 7
    26e8:	1e f4       	brtc	.+6      	; 0x26f0 <itoa+0x1c>
    26ea:	90 95       	com	r25
    26ec:	81 95       	neg	r24
    26ee:	9f 4f       	sbci	r25, 0xFF	; 255
    26f0:	64 2f       	mov	r22, r20
    26f2:	77 27       	eor	r23, r23
    26f4:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__udivmodhi4>
    26f8:	80 5d       	subi	r24, 0xD0	; 208
    26fa:	8a 33       	cpi	r24, 0x3A	; 58
    26fc:	0c f0       	brlt	.+2      	; 0x2700 <itoa+0x2c>
    26fe:	89 5d       	subi	r24, 0xD9	; 217
    2700:	81 93       	st	Z+, r24
    2702:	cb 01       	movw	r24, r22
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	a1 f7       	brne	.-24     	; 0x26f0 <itoa+0x1c>
    2708:	16 f4       	brtc	.+4      	; 0x270e <itoa+0x3a>
    270a:	5d e2       	ldi	r21, 0x2D	; 45
    270c:	51 93       	st	Z+, r21
    270e:	10 82       	st	Z, r1
    2710:	c9 01       	movw	r24, r18
    2712:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <strrev>

00002716 <strrev>:
    2716:	dc 01       	movw	r26, r24
    2718:	fc 01       	movw	r30, r24
    271a:	67 2f       	mov	r22, r23
    271c:	71 91       	ld	r23, Z+
    271e:	77 23       	and	r23, r23
    2720:	e1 f7       	brne	.-8      	; 0x271a <strrev+0x4>
    2722:	32 97       	sbiw	r30, 0x02	; 2
    2724:	04 c0       	rjmp	.+8      	; 0x272e <strrev+0x18>
    2726:	7c 91       	ld	r23, X
    2728:	6d 93       	st	X+, r22
    272a:	70 83       	st	Z, r23
    272c:	62 91       	ld	r22, -Z
    272e:	ae 17       	cp	r26, r30
    2730:	bf 07       	cpc	r27, r31
    2732:	c8 f3       	brcs	.-14     	; 0x2726 <strrev+0x10>
    2734:	08 95       	ret

00002736 <__do_global_dtors>:
    2736:	11 e0       	ldi	r17, 0x01	; 1
    2738:	c6 e5       	ldi	r28, 0x56	; 86
    273a:	d1 e0       	ldi	r29, 0x01	; 1
    273c:	04 c0       	rjmp	.+8      	; 0x2746 <__do_global_dtors+0x10>
    273e:	fe 01       	movw	r30, r28
    2740:	0e 94 12 12 	call	0x2424	; 0x2424 <__tablejump__>
    2744:	22 96       	adiw	r28, 0x02	; 2
    2746:	c8 35       	cpi	r28, 0x58	; 88
    2748:	d1 07       	cpc	r29, r17
    274a:	c9 f7       	brne	.-14     	; 0x273e <__do_global_dtors+0x8>
    274c:	f8 94       	cli

0000274e <__stop_program>:
    274e:	ff cf       	rjmp	.-2      	; 0x274e <__stop_program>
